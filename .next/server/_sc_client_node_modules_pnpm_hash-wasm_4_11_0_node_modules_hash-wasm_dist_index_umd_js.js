/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_sc_client_node_modules_pnpm_hash-wasm_4_11_0_node_modules_hash-wasm_dist_index_umd_js";
exports.ids = ["_sc_client_node_modules_pnpm_hash-wasm_4_11_0_node_modules_hash-wasm_dist_index_umd_js"];
exports.modules = {

/***/ "(sc_client)/./node_modules/.pnpm/hash-wasm@4.11.0/node_modules/hash-wasm/dist/index.umd.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/.pnpm/hash-wasm@4.11.0/node_modules/hash-wasm/dist/index.umd.js ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("/*!\n * hash-wasm (https://www.npmjs.com/package/hash-wasm)\n * (c) Dani Biro\n * @license MIT\n */\n\n(function (global, factory) {\n     true ? factory(exports) :\n    0;\n})(this, (function (exports) { 'use strict';\n\n    /******************************************************************************\r\n    Copyright (c) Microsoft Corporation.\r\n\r\n    Permission to use, copy, modify, and/or distribute this software for any\r\n    purpose with or without fee is hereby granted.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\n    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\n    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\n    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\n    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\n    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\n    PERFORMANCE OF THIS SOFTWARE.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise, SuppressedError, Symbol */\r\n\r\n\r\n    function __awaiter(thisArg, _arguments, P, generator) {\r\n        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    }\r\n\r\n    typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n        var e = new Error(message);\r\n        return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n    };\n\n    class Mutex {\n        constructor() {\n            this.mutex = Promise.resolve();\n        }\n        lock() {\n            let begin = () => { };\n            this.mutex = this.mutex.then(() => new Promise(begin));\n            return new Promise((res) => {\n                begin = res;\n            });\n        }\n        dispatch(fn) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const unlock = yield this.lock();\n                try {\n                    return yield Promise.resolve(fn());\n                }\n                finally {\n                    unlock();\n                }\n            });\n        }\n    }\n\n    /* eslint-disable import/prefer-default-export */\n    /* eslint-disable no-bitwise */\n    var _a;\n    function getGlobal() {\n        if (typeof globalThis !== 'undefined')\n            return globalThis;\n        // eslint-disable-next-line no-restricted-globals\n        if (typeof self !== 'undefined')\n            return self;\n        if (typeof window !== 'undefined')\n            return window;\n        return global;\n    }\n    const globalObject = getGlobal();\n    const nodeBuffer = (_a = globalObject.Buffer) !== null && _a !== void 0 ? _a : null;\n    const textEncoder = globalObject.TextEncoder ? new globalObject.TextEncoder() : null;\n    function intArrayToString(arr, len) {\n        return String.fromCharCode(...arr.subarray(0, len));\n    }\n    function hexCharCodesToInt(a, b) {\n        return (((a & 0xF) + ((a >> 6) | ((a >> 3) & 0x8))) << 4) | ((b & 0xF) + ((b >> 6) | ((b >> 3) & 0x8)));\n    }\n    function writeHexToUInt8(buf, str) {\n        const size = str.length >> 1;\n        for (let i = 0; i < size; i++) {\n            const index = i << 1;\n            buf[i] = hexCharCodesToInt(str.charCodeAt(index), str.charCodeAt(index + 1));\n        }\n    }\n    function hexStringEqualsUInt8(str, buf) {\n        if (str.length !== buf.length * 2) {\n            return false;\n        }\n        for (let i = 0; i < buf.length; i++) {\n            const strIndex = i << 1;\n            if (buf[i] !== hexCharCodesToInt(str.charCodeAt(strIndex), str.charCodeAt(strIndex + 1))) {\n                return false;\n            }\n        }\n        return true;\n    }\n    const alpha = 'a'.charCodeAt(0) - 10;\n    const digit = '0'.charCodeAt(0);\n    function getDigestHex(tmpBuffer, input, hashLength) {\n        let p = 0;\n        /* eslint-disable no-plusplus */\n        for (let i = 0; i < hashLength; i++) {\n            let nibble = input[i] >>> 4;\n            tmpBuffer[p++] = nibble > 9 ? nibble + alpha : nibble + digit;\n            nibble = input[i] & 0xF;\n            tmpBuffer[p++] = nibble > 9 ? nibble + alpha : nibble + digit;\n        }\n        /* eslint-enable no-plusplus */\n        return String.fromCharCode.apply(null, tmpBuffer);\n    }\n    const getUInt8Buffer = nodeBuffer !== null\n        ? (data) => {\n            if (typeof data === 'string') {\n                const buf = nodeBuffer.from(data, 'utf8');\n                return new Uint8Array(buf.buffer, buf.byteOffset, buf.length);\n            }\n            if (nodeBuffer.isBuffer(data)) {\n                return new Uint8Array(data.buffer, data.byteOffset, data.length);\n            }\n            if (ArrayBuffer.isView(data)) {\n                return new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\n            }\n            throw new Error('Invalid data type!');\n        }\n        : (data) => {\n            if (typeof data === 'string') {\n                return textEncoder.encode(data);\n            }\n            if (ArrayBuffer.isView(data)) {\n                return new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\n            }\n            throw new Error('Invalid data type!');\n        };\n    const base64Chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n    const base64Lookup = new Uint8Array(256);\n    for (let i = 0; i < base64Chars.length; i++) {\n        base64Lookup[base64Chars.charCodeAt(i)] = i;\n    }\n    function encodeBase64(data, pad = true) {\n        const len = data.length;\n        const extraBytes = len % 3;\n        const parts = [];\n        const len2 = len - extraBytes;\n        for (let i = 0; i < len2; i += 3) {\n            const tmp = ((data[i] << 16) & 0xFF0000)\n                + ((data[i + 1] << 8) & 0xFF00)\n                + (data[i + 2] & 0xFF);\n            const triplet = base64Chars.charAt((tmp >> 18) & 0x3F)\n                + base64Chars.charAt((tmp >> 12) & 0x3F)\n                + base64Chars.charAt((tmp >> 6) & 0x3F)\n                + base64Chars.charAt(tmp & 0x3F);\n            parts.push(triplet);\n        }\n        if (extraBytes === 1) {\n            const tmp = data[len - 1];\n            const a = base64Chars.charAt(tmp >> 2);\n            const b = base64Chars.charAt((tmp << 4) & 0x3F);\n            parts.push(`${a}${b}`);\n            if (pad) {\n                parts.push('==');\n            }\n        }\n        else if (extraBytes === 2) {\n            const tmp = (data[len - 2] << 8) + data[len - 1];\n            const a = base64Chars.charAt(tmp >> 10);\n            const b = base64Chars.charAt((tmp >> 4) & 0x3F);\n            const c = base64Chars.charAt((tmp << 2) & 0x3F);\n            parts.push(`${a}${b}${c}`);\n            if (pad) {\n                parts.push('=');\n            }\n        }\n        return parts.join('');\n    }\n    function getDecodeBase64Length(data) {\n        let bufferLength = Math.floor(data.length * 0.75);\n        const len = data.length;\n        if (data[len - 1] === '=') {\n            bufferLength -= 1;\n            if (data[len - 2] === '=') {\n                bufferLength -= 1;\n            }\n        }\n        return bufferLength;\n    }\n    function decodeBase64(data) {\n        const bufferLength = getDecodeBase64Length(data);\n        const len = data.length;\n        const bytes = new Uint8Array(bufferLength);\n        let p = 0;\n        for (let i = 0; i < len; i += 4) {\n            const encoded1 = base64Lookup[data.charCodeAt(i)];\n            const encoded2 = base64Lookup[data.charCodeAt(i + 1)];\n            const encoded3 = base64Lookup[data.charCodeAt(i + 2)];\n            const encoded4 = base64Lookup[data.charCodeAt(i + 3)];\n            bytes[p] = (encoded1 << 2) | (encoded2 >> 4);\n            p += 1;\n            bytes[p] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n            p += 1;\n            bytes[p] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n            p += 1;\n        }\n        return bytes;\n    }\n\n    const MAX_HEAP = 16 * 1024;\n    const WASM_FUNC_HASH_LENGTH = 4;\n    const wasmMutex = new Mutex();\n    const wasmModuleCache = new Map();\n    function WASMInterface(binary, hashLength) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let wasmInstance = null;\n            let memoryView = null;\n            let initialized = false;\n            if (typeof WebAssembly === 'undefined') {\n                throw new Error('WebAssembly is not supported in this environment!');\n            }\n            const writeMemory = (data, offset = 0) => {\n                memoryView.set(data, offset);\n            };\n            const getMemory = () => memoryView;\n            const getExports = () => wasmInstance.exports;\n            const setMemorySize = (totalSize) => {\n                wasmInstance.exports.Hash_SetMemorySize(totalSize);\n                const arrayOffset = wasmInstance.exports.Hash_GetBuffer();\n                const memoryBuffer = wasmInstance.exports.memory.buffer;\n                memoryView = new Uint8Array(memoryBuffer, arrayOffset, totalSize);\n            };\n            const getStateSize = () => {\n                const view = new DataView(wasmInstance.exports.memory.buffer);\n                const stateSize = view.getUint32(wasmInstance.exports.STATE_SIZE, true);\n                return stateSize;\n            };\n            const loadWASMPromise = wasmMutex.dispatch(() => __awaiter(this, void 0, void 0, function* () {\n                if (!wasmModuleCache.has(binary.name)) {\n                    const asm = decodeBase64(binary.data);\n                    const promise = WebAssembly.compile(asm);\n                    wasmModuleCache.set(binary.name, promise);\n                }\n                const module = yield wasmModuleCache.get(binary.name);\n                wasmInstance = yield WebAssembly.instantiate(module, {\n                // env: {\n                //   emscripten_memcpy_big: (dest, src, num) => {\n                //     const memoryBuffer = wasmInstance.exports.memory.buffer;\n                //     const memView = new Uint8Array(memoryBuffer, 0);\n                //     memView.set(memView.subarray(src, src + num), dest);\n                //   },\n                //   print_memory: (offset, len) => {\n                //     const memoryBuffer = wasmInstance.exports.memory.buffer;\n                //     const memView = new Uint8Array(memoryBuffer, 0);\n                //     console.log('print_int32', memView.subarray(offset, offset + len));\n                //   },\n                // },\n                });\n                // wasmInstance.exports._start();\n            }));\n            const setupInterface = () => __awaiter(this, void 0, void 0, function* () {\n                if (!wasmInstance) {\n                    yield loadWASMPromise;\n                }\n                const arrayOffset = wasmInstance.exports.Hash_GetBuffer();\n                const memoryBuffer = wasmInstance.exports.memory.buffer;\n                memoryView = new Uint8Array(memoryBuffer, arrayOffset, MAX_HEAP);\n            });\n            const init = (bits = null) => {\n                initialized = true;\n                wasmInstance.exports.Hash_Init(bits);\n            };\n            const updateUInt8Array = (data) => {\n                let read = 0;\n                while (read < data.length) {\n                    const chunk = data.subarray(read, read + MAX_HEAP);\n                    read += chunk.length;\n                    memoryView.set(chunk);\n                    wasmInstance.exports.Hash_Update(chunk.length);\n                }\n            };\n            const update = (data) => {\n                if (!initialized) {\n                    throw new Error('update() called before init()');\n                }\n                const Uint8Buffer = getUInt8Buffer(data);\n                updateUInt8Array(Uint8Buffer);\n            };\n            const digestChars = new Uint8Array(hashLength * 2);\n            const digest = (outputType, padding = null) => {\n                if (!initialized) {\n                    throw new Error('digest() called before init()');\n                }\n                initialized = false;\n                wasmInstance.exports.Hash_Final(padding);\n                if (outputType === 'binary') {\n                    // the data is copied to allow GC of the original memory object\n                    return memoryView.slice(0, hashLength);\n                }\n                return getDigestHex(digestChars, memoryView, hashLength);\n            };\n            const save = () => {\n                if (!initialized) {\n                    throw new Error('save() can only be called after init() and before digest()');\n                }\n                const stateOffset = wasmInstance.exports.Hash_GetState();\n                const stateLength = getStateSize();\n                const memoryBuffer = wasmInstance.exports.memory.buffer;\n                const internalState = new Uint8Array(memoryBuffer, stateOffset, stateLength);\n                // prefix is 4 bytes from SHA1 hash of the WASM binary\n                // it is used to detect incompatible internal states between different versions of hash-wasm\n                const prefixedState = new Uint8Array(WASM_FUNC_HASH_LENGTH + stateLength);\n                writeHexToUInt8(prefixedState, binary.hash);\n                prefixedState.set(internalState, WASM_FUNC_HASH_LENGTH);\n                return prefixedState;\n            };\n            const load = (state) => {\n                if (!(state instanceof Uint8Array)) {\n                    throw new Error('load() expects an Uint8Array generated by save()');\n                }\n                const stateOffset = wasmInstance.exports.Hash_GetState();\n                const stateLength = getStateSize();\n                const overallLength = WASM_FUNC_HASH_LENGTH + stateLength;\n                const memoryBuffer = wasmInstance.exports.memory.buffer;\n                if (state.length !== overallLength) {\n                    throw new Error(`Bad state length (expected ${overallLength} bytes, got ${state.length})`);\n                }\n                if (!hexStringEqualsUInt8(binary.hash, state.subarray(0, WASM_FUNC_HASH_LENGTH))) {\n                    throw new Error('This state was written by an incompatible hash implementation');\n                }\n                const internalState = state.subarray(WASM_FUNC_HASH_LENGTH);\n                new Uint8Array(memoryBuffer, stateOffset, stateLength).set(internalState);\n                initialized = true;\n            };\n            const isDataShort = (data) => {\n                if (typeof data === 'string') {\n                    // worst case is 4 bytes / char\n                    return data.length < MAX_HEAP / 4;\n                }\n                return data.byteLength < MAX_HEAP;\n            };\n            let canSimplify = isDataShort;\n            switch (binary.name) {\n                case 'argon2':\n                case 'scrypt':\n                    canSimplify = () => true;\n                    break;\n                case 'blake2b':\n                case 'blake2s':\n                    // if there is a key at blake2 then cannot simplify\n                    canSimplify = (data, initParam) => initParam <= 512 && isDataShort(data);\n                    break;\n                case 'blake3':\n                    // if there is a key at blake3 then cannot simplify\n                    canSimplify = (data, initParam) => initParam === 0 && isDataShort(data);\n                    break;\n                case 'xxhash64': // cannot simplify\n                case 'xxhash3':\n                case 'xxhash128':\n                    canSimplify = () => false;\n                    break;\n            }\n            // shorthand for (init + update + digest) for better performance\n            const calculate = (data, initParam = null, digestParam = null) => {\n                if (!canSimplify(data, initParam)) {\n                    init(initParam);\n                    update(data);\n                    return digest('hex', digestParam);\n                }\n                const buffer = getUInt8Buffer(data);\n                memoryView.set(buffer);\n                wasmInstance.exports.Hash_Calculate(buffer.length, initParam, digestParam);\n                return getDigestHex(digestChars, memoryView, hashLength);\n            };\n            yield setupInterface();\n            return {\n                getMemory,\n                writeMemory,\n                getExports,\n                setMemorySize,\n                init,\n                update,\n                digest,\n                save,\n                load,\n                calculate,\n                hashLength,\n            };\n        });\n    }\n\n    var name$k = \"adler32\";\n    var data$k = \"AGFzbQEAAAABDANgAAF/YAAAYAF/AAMHBgABAgEAAgUEAQECAgYOAn8BQYCJBQt/AEGACAsHcAgGbWVtb3J5AgAOSGFzaF9HZXRCdWZmZXIAAAlIYXNoX0luaXQAAQtIYXNoX1VwZGF0ZQACCkhhc2hfRmluYWwAAw1IYXNoX0dldFN0YXRlAAQOSGFzaF9DYWxjdWxhdGUABQpTVEFURV9TSVpFAwEK6wkGBQBBgAkLCgBBAEEBNgKECAvjCAEHf0EAKAKECCIBQf//A3EhAiABQRB2IQMCQAJAIABBAUcNACACQQAtAIAJaiIBQY+AfGogASABQfD/A0sbIgEgA2oiBEEQdCIFQYCAPGogBSAEQfD/A0sbIAFyIQEMAQsCQAJAAkACQAJAIABBEEkNAEGACSEGIABBsCtJDQFBgAkhBgNAQQAhBQNAIAYgBWoiASgCACIEQf8BcSACaiICIANqIAIgBEEIdkH/AXFqIgJqIAIgBEEQdkH/AXFqIgJqIAIgBEEYdmoiAmogAiABQQRqKAIAIgRB/wFxaiICaiACIARBCHZB/wFxaiICaiACIARBEHZB/wFxaiICaiACIARBGHZqIgJqIAIgAUEIaigCACIEQf8BcWoiAmogAiAEQQh2Qf8BcWoiAmogAiAEQRB2Qf8BcWoiAmogAiAEQRh2aiIEaiAEIAFBDGooAgAiAUH/AXFqIgRqIAQgAUEIdkH/AXFqIgRqIAQgAUEQdkH/AXFqIgRqIAQgAUEYdmoiAmohAyAFQRBqIgVBsCtHDQALIANB8f8DcCEDIAJB8f8DcCECIAZBsCtqIQYgAEHQVGoiAEGvK0sNAAsgAEUNBCAAQQ9LDQEMAgsCQCAARQ0AAkACQCAAQQNxIgUNAEGACSEBIAAhBAwBCyAAQXxxIQRBACEBA0AgAiABQYAJai0AAGoiAiADaiEDIAUgAUEBaiIBRw0ACyAFQYAJaiEBCyAAQQRJDQADQCACIAEtAABqIgUgAS0AAWoiBiABLQACaiIAIAFBA2otAABqIgIgACAGIAUgA2pqamohAyABQQRqIQEgBEF8aiIEDQALCyACQY+AfGogAiACQfD/A0sbIANB8f8DcEEQdHIhAQwECwNAIAYoAgAiAUH/AXEgAmoiBCADaiAEIAFBCHZB/wFxaiIEaiAEIAFBEHZB/wFxaiIEaiAEIAFBGHZqIgRqIAQgBkEEaigCACIBQf8BcWoiBGogBCABQQh2Qf8BcWoiBGogBCABQRB2Qf8BcWoiBGogBCABQRh2aiIEaiAEIAZBCGooAgAiAUH/AXFqIgRqIAQgAUEIdkH/AXFqIgRqIAQgAUEQdkH/AXFqIgRqIAQgAUEYdmoiBGogBCAGQQxqKAIAIgFB/wFxaiIEaiAEIAFBCHZB/wFxaiIEaiAEIAFBEHZB/wFxaiIEaiAEIAFBGHZqIgJqIQMgBkEQaiEGIABBcGoiAEEPSw0ACyAARQ0BCyAAQX9qIQcCQCAAQQNxIgVFDQAgAEF8cSEAIAUhBCAGIQEDQCACIAEtAABqIgIgA2ohAyABQQFqIQEgBEF/aiIEDQALIAYgBWohBgsgB0EDSQ0AA0AgAiAGLQAAaiIBIAYtAAFqIgQgBi0AAmoiBSAGQQNqLQAAaiICIAUgBCABIANqampqIQMgBkEEaiEGIABBfGoiAA0ACwsgA0Hx/wNwIQMgAkHx/wNwIQILIAIgA0EQdHIhAQtBACABNgKECAsxAQF/QQBBACgChAgiAEEYdCAAQYD+A3FBCHRyIABBCHZBgP4DcSAAQRh2cnI2AoAJCwUAQYQICzsAQQBBATYChAggABACQQBBACgChAgiAEEYdCAAQYD+A3FBCHRyIABBCHZBgP4DcSAAQRh2cnI2AoAJCwsVAgBBgAgLBAQAAAAAQYQICwQBAAAA\";\n    var hash$k = \"02ddbd17\";\n    var wasmJson$k = {\n    \tname: name$k,\n    \tdata: data$k,\n    \thash: hash$k\n    };\n\n    function lockedCreate(mutex, binary, hashLength) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const unlock = yield mutex.lock();\n            const wasm = yield WASMInterface(binary, hashLength);\n            unlock();\n            return wasm;\n        });\n    }\n\n    const mutex$l = new Mutex();\n    let wasmCache$l = null;\n    /**\n     * Calculates Adler-32 hash. The resulting 32-bit hash is stored in\n     * network byte order (big-endian).\n     *\n     * @param data Input data (string, Buffer or TypedArray)\n     * @returns Computed hash as a hexadecimal string\n     */\n    function adler32(data) {\n        if (wasmCache$l === null) {\n            return lockedCreate(mutex$l, wasmJson$k, 4)\n                .then((wasm) => {\n                wasmCache$l = wasm;\n                return wasmCache$l.calculate(data);\n            });\n        }\n        try {\n            const hash = wasmCache$l.calculate(data);\n            return Promise.resolve(hash);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    /**\n     * Creates a new Adler-32 hash instance\n     */\n    function createAdler32() {\n        return WASMInterface(wasmJson$k, 4).then((wasm) => {\n            wasm.init();\n            const obj = {\n                init: () => { wasm.init(); return obj; },\n                update: (data) => { wasm.update(data); return obj; },\n                digest: (outputType) => wasm.digest(outputType),\n                save: () => wasm.save(),\n                load: (data) => { wasm.load(data); return obj; },\n                blockSize: 4,\n                digestSize: 4,\n            };\n            return obj;\n        });\n    }\n\n    var name$j = \"blake2b\";\n    var data$j = \"\";\n    var hash$j = \"656e0f66\";\n    var wasmJson$j = {\n    \tname: name$j,\n    \tdata: data$j,\n    \thash: hash$j\n    };\n\n    const mutex$k = new Mutex();\n    let wasmCache$k = null;\n    function validateBits$4(bits) {\n        if (!Number.isInteger(bits) || bits < 8 || bits > 512 || bits % 8 !== 0) {\n            return new Error('Invalid variant! Valid values: 8, 16, ..., 512');\n        }\n        return null;\n    }\n    function getInitParam$1(outputBits, keyBits) {\n        // eslint-disable-next-line no-bitwise\n        return outputBits | (keyBits << 16);\n    }\n    /**\n     * Calculates BLAKE2b hash\n     * @param data Input data (string, Buffer or TypedArray)\n     * @param bits Number of output bits, which has to be a number\n     *             divisible by 8, between 8 and 512. Defaults to 512.\n     * @param key Optional key (string, Buffer or TypedArray). Maximum length is 64 bytes.\n     * @returns Computed hash as a hexadecimal string\n     */\n    function blake2b(data, bits = 512, key = null) {\n        if (validateBits$4(bits)) {\n            return Promise.reject(validateBits$4(bits));\n        }\n        let keyBuffer = null;\n        let initParam = bits;\n        if (key !== null) {\n            keyBuffer = getUInt8Buffer(key);\n            if (keyBuffer.length > 64) {\n                return Promise.reject(new Error('Max key length is 64 bytes'));\n            }\n            initParam = getInitParam$1(bits, keyBuffer.length);\n        }\n        const hashLength = bits / 8;\n        if (wasmCache$k === null || wasmCache$k.hashLength !== hashLength) {\n            return lockedCreate(mutex$k, wasmJson$j, hashLength)\n                .then((wasm) => {\n                wasmCache$k = wasm;\n                if (initParam > 512) {\n                    wasmCache$k.writeMemory(keyBuffer);\n                }\n                return wasmCache$k.calculate(data, initParam);\n            });\n        }\n        try {\n            if (initParam > 512) {\n                wasmCache$k.writeMemory(keyBuffer);\n            }\n            const hash = wasmCache$k.calculate(data, initParam);\n            return Promise.resolve(hash);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    /**\n     * Creates a new BLAKE2b hash instance\n     * @param bits Number of output bits, which has to be a number\n     *             divisible by 8, between 8 and 512. Defaults to 512.\n     * @param key Optional key (string, Buffer or TypedArray). Maximum length is 64 bytes.\n     */\n    function createBLAKE2b(bits = 512, key = null) {\n        if (validateBits$4(bits)) {\n            return Promise.reject(validateBits$4(bits));\n        }\n        let keyBuffer = null;\n        let initParam = bits;\n        if (key !== null) {\n            keyBuffer = getUInt8Buffer(key);\n            if (keyBuffer.length > 64) {\n                return Promise.reject(new Error('Max key length is 64 bytes'));\n            }\n            initParam = getInitParam$1(bits, keyBuffer.length);\n        }\n        const outputSize = bits / 8;\n        return WASMInterface(wasmJson$j, outputSize).then((wasm) => {\n            if (initParam > 512) {\n                wasm.writeMemory(keyBuffer);\n            }\n            wasm.init(initParam);\n            const obj = {\n                init: initParam > 512\n                    ? () => {\n                        wasm.writeMemory(keyBuffer);\n                        wasm.init(initParam);\n                        return obj;\n                    }\n                    : () => {\n                        wasm.init(initParam);\n                        return obj;\n                    },\n                update: (data) => { wasm.update(data); return obj; },\n                digest: (outputType) => wasm.digest(outputType),\n                save: () => wasm.save(),\n                load: (data) => { wasm.load(data); return obj; },\n                blockSize: 128,\n                digestSize: outputSize,\n            };\n            return obj;\n        });\n    }\n\n    var name$i = \"argon2\";\n    var data$i = \"\";\n    var hash$i = \"7ab14c91\";\n    var wasmJson$i = {\n    \tname: name$i,\n    \tdata: data$i,\n    \thash: hash$i\n    };\n\n    function encodeResult(salt, options, res) {\n        const parameters = [\n            `m=${options.memorySize}`,\n            `t=${options.iterations}`,\n            `p=${options.parallelism}`,\n        ].join(',');\n        return `$argon2${options.hashType}$v=19$${parameters}$${encodeBase64(salt, false)}$${encodeBase64(res, false)}`;\n    }\n    const uint32View = new DataView(new ArrayBuffer(4));\n    function int32LE(x) {\n        uint32View.setInt32(0, x, true);\n        return new Uint8Array(uint32View.buffer);\n    }\n    function hashFunc(blake512, buf, len) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (len <= 64) {\n                const blake = yield createBLAKE2b(len * 8);\n                blake.update(int32LE(len));\n                blake.update(buf);\n                return blake.digest('binary');\n            }\n            const r = Math.ceil(len / 32) - 2;\n            const ret = new Uint8Array(len);\n            blake512.init();\n            blake512.update(int32LE(len));\n            blake512.update(buf);\n            let vp = blake512.digest('binary');\n            ret.set(vp.subarray(0, 32), 0);\n            for (let i = 1; i < r; i++) {\n                blake512.init();\n                blake512.update(vp);\n                vp = blake512.digest('binary');\n                ret.set(vp.subarray(0, 32), i * 32);\n            }\n            const partialBytesNeeded = len - 32 * r;\n            let blakeSmall;\n            if (partialBytesNeeded === 64) {\n                blakeSmall = blake512;\n                blakeSmall.init();\n            }\n            else {\n                blakeSmall = yield createBLAKE2b(partialBytesNeeded * 8);\n            }\n            blakeSmall.update(vp);\n            vp = blakeSmall.digest('binary');\n            ret.set(vp.subarray(0, partialBytesNeeded), r * 32);\n            return ret;\n        });\n    }\n    function getHashType(type) {\n        switch (type) {\n            case 'd':\n                return 0;\n            case 'i':\n                return 1;\n            default:\n                return 2;\n        }\n    }\n    function argon2Internal(options) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { parallelism, iterations, hashLength } = options;\n            const password = getUInt8Buffer(options.password);\n            const salt = getUInt8Buffer(options.salt);\n            const version = 0x13;\n            const hashType = getHashType(options.hashType);\n            const { memorySize } = options; // in KB\n            const secret = getUInt8Buffer((_a = options.secret) !== null && _a !== void 0 ? _a : '');\n            const [argon2Interface, blake512] = yield Promise.all([\n                WASMInterface(wasmJson$i, 1024),\n                createBLAKE2b(512),\n            ]);\n            // last block is for storing the init vector\n            argon2Interface.setMemorySize(memorySize * 1024 + 1024);\n            const initVector = new Uint8Array(24);\n            const initVectorView = new DataView(initVector.buffer);\n            initVectorView.setInt32(0, parallelism, true);\n            initVectorView.setInt32(4, hashLength, true);\n            initVectorView.setInt32(8, memorySize, true);\n            initVectorView.setInt32(12, iterations, true);\n            initVectorView.setInt32(16, version, true);\n            initVectorView.setInt32(20, hashType, true);\n            argon2Interface.writeMemory(initVector, memorySize * 1024);\n            blake512.init();\n            blake512.update(initVector);\n            blake512.update(int32LE(password.length));\n            blake512.update(password);\n            blake512.update(int32LE(salt.length));\n            blake512.update(salt);\n            blake512.update(int32LE(secret.length));\n            blake512.update(secret);\n            blake512.update(int32LE(0)); // associatedData length + associatedData\n            const segments = Math.floor(memorySize / (parallelism * 4)); // length of each lane\n            const lanes = segments * 4;\n            const param = new Uint8Array(72);\n            const H0 = blake512.digest('binary');\n            param.set(H0);\n            for (let lane = 0; lane < parallelism; lane++) {\n                param.set(int32LE(0), 64);\n                param.set(int32LE(lane), 68);\n                let position = lane * lanes;\n                let chunk = yield hashFunc(blake512, param, 1024);\n                argon2Interface.writeMemory(chunk, position * 1024);\n                position += 1;\n                param.set(int32LE(1), 64);\n                chunk = yield hashFunc(blake512, param, 1024);\n                argon2Interface.writeMemory(chunk, position * 1024);\n            }\n            const C = new Uint8Array(1024);\n            writeHexToUInt8(C, argon2Interface.calculate(new Uint8Array([]), memorySize));\n            const res = yield hashFunc(blake512, C, hashLength);\n            if (options.outputType === 'hex') {\n                const digestChars = new Uint8Array(hashLength * 2);\n                return getDigestHex(digestChars, res, hashLength);\n            }\n            if (options.outputType === 'encoded') {\n                return encodeResult(salt, options, res);\n            }\n            // return binary format\n            return res;\n        });\n    }\n    const validateOptions$3 = (options) => {\n        var _a;\n        if (!options || typeof options !== 'object') {\n            throw new Error('Invalid options parameter. It requires an object.');\n        }\n        if (!options.password) {\n            throw new Error('Password must be specified');\n        }\n        options.password = getUInt8Buffer(options.password);\n        if (options.password.length < 1) {\n            throw new Error('Password must be specified');\n        }\n        if (!options.salt) {\n            throw new Error('Salt must be specified');\n        }\n        options.salt = getUInt8Buffer(options.salt);\n        if (options.salt.length < 8) {\n            throw new Error('Salt should be at least 8 bytes long');\n        }\n        options.secret = getUInt8Buffer((_a = options.secret) !== null && _a !== void 0 ? _a : '');\n        if (!Number.isInteger(options.iterations) || options.iterations < 1) {\n            throw new Error('Iterations should be a positive number');\n        }\n        if (!Number.isInteger(options.parallelism) || options.parallelism < 1) {\n            throw new Error('Parallelism should be a positive number');\n        }\n        if (!Number.isInteger(options.hashLength) || options.hashLength < 4) {\n            throw new Error('Hash length should be at least 4 bytes.');\n        }\n        if (!Number.isInteger(options.memorySize)) {\n            throw new Error('Memory size should be specified.');\n        }\n        if (options.memorySize < 8 * options.parallelism) {\n            throw new Error('Memory size should be at least 8 * parallelism.');\n        }\n        if (options.outputType === undefined) {\n            options.outputType = 'hex';\n        }\n        if (!['hex', 'binary', 'encoded'].includes(options.outputType)) {\n            throw new Error(`Insupported output type ${options.outputType}. Valid values: ['hex', 'binary', 'encoded']`);\n        }\n    };\n    /**\n     * Calculates hash using the argon2i password-hashing function\n     * @returns Computed hash\n     */\n    function argon2i(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            validateOptions$3(options);\n            return argon2Internal(Object.assign(Object.assign({}, options), { hashType: 'i' }));\n        });\n    }\n    /**\n     * Calculates hash using the argon2id password-hashing function\n     * @returns Computed hash\n     */\n    function argon2id(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            validateOptions$3(options);\n            return argon2Internal(Object.assign(Object.assign({}, options), { hashType: 'id' }));\n        });\n    }\n    /**\n     * Calculates hash using the argon2d password-hashing function\n     * @returns Computed hash\n     */\n    function argon2d(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            validateOptions$3(options);\n            return argon2Internal(Object.assign(Object.assign({}, options), { hashType: 'd' }));\n        });\n    }\n    const getHashParameters = (password, encoded, secret) => {\n        const regex = /^\\$argon2(id|i|d)\\$v=([0-9]+)\\$((?:[mtp]=[0-9]+,){2}[mtp]=[0-9]+)\\$([A-Za-z0-9+/]+)\\$([A-Za-z0-9+/]+)$/;\n        const match = encoded.match(regex);\n        if (!match) {\n            throw new Error('Invalid hash');\n        }\n        const [, hashType, version, parameters, salt, hash] = match;\n        if (version !== '19') {\n            throw new Error(`Unsupported version: ${version}`);\n        }\n        const parsedParameters = {};\n        const paramMap = { m: 'memorySize', p: 'parallelism', t: 'iterations' };\n        parameters.split(',').forEach((x) => {\n            const [n, v] = x.split('=');\n            parsedParameters[paramMap[n]] = parseInt(v, 10);\n        });\n        return Object.assign(Object.assign({}, parsedParameters), { password,\n            secret, hashType: hashType, salt: decodeBase64(salt), hashLength: getDecodeBase64Length(hash), outputType: 'encoded' });\n    };\n    const validateVerifyOptions$1 = (options) => {\n        if (!options || typeof options !== 'object') {\n            throw new Error('Invalid options parameter. It requires an object.');\n        }\n        if (options.hash === undefined || typeof options.hash !== 'string') {\n            throw new Error('Hash should be specified');\n        }\n    };\n    /**\n     * Verifies password using the argon2 password-hashing function\n     * @returns True if the encoded hash matches the password\n     */\n    function argon2Verify(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            validateVerifyOptions$1(options);\n            const params = getHashParameters(options.password, options.hash, options.secret);\n            validateOptions$3(params);\n            const hashStart = options.hash.lastIndexOf('$') + 1;\n            const result = yield argon2Internal(params);\n            return result.substring(hashStart) === options.hash.substring(hashStart);\n        });\n    }\n\n    var name$h = \"blake2s\";\n    var data$h = \"\";\n    var hash$h = \"c5c746d4\";\n    var wasmJson$h = {\n    \tname: name$h,\n    \tdata: data$h,\n    \thash: hash$h\n    };\n\n    const mutex$j = new Mutex();\n    let wasmCache$j = null;\n    function validateBits$3(bits) {\n        if (!Number.isInteger(bits) || bits < 8 || bits > 256 || bits % 8 !== 0) {\n            return new Error('Invalid variant! Valid values: 8, 16, ..., 256');\n        }\n        return null;\n    }\n    function getInitParam(outputBits, keyBits) {\n        // eslint-disable-next-line no-bitwise\n        return outputBits | (keyBits << 16);\n    }\n    /**\n     * Calculates BLAKE2s hash\n     * @param data Input data (string, Buffer or TypedArray)\n     * @param bits Number of output bits, which has to be a number\n     *             divisible by 8, between 8 and 256. Defaults to 256.\n     * @param key Optional key (string, Buffer or TypedArray). Maximum length is 32 bytes.\n     * @returns Computed hash as a hexadecimal string\n     */\n    function blake2s(data, bits = 256, key = null) {\n        if (validateBits$3(bits)) {\n            return Promise.reject(validateBits$3(bits));\n        }\n        let keyBuffer = null;\n        let initParam = bits;\n        if (key !== null) {\n            keyBuffer = getUInt8Buffer(key);\n            if (keyBuffer.length > 32) {\n                return Promise.reject(new Error('Max key length is 32 bytes'));\n            }\n            initParam = getInitParam(bits, keyBuffer.length);\n        }\n        const hashLength = bits / 8;\n        if (wasmCache$j === null || wasmCache$j.hashLength !== hashLength) {\n            return lockedCreate(mutex$j, wasmJson$h, hashLength)\n                .then((wasm) => {\n                wasmCache$j = wasm;\n                if (initParam > 512) {\n                    wasmCache$j.writeMemory(keyBuffer);\n                }\n                return wasmCache$j.calculate(data, initParam);\n            });\n        }\n        try {\n            if (initParam > 512) {\n                wasmCache$j.writeMemory(keyBuffer);\n            }\n            const hash = wasmCache$j.calculate(data, initParam);\n            return Promise.resolve(hash);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    /**\n     * Creates a new BLAKE2s hash instance\n     * @param bits Number of output bits, which has to be a number\n     *             divisible by 8, between 8 and 256. Defaults to 256.\n     * @param key Optional key (string, Buffer or TypedArray). Maximum length is 32 bytes.\n     */\n    function createBLAKE2s(bits = 256, key = null) {\n        if (validateBits$3(bits)) {\n            return Promise.reject(validateBits$3(bits));\n        }\n        let keyBuffer = null;\n        let initParam = bits;\n        if (key !== null) {\n            keyBuffer = getUInt8Buffer(key);\n            if (keyBuffer.length > 32) {\n                return Promise.reject(new Error('Max key length is 32 bytes'));\n            }\n            initParam = getInitParam(bits, keyBuffer.length);\n        }\n        const outputSize = bits / 8;\n        return WASMInterface(wasmJson$h, outputSize).then((wasm) => {\n            if (initParam > 512) {\n                wasm.writeMemory(keyBuffer);\n            }\n            wasm.init(initParam);\n            const obj = {\n                init: initParam > 512\n                    ? () => {\n                        wasm.writeMemory(keyBuffer);\n                        wasm.init(initParam);\n                        return obj;\n                    }\n                    : () => {\n                        wasm.init(initParam);\n                        return obj;\n                    },\n                update: (data) => { wasm.update(data); return obj; },\n                digest: (outputType) => wasm.digest(outputType),\n                save: () => wasm.save(),\n                load: (data) => { wasm.load(data); return obj; },\n                blockSize: 64,\n                digestSize: outputSize,\n            };\n            return obj;\n        });\n    }\n\n    var name$g = \"blake3\";\n    var data$g = \"\";\n    var hash$g = \"540e8b8e\";\n    var wasmJson$g = {\n    \tname: name$g,\n    \tdata: data$g,\n    \thash: hash$g\n    };\n\n    const mutex$i = new Mutex();\n    let wasmCache$i = null;\n    function validateBits$2(bits) {\n        if (!Number.isInteger(bits) || bits < 8 || bits % 8 !== 0) {\n            return new Error('Invalid variant! Valid values: 8, 16, ...');\n        }\n        return null;\n    }\n    /**\n     * Calculates BLAKE3 hash\n     * @param data Input data (string, Buffer or TypedArray)\n     * @param bits Number of output bits, which has to be a number\n     *             divisible by 8. Defaults to 256.\n     * @param key Optional key (string, Buffer or TypedArray). Length should be 32 bytes.\n     * @returns Computed hash as a hexadecimal string\n     */\n    function blake3(data, bits = 256, key = null) {\n        if (validateBits$2(bits)) {\n            return Promise.reject(validateBits$2(bits));\n        }\n        let keyBuffer = null;\n        let initParam = 0; // key is empty by default\n        if (key !== null) {\n            keyBuffer = getUInt8Buffer(key);\n            if (keyBuffer.length !== 32) {\n                return Promise.reject(new Error('Key length must be exactly 32 bytes'));\n            }\n            initParam = 32;\n        }\n        const hashLength = bits / 8;\n        const digestParam = hashLength;\n        if (wasmCache$i === null || wasmCache$i.hashLength !== hashLength) {\n            return lockedCreate(mutex$i, wasmJson$g, hashLength)\n                .then((wasm) => {\n                wasmCache$i = wasm;\n                if (initParam === 32) {\n                    wasmCache$i.writeMemory(keyBuffer);\n                }\n                return wasmCache$i.calculate(data, initParam, digestParam);\n            });\n        }\n        try {\n            if (initParam === 32) {\n                wasmCache$i.writeMemory(keyBuffer);\n            }\n            const hash = wasmCache$i.calculate(data, initParam, digestParam);\n            return Promise.resolve(hash);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    /**\n     * Creates a new BLAKE3 hash instance\n     * @param bits Number of output bits, which has to be a number\n     *             divisible by 8. Defaults to 256.\n     * @param key Optional key (string, Buffer or TypedArray). Length should be 32 bytes.\n     */\n    function createBLAKE3(bits = 256, key = null) {\n        if (validateBits$2(bits)) {\n            return Promise.reject(validateBits$2(bits));\n        }\n        let keyBuffer = null;\n        let initParam = 0; // key is empty by default\n        if (key !== null) {\n            keyBuffer = getUInt8Buffer(key);\n            if (keyBuffer.length !== 32) {\n                return Promise.reject(new Error('Key length must be exactly 32 bytes'));\n            }\n            initParam = 32;\n        }\n        const outputSize = bits / 8;\n        const digestParam = outputSize;\n        return WASMInterface(wasmJson$g, outputSize).then((wasm) => {\n            if (initParam === 32) {\n                wasm.writeMemory(keyBuffer);\n            }\n            wasm.init(initParam);\n            const obj = {\n                init: initParam === 32\n                    ? () => {\n                        wasm.writeMemory(keyBuffer);\n                        wasm.init(initParam);\n                        return obj;\n                    }\n                    : () => {\n                        wasm.init(initParam);\n                        return obj;\n                    },\n                update: (data) => { wasm.update(data); return obj; },\n                digest: (outputType) => wasm.digest(outputType, digestParam),\n                save: () => wasm.save(),\n                load: (data) => { wasm.load(data); return obj; },\n                blockSize: 64,\n                digestSize: outputSize,\n            };\n            return obj;\n        });\n    }\n\n    var name$f = \"crc32\";\n    var data$f = \"AGFzbQEAAAABEQRgAAF/YAF/AGAAAGACf38AAwgHAAEBAQIAAwUEAQECAgYOAn8BQZDJBQt/AEGACAsHcAgGbWVtb3J5AgAOSGFzaF9HZXRCdWZmZXIAAAlIYXNoX0luaXQAAgtIYXNoX1VwZGF0ZQADCkhhc2hfRmluYWwABA1IYXNoX0dldFN0YXRlAAUOSGFzaF9DYWxjdWxhdGUABgpTVEFURV9TSVpFAwEKkggHBQBBgAkLwwMBA39BgIkBIQFBACECA0AgAUEAQQBBAEEAQQBBAEEAQQAgAkEBcWsgAHEgAkEBdnMiA0EBcWsgAHEgA0EBdnMiA0EBcWsgAHEgA0EBdnMiA0EBcWsgAHEgA0EBdnMiA0EBcWsgAHEgA0EBdnMiA0EBcWsgAHEgA0EBdnMiA0EBcWsgAHEgA0EBdnMiA0EBcWsgAHEgA0EBdnM2AgAgAUEEaiEBIAJBAWoiAkGAAkcNAAtBACEAA0AgAEGEkQFqIABBhIkBaigCACICQf8BcUECdEGAiQFqKAIAIAJBCHZzIgI2AgAgAEGEmQFqIAJB/wFxQQJ0QYCJAWooAgAgAkEIdnMiAjYCACAAQYShAWogAkH/AXFBAnRBgIkBaigCACACQQh2cyICNgIAIABBhKkBaiACQf8BcUECdEGAiQFqKAIAIAJBCHZzIgI2AgAgAEGEsQFqIAJB/wFxQQJ0QYCJAWooAgAgAkEIdnMiAjYCACAAQYS5AWogAkH/AXFBAnRBgIkBaigCACACQQh2cyICNgIAIABBhMEBaiACQf8BcUECdEGAiQFqKAIAIAJBCHZzNgIAIABBBGoiAEH8B0cNAAsLJwACQEEAKAKAyQEgAEYNACAAEAFBACAANgKAyQELQQBBADYChMkBC4gDAQN/QQAoAoTJAUF/cyEBQYAJIQICQCAAQQhJDQBBgAkhAgNAIAJBBGooAgAiA0EOdkH8B3FBgJEBaigCACADQRZ2QfwHcUGAiQFqKAIAcyADQQZ2QfwHcUGAmQFqKAIAcyADQf8BcUECdEGAoQFqKAIAcyACKAIAIAFzIgFBFnZB/AdxQYCpAWooAgBzIAFBDnZB/AdxQYCxAWooAgBzIAFBBnZB/AdxQYC5AWooAgBzIAFB/wFxQQJ0QYDBAWooAgBzIQEgAkEIaiECIABBeGoiAEEHSw0ACwsCQCAARQ0AAkACQCAAQQFxDQAgACEDDAELIAFB/wFxIAItAABzQQJ0QYCJAWooAgAgAUEIdnMhASACQQFqIQIgAEF/aiEDCyAAQQFGDQADQCABQf8BcSACLQAAc0ECdEGAiQFqKAIAIAFBCHZzIgFB/wFxIAJBAWotAABzQQJ0QYCJAWooAgAgAUEIdnMhASACQQJqIQIgA0F+aiIDDQALC0EAIAFBf3M2AoTJAQsyAQF/QQBBACgChMkBIgBBGHQgAEGA/gNxQQh0ciAAQQh2QYD+A3EgAEEYdnJyNgKACQsGAEGEyQELWQACQEEAKAKAyQEgAUYNACABEAFBACABNgKAyQELQQBBADYChMkBIAAQA0EAQQAoAoTJASIBQRh0IAFBgP4DcUEIdHIgAUEIdkGA/gNxIAFBGHZycjYCgAkLCwsBAEGACAsEBAAAAA==\";\n    var hash$f = \"d2eba587\";\n    var wasmJson$f = {\n    \tname: name$f,\n    \tdata: data$f,\n    \thash: hash$f\n    };\n\n    const mutex$h = new Mutex();\n    let wasmCache$h = null;\n    /**\n     * Calculates CRC-32 hash\n     * @param data Input data (string, Buffer or TypedArray)\n     * @returns Computed hash as a hexadecimal string\n     */\n    function crc32(data) {\n        if (wasmCache$h === null) {\n            return lockedCreate(mutex$h, wasmJson$f, 4)\n                .then((wasm) => {\n                wasmCache$h = wasm;\n                return wasmCache$h.calculate(data, 0xEDB88320);\n            });\n        }\n        try {\n            const hash = wasmCache$h.calculate(data, 0xEDB88320);\n            return Promise.resolve(hash);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    /**\n     * Creates a new CRC-32 hash instance\n     */\n    function createCRC32() {\n        return WASMInterface(wasmJson$f, 4).then((wasm) => {\n            wasm.init(0xEDB88320);\n            const obj = {\n                init: () => { wasm.init(0xEDB88320); return obj; },\n                update: (data) => { wasm.update(data); return obj; },\n                digest: (outputType) => wasm.digest(outputType),\n                save: () => wasm.save(),\n                load: (data) => { wasm.load(data); return obj; },\n                blockSize: 4,\n                digestSize: 4,\n            };\n            return obj;\n        });\n    }\n\n    const mutex$g = new Mutex();\n    let wasmCache$g = null;\n    /**\n     * Calculates CRC-32C hash\n     * @param data Input data (string, Buffer or TypedArray)\n     * @returns Computed hash as a hexadecimal string\n     */\n    function crc32c(data) {\n        if (wasmCache$g === null) {\n            return lockedCreate(mutex$g, wasmJson$f, 4)\n                .then((wasm) => {\n                wasmCache$g = wasm;\n                return wasmCache$g.calculate(data, 0x82F63B78);\n            });\n        }\n        try {\n            const hash = wasmCache$g.calculate(data, 0x82F63B78);\n            return Promise.resolve(hash);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    /**\n     * Creates a new CRC-32C hash instance\n     */\n    function createCRC32C() {\n        return WASMInterface(wasmJson$f, 4).then((wasm) => {\n            wasm.init(0x82F63B78);\n            const obj = {\n                init: () => { wasm.init(0x82F63B78); return obj; },\n                update: (data) => { wasm.update(data); return obj; },\n                digest: (outputType) => wasm.digest(outputType),\n                save: () => wasm.save(),\n                load: (data) => { wasm.load(data); return obj; },\n                blockSize: 4,\n                digestSize: 4,\n            };\n            return obj;\n        });\n    }\n\n    var name$e = \"md4\";\n    var data$e = \"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\";\n    var hash$e = \"74909c24\";\n    var wasmJson$e = {\n    \tname: name$e,\n    \tdata: data$e,\n    \thash: hash$e\n    };\n\n    const mutex$f = new Mutex();\n    let wasmCache$f = null;\n    /**\n     * Calculates MD4 hash\n     * @param data Input data (string, Buffer or TypedArray)\n     * @returns Computed hash as a hexadecimal string\n     */\n    function md4(data) {\n        if (wasmCache$f === null) {\n            return lockedCreate(mutex$f, wasmJson$e, 16)\n                .then((wasm) => {\n                wasmCache$f = wasm;\n                return wasmCache$f.calculate(data);\n            });\n        }\n        try {\n            const hash = wasmCache$f.calculate(data);\n            return Promise.resolve(hash);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    /**\n     * Creates a new MD4 hash instance\n     */\n    function createMD4() {\n        return WASMInterface(wasmJson$e, 16).then((wasm) => {\n            wasm.init();\n            const obj = {\n                init: () => { wasm.init(); return obj; },\n                update: (data) => { wasm.update(data); return obj; },\n                digest: (outputType) => wasm.digest(outputType),\n                save: () => wasm.save(),\n                load: (data) => { wasm.load(data); return obj; },\n                blockSize: 64,\n                digestSize: 16,\n            };\n            return obj;\n        });\n    }\n\n    var name$d = \"md5\";\n    var data$d = \"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\";\n    var hash$d = \"42fa4d29\";\n    var wasmJson$d = {\n    \tname: name$d,\n    \tdata: data$d,\n    \thash: hash$d\n    };\n\n    const mutex$e = new Mutex();\n    let wasmCache$e = null;\n    /**\n     * Calculates MD5 hash\n     * @param data Input data (string, Buffer or TypedArray)\n     * @returns Computed hash as a hexadecimal string\n     */\n    function md5(data) {\n        if (wasmCache$e === null) {\n            return lockedCreate(mutex$e, wasmJson$d, 16)\n                .then((wasm) => {\n                wasmCache$e = wasm;\n                return wasmCache$e.calculate(data);\n            });\n        }\n        try {\n            const hash = wasmCache$e.calculate(data);\n            return Promise.resolve(hash);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    /**\n     * Creates a new MD5 hash instance\n     */\n    function createMD5() {\n        return WASMInterface(wasmJson$d, 16).then((wasm) => {\n            wasm.init();\n            const obj = {\n                init: () => { wasm.init(); return obj; },\n                update: (data) => { wasm.update(data); return obj; },\n                digest: (outputType) => wasm.digest(outputType),\n                save: () => wasm.save(),\n                load: (data) => { wasm.load(data); return obj; },\n                blockSize: 64,\n                digestSize: 16,\n            };\n            return obj;\n        });\n    }\n\n    var name$c = \"sha1\";\n    var data$c = \"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\";\n    var hash$c = \"6b530c24\";\n    var wasmJson$c = {\n    \tname: name$c,\n    \tdata: data$c,\n    \thash: hash$c\n    };\n\n    const mutex$d = new Mutex();\n    let wasmCache$d = null;\n    /**\n     * Calculates SHA-1 hash\n     * @param data Input data (string, Buffer or TypedArray)\n     * @returns Computed hash as a hexadecimal string\n     */\n    function sha1(data) {\n        if (wasmCache$d === null) {\n            return lockedCreate(mutex$d, wasmJson$c, 20)\n                .then((wasm) => {\n                wasmCache$d = wasm;\n                return wasmCache$d.calculate(data);\n            });\n        }\n        try {\n            const hash = wasmCache$d.calculate(data);\n            return Promise.resolve(hash);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    /**\n     * Creates a new SHA-1 hash instance\n     */\n    function createSHA1() {\n        return WASMInterface(wasmJson$c, 20).then((wasm) => {\n            wasm.init();\n            const obj = {\n                init: () => { wasm.init(); return obj; },\n                update: (data) => { wasm.update(data); return obj; },\n                digest: (outputType) => wasm.digest(outputType),\n                save: () => wasm.save(),\n                load: (data) => { wasm.load(data); return obj; },\n                blockSize: 64,\n                digestSize: 20,\n            };\n            return obj;\n        });\n    }\n\n    var name$b = \"sha3\";\n    var data$b = \"AGFzbQEAAAABFARgAAF/YAF/AGACf38AYAN/f38AAwgHAAEBAgEAAwUEAQECAgYOAn8BQZCNBQt/AEGACAsHcAgGbWVtb3J5AgAOSGFzaF9HZXRCdWZmZXIAAAlIYXNoX0luaXQAAQtIYXNoX1VwZGF0ZQACCkhhc2hfRmluYWwABA1IYXNoX0dldFN0YXRlAAUOSGFzaF9DYWxjdWxhdGUABgpTVEFURV9TSVpFAwEKqBwHBQBBgAoL1wMAQQBCADcDgI0BQQBCADcD+IwBQQBCADcD8IwBQQBCADcD6IwBQQBCADcD4IwBQQBCADcD2IwBQQBCADcD0IwBQQBCADcDyIwBQQBCADcDwIwBQQBCADcDuIwBQQBCADcDsIwBQQBCADcDqIwBQQBCADcDoIwBQQBCADcDmIwBQQBCADcDkIwBQQBCADcDiIwBQQBCADcDgIwBQQBCADcD+IsBQQBCADcD8IsBQQBCADcD6IsBQQBCADcD4IsBQQBCADcD2IsBQQBCADcD0IsBQQBCADcDyIsBQQBCADcDwIsBQQBCADcDuIsBQQBCADcDsIsBQQBCADcDqIsBQQBCADcDoIsBQQBCADcDmIsBQQBCADcDkIsBQQBCADcDiIsBQQBCADcDgIsBQQBCADcD+IoBQQBCADcD8IoBQQBCADcD6IoBQQBCADcD4IoBQQBCADcD2IoBQQBCADcD0IoBQQBCADcDyIoBQQBCADcDwIoBQQBCADcDuIoBQQBCADcDsIoBQQBCADcDqIoBQQBCADcDoIoBQQBCADcDmIoBQQBCADcDkIoBQQBCADcDiIoBQQBCADcDgIoBQQBBwAwgAEEBdGtBA3Y2AoyNAUEAQQA2AoiNAQuMAwEIfwJAQQAoAoiNASIBQQBIDQBBACABIABqQQAoAoyNASICcDYCiI0BAkACQCABDQBBgAohAwwBCwJAIAIgAWsiBCAAIAQgAEkbIgNFDQAgA0EDcSEFQQAhBgJAIANBBEkNACABQYCKAWohByADQXxxIQhBACEGA0AgByAGaiIDQcgBaiAGQYAKai0AADoAACADQckBaiAGQYEKai0AADoAACADQcoBaiAGQYIKai0AADoAACADQcsBaiAGQYMKai0AADoAACAIIAZBBGoiBkcNAAsLIAVFDQAgAUHIiwFqIQMDQCADIAZqIAZBgApqLQAAOgAAIAZBAWohBiAFQX9qIgUNAAsLIAQgAEsNAUHIiwEgAhADIAAgBGshACAEQYAKaiEDCwJAIAAgAkkNAANAIAMgAhADIAMgAmohAyAAIAJrIgAgAk8NAAsLIABFDQBBACECQcgBIQYDQCAGQYCKAWogAyAGakG4fmotAAA6AAAgBkEBaiEGIAAgAkEBaiICQf8BcUsNAAsLC+QLAS1+IAApA0AhAkEAKQPAigEhAyAAKQM4IQRBACkDuIoBIQUgACkDMCEGQQApA7CKASEHIAApAyghCEEAKQOoigEhCSAAKQMgIQpBACkDoIoBIQsgACkDGCEMQQApA5iKASENIAApAxAhDkEAKQOQigEhDyAAKQMIIRBBACkDiIoBIREgACkDACESQQApA4CKASETQQApA8iKASEUAkACQCABQcgASw0AQQApA9CKASEVQQApA+CKASEWQQApA9iKASEXDAELQQApA+CKASAAKQNghSEWQQApA9iKASAAKQNYhSEXQQApA9CKASAAKQNQhSEVIBQgACkDSIUhFCABQekASQ0AQQBBACkD6IoBIAApA2iFNwPoigFBAEEAKQPwigEgACkDcIU3A/CKAUEAQQApA/iKASAAKQN4hTcD+IoBQQBBACkDgIsBIAApA4ABhTcDgIsBIAFBiQFJDQBBAEEAKQOIiwEgACkDiAGFNwOIiwELIAMgAoUhGCAFIASFIRkgByAGhSEHIAkgCIUhCCALIAqFIRogDSAMhSEJIA8gDoUhCiARIBCFIQsgEyAShSEMQQApA7iLASESQQApA5CLASETQQApA+iKASEbQQApA6CLASEcQQApA/iKASENQQApA7CLASEdQQApA4iLASEOQQApA8CLASEPQQApA5iLASEeQQApA/CKASEQQQApA6iLASERQQApA4CLASEfQcB+IQADQCAaIAcgC4UgF4UgH4UgEYVCAYmFIBSFIBCFIB6FIA+FIQIgDCAZIAqFIBaFIA6FIB2FQgGJhSAIhSAVhSANhSAchSIDIAeFISAgCSAIIAyFIBWFIA2FIByFQgGJhSAYhSAbhSAThSAShSIEIA+FISEgGCAKIBQgGoUgEIUgHoUgD4VCAYmFIBmFIBaFIA6FIB2FIgWFQjeJIiIgCyAYIAmFIBuFIBOFIBKFQgGJhSAHhSAXhSAfhSARhSIGIAqFQj6JIiNCf4WDIAMgEYVCAokiJIUhDyANIAKFQimJIiUgBCAQhUIniSImQn+FgyAihSERIBIgBYVCOIkiEiAGIA6FQg+JIidCf4WDIAMgF4VCCokiKIUhDiAEIBqFQhuJIikgKCAIIAKFQiSJIipCf4WDhSENIAYgGYVCBokiKyADIAuFQgGJIixCf4WDIBwgAoVCEokiLYUhECArIAQgHoVCCIkiLiAbIAWFQhmJIhtCf4WDhSEXIAYgHYVCPYkiGSAEIBSFQhSJIgQgCSAFhUIciSIIQn+Fg4UhFCAIIBlCf4WDIAMgH4VCLYkiA4UhGCAZIANCf4WDIBUgAoVCA4kiCYUhGSAEIAMgCUJ/hYOFIQcgCSAEQn+FgyAIhSEIIAwgAoUiAiAhQg6JIgNCf4WDIBMgBYVCFYkiBIUhCSAGIBaFQiuJIgUgAyAEQn+Fg4UhCiAEIAVCf4WDICBCLIkiBIUhCyAAQdAJaikDACAFIARCf4WDhSAChSEMICcgKEJ/hYMgKoUiBSEfIAMgBCACQn+Fg4UiAiEaICogKUJ/hYMgEoUiAyEeIC0gLkJ/hYMgG4UiBCEWICYgJCAlQn+Fg4UiBiEdIBsgK0J/hYMgLIUiKCEVICMgJiAiQn+Fg4UiIiEcIC4gLCAtQn+Fg4UiJiEbICcgKSASQn+Fg4UiJyETICMgJEJ/hYMgJYUiIyESIABBCGoiAA0AC0EAIBE3A6iLAUEAIAU3A4CLAUEAIBc3A9iKAUEAIAc3A7CKAUEAIAs3A4iKAUEAIA83A8CLAUEAIAM3A5iLAUEAIBA3A/CKAUEAIBQ3A8iKAUEAIAI3A6CKAUEAIAY3A7CLAUEAIA43A4iLAUEAIAQ3A+CKAUEAIBk3A7iKAUEAIAo3A5CKAUEAICI3A6CLAUEAIA03A/iKAUEAICg3A9CKAUEAIAg3A6iKAUEAIAw3A4CKAUEAICM3A7iLAUEAICc3A5CLAUEAICY3A+iKAUEAIBg3A8CKAUEAIAk3A5iKAQv4AgEFf0HkAEEAKAKMjQEiAUEBdmshAgJAQQAoAoiNASIDQQBIDQAgASEEAkAgASADRg0AIANByIsBaiEFQQAhAwNAIAUgA2pBADoAACADQQFqIgMgAUEAKAKIjQEiBGtJDQALCyAEQciLAWoiAyADLQAAIAByOgAAIAFBx4sBaiIDIAMtAABBgAFyOgAAQciLASABEANBAEGAgICAeDYCiI0BCwJAIAJBBEkNACACQQJ2IgNBA3EhBUEAIQQCQCADQX9qQQNJDQAgA0H8////A3EhAUEAIQNBACEEA0AgA0GACmogA0GAigFqKAIANgIAIANBhApqIANBhIoBaigCADYCACADQYgKaiADQYiKAWooAgA2AgAgA0GMCmogA0GMigFqKAIANgIAIANBEGohAyABIARBBGoiBEcNAAsLIAVFDQAgBUECdCEBIARBAnQhAwNAIANBgApqIANBgIoBaigCADYCACADQQRqIQMgAUF8aiIBDQALCwsGAEGAigEL0QYBA39BAEIANwOAjQFBAEIANwP4jAFBAEIANwPwjAFBAEIANwPojAFBAEIANwPgjAFBAEIANwPYjAFBAEIANwPQjAFBAEIANwPIjAFBAEIANwPAjAFBAEIANwO4jAFBAEIANwOwjAFBAEIANwOojAFBAEIANwOgjAFBAEIANwOYjAFBAEIANwOQjAFBAEIANwOIjAFBAEIANwOAjAFBAEIANwP4iwFBAEIANwPwiwFBAEIANwPoiwFBAEIANwPgiwFBAEIANwPYiwFBAEIANwPQiwFBAEIANwPIiwFBAEIANwPAiwFBAEIANwO4iwFBAEIANwOwiwFBAEIANwOoiwFBAEIANwOgiwFBAEIANwOYiwFBAEIANwOQiwFBAEIANwOIiwFBAEIANwOAiwFBAEIANwP4igFBAEIANwPwigFBAEIANwPoigFBAEIANwPgigFBAEIANwPYigFBAEIANwPQigFBAEIANwPIigFBAEIANwPAigFBAEIANwO4igFBAEIANwOwigFBAEIANwOoigFBAEIANwOgigFBAEIANwOYigFBAEIANwOQigFBAEIANwOIigFBAEIANwOAigFBAEHADCABQQF0a0EDdjYCjI0BQQBBADYCiI0BIAAQAkHkAEEAKAKMjQEiAEEBdmshAwJAQQAoAoiNASIBQQBIDQAgACEEAkAgACABRg0AIAFByIsBaiEFQQAhAQNAIAUgAWpBADoAACABQQFqIgEgAEEAKAKIjQEiBGtJDQALCyAEQciLAWoiASABLQAAIAJyOgAAIABBx4sBaiIBIAEtAABBgAFyOgAAQciLASAAEANBAEGAgICAeDYCiI0BCwJAIANBBEkNACADQQJ2IgFBA3EhBUEAIQQCQCABQX9qQQNJDQAgAUH8////A3EhAEEAIQFBACEEA0AgAUGACmogAUGAigFqKAIANgIAIAFBhApqIAFBhIoBaigCADYCACABQYgKaiABQYiKAWooAgA2AgAgAUGMCmogAUGMigFqKAIANgIAIAFBEGohASAAIARBBGoiBEcNAAsLIAVFDQAgBUECdCEAIARBAnQhAQNAIAFBgApqIAFBgIoBaigCADYCACABQQRqIQEgAEF8aiIADQALCwsL2AEBAEGACAvQAZABAAAAAAAAAAAAAAAAAAABAAAAAAAAAIKAAAAAAAAAioAAAAAAAIAAgACAAAAAgIuAAAAAAAAAAQAAgAAAAACBgACAAAAAgAmAAAAAAACAigAAAAAAAACIAAAAAAAAAAmAAIAAAAAACgAAgAAAAACLgACAAAAAAIsAAAAAAACAiYAAAAAAAIADgAAAAAAAgAKAAAAAAACAgAAAAAAAAIAKgAAAAAAAAAoAAIAAAACAgYAAgAAAAICAgAAAAAAAgAEAAIAAAAAACIAAgAAAAIA=\";\n    var hash$b = \"f2f6f5b2\";\n    var wasmJson$b = {\n    \tname: name$b,\n    \tdata: data$b,\n    \thash: hash$b\n    };\n\n    const mutex$c = new Mutex();\n    let wasmCache$c = null;\n    function validateBits$1(bits) {\n        if (![224, 256, 384, 512].includes(bits)) {\n            return new Error('Invalid variant! Valid values: 224, 256, 384, 512');\n        }\n        return null;\n    }\n    /**\n     * Calculates SHA-3 hash\n     * @param data Input data (string, Buffer or TypedArray)\n     * @param bits Number of output bits. Valid values: 224, 256, 384, 512\n     * @returns Computed hash as a hexadecimal string\n     */\n    function sha3(data, bits = 512) {\n        if (validateBits$1(bits)) {\n            return Promise.reject(validateBits$1(bits));\n        }\n        const hashLength = bits / 8;\n        if (wasmCache$c === null || wasmCache$c.hashLength !== hashLength) {\n            return lockedCreate(mutex$c, wasmJson$b, hashLength)\n                .then((wasm) => {\n                wasmCache$c = wasm;\n                return wasmCache$c.calculate(data, bits, 0x06);\n            });\n        }\n        try {\n            const hash = wasmCache$c.calculate(data, bits, 0x06);\n            return Promise.resolve(hash);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    /**\n     * Creates a new SHA-3 hash instance\n     * @param bits Number of output bits. Valid values: 224, 256, 384, 512\n     */\n    function createSHA3(bits = 512) {\n        if (validateBits$1(bits)) {\n            return Promise.reject(validateBits$1(bits));\n        }\n        const outputSize = bits / 8;\n        return WASMInterface(wasmJson$b, outputSize).then((wasm) => {\n            wasm.init(bits);\n            const obj = {\n                init: () => { wasm.init(bits); return obj; },\n                update: (data) => { wasm.update(data); return obj; },\n                digest: (outputType) => wasm.digest(outputType, 0x06),\n                save: () => wasm.save(),\n                load: (data) => { wasm.load(data); return obj; },\n                blockSize: 200 - 2 * outputSize,\n                digestSize: outputSize,\n            };\n            return obj;\n        });\n    }\n\n    const mutex$b = new Mutex();\n    let wasmCache$b = null;\n    function validateBits(bits) {\n        if (![224, 256, 384, 512].includes(bits)) {\n            return new Error('Invalid variant! Valid values: 224, 256, 384, 512');\n        }\n        return null;\n    }\n    /**\n     * Calculates Keccak hash\n     * @param data Input data (string, Buffer or TypedArray)\n     * @param bits Number of output bits. Valid values: 224, 256, 384, 512\n     * @returns Computed hash as a hexadecimal string\n     */\n    function keccak(data, bits = 512) {\n        if (validateBits(bits)) {\n            return Promise.reject(validateBits(bits));\n        }\n        const hashLength = bits / 8;\n        if (wasmCache$b === null || wasmCache$b.hashLength !== hashLength) {\n            return lockedCreate(mutex$b, wasmJson$b, hashLength)\n                .then((wasm) => {\n                wasmCache$b = wasm;\n                return wasmCache$b.calculate(data, bits, 0x01);\n            });\n        }\n        try {\n            const hash = wasmCache$b.calculate(data, bits, 0x01);\n            return Promise.resolve(hash);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    /**\n     * Creates a new Keccak hash instance\n     * @param bits Number of output bits. Valid values: 224, 256, 384, 512\n     */\n    function createKeccak(bits = 512) {\n        if (validateBits(bits)) {\n            return Promise.reject(validateBits(bits));\n        }\n        const outputSize = bits / 8;\n        return WASMInterface(wasmJson$b, outputSize).then((wasm) => {\n            wasm.init(bits);\n            const obj = {\n                init: () => { wasm.init(bits); return obj; },\n                update: (data) => { wasm.update(data); return obj; },\n                digest: (outputType) => wasm.digest(outputType, 0x01),\n                save: () => wasm.save(),\n                load: (data) => { wasm.load(data); return obj; },\n                blockSize: 200 - 2 * outputSize,\n                digestSize: outputSize,\n            };\n            return obj;\n        });\n    }\n\n    var name$a = \"sha256\";\n    var data$a = \"\";\n    var hash$a = \"64f06674\";\n    var wasmJson$a = {\n    \tname: name$a,\n    \tdata: data$a,\n    \thash: hash$a\n    };\n\n    const mutex$a = new Mutex();\n    let wasmCache$a = null;\n    /**\n     * Calculates SHA-2 (SHA-224) hash\n     * @param data Input data (string, Buffer or TypedArray)\n     * @returns Computed hash as a hexadecimal string\n     */\n    function sha224(data) {\n        if (wasmCache$a === null) {\n            return lockedCreate(mutex$a, wasmJson$a, 28)\n                .then((wasm) => {\n                wasmCache$a = wasm;\n                return wasmCache$a.calculate(data, 224);\n            });\n        }\n        try {\n            const hash = wasmCache$a.calculate(data, 224);\n            return Promise.resolve(hash);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    /**\n     * Creates a new SHA-2 (SHA-224) hash instance\n     */\n    function createSHA224() {\n        return WASMInterface(wasmJson$a, 28).then((wasm) => {\n            wasm.init(224);\n            const obj = {\n                init: () => { wasm.init(224); return obj; },\n                update: (data) => { wasm.update(data); return obj; },\n                digest: (outputType) => wasm.digest(outputType),\n                save: () => wasm.save(),\n                load: (data) => { wasm.load(data); return obj; },\n                blockSize: 64,\n                digestSize: 28,\n            };\n            return obj;\n        });\n    }\n\n    const mutex$9 = new Mutex();\n    let wasmCache$9 = null;\n    /**\n     * Calculates SHA-2 (SHA-256) hash\n     * @param data Input data (string, Buffer or TypedArray)\n     * @returns Computed hash as a hexadecimal string\n     */\n    function sha256(data) {\n        if (wasmCache$9 === null) {\n            return lockedCreate(mutex$9, wasmJson$a, 32)\n                .then((wasm) => {\n                wasmCache$9 = wasm;\n                return wasmCache$9.calculate(data, 256);\n            });\n        }\n        try {\n            const hash = wasmCache$9.calculate(data, 256);\n            return Promise.resolve(hash);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    /**\n     * Creates a new SHA-2 (SHA-256) hash instance\n     */\n    function createSHA256() {\n        return WASMInterface(wasmJson$a, 32).then((wasm) => {\n            wasm.init(256);\n            const obj = {\n                init: () => { wasm.init(256); return obj; },\n                update: (data) => { wasm.update(data); return obj; },\n                digest: (outputType) => wasm.digest(outputType),\n                save: () => wasm.save(),\n                load: (data) => { wasm.load(data); return obj; },\n                blockSize: 64,\n                digestSize: 32,\n            };\n            return obj;\n        });\n    }\n\n    var name$9 = \"sha512\";\n    var data$9 = \"\";\n    var hash$9 = \"cdd57f6a\";\n    var wasmJson$9 = {\n    \tname: name$9,\n    \tdata: data$9,\n    \thash: hash$9\n    };\n\n    const mutex$8 = new Mutex();\n    let wasmCache$8 = null;\n    /**\n     * Calculates SHA-2 (SHA-384) hash\n     * @param data Input data (string, Buffer or TypedArray)\n     * @returns Computed hash as a hexadecimal string\n     */\n    function sha384(data) {\n        if (wasmCache$8 === null) {\n            return lockedCreate(mutex$8, wasmJson$9, 48)\n                .then((wasm) => {\n                wasmCache$8 = wasm;\n                return wasmCache$8.calculate(data, 384);\n            });\n        }\n        try {\n            const hash = wasmCache$8.calculate(data, 384);\n            return Promise.resolve(hash);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    /**\n     * Creates a new SHA-2 (SHA-384) hash instance\n     */\n    function createSHA384() {\n        return WASMInterface(wasmJson$9, 48).then((wasm) => {\n            wasm.init(384);\n            const obj = {\n                init: () => { wasm.init(384); return obj; },\n                update: (data) => { wasm.update(data); return obj; },\n                digest: (outputType) => wasm.digest(outputType),\n                save: () => wasm.save(),\n                load: (data) => { wasm.load(data); return obj; },\n                blockSize: 128,\n                digestSize: 48,\n            };\n            return obj;\n        });\n    }\n\n    const mutex$7 = new Mutex();\n    let wasmCache$7 = null;\n    /**\n     * Calculates SHA-2 (SHA-512) hash\n     * @param data Input data (string, Buffer or TypedArray)\n     * @returns Computed hash as a hexadecimal string\n     */\n    function sha512(data) {\n        if (wasmCache$7 === null) {\n            return lockedCreate(mutex$7, wasmJson$9, 64)\n                .then((wasm) => {\n                wasmCache$7 = wasm;\n                return wasmCache$7.calculate(data, 512);\n            });\n        }\n        try {\n            const hash = wasmCache$7.calculate(data, 512);\n            return Promise.resolve(hash);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    /**\n     * Creates a new SHA-2 (SHA-512) hash instance\n     */\n    function createSHA512() {\n        return WASMInterface(wasmJson$9, 64).then((wasm) => {\n            wasm.init(512);\n            const obj = {\n                init: () => { wasm.init(512); return obj; },\n                update: (data) => { wasm.update(data); return obj; },\n                digest: (outputType) => wasm.digest(outputType),\n                save: () => wasm.save(),\n                load: (data) => { wasm.load(data); return obj; },\n                blockSize: 128,\n                digestSize: 64,\n            };\n            return obj;\n        });\n    }\n\n    var name$8 = \"xxhash32\";\n    var data$8 = \"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\";\n    var hash$8 = \"9e3a00cd\";\n    var wasmJson$8 = {\n    \tname: name$8,\n    \tdata: data$8,\n    \thash: hash$8\n    };\n\n    const mutex$6 = new Mutex();\n    let wasmCache$6 = null;\n    function validateSeed$3(seed) {\n        if (!Number.isInteger(seed) || seed < 0 || seed > 0xFFFFFFFF) {\n            return new Error('Seed must be a valid 32-bit long unsigned integer.');\n        }\n        return null;\n    }\n    /**\n     * Calculates xxHash32 hash\n     * @param data Input data (string, Buffer or TypedArray)\n     * @param seed Number used to initialize the internal state of the algorithm (defaults to 0)\n     * @returns Computed hash as a hexadecimal string\n     */\n    function xxhash32(data, seed = 0) {\n        if (validateSeed$3(seed)) {\n            return Promise.reject(validateSeed$3(seed));\n        }\n        if (wasmCache$6 === null) {\n            return lockedCreate(mutex$6, wasmJson$8, 4)\n                .then((wasm) => {\n                wasmCache$6 = wasm;\n                return wasmCache$6.calculate(data, seed);\n            });\n        }\n        try {\n            const hash = wasmCache$6.calculate(data, seed);\n            return Promise.resolve(hash);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    /**\n     * Creates a new xxHash32 hash instance\n     * @param data Input data (string, Buffer or TypedArray)\n     * @param seed Number used to initialize the internal state of the algorithm (defaults to 0)\n     */\n    function createXXHash32(seed = 0) {\n        if (validateSeed$3(seed)) {\n            return Promise.reject(validateSeed$3(seed));\n        }\n        return WASMInterface(wasmJson$8, 4).then((wasm) => {\n            wasm.init(seed);\n            const obj = {\n                init: () => { wasm.init(seed); return obj; },\n                update: (data) => { wasm.update(data); return obj; },\n                digest: (outputType) => wasm.digest(outputType),\n                save: () => wasm.save(),\n                load: (data) => { wasm.load(data); return obj; },\n                blockSize: 16,\n                digestSize: 4,\n            };\n            return obj;\n        });\n    }\n\n    var name$7 = \"xxhash64\";\n    var data$7 = \"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\";\n    var hash$7 = \"dc61b4e7\";\n    var wasmJson$7 = {\n    \tname: name$7,\n    \tdata: data$7,\n    \thash: hash$7\n    };\n\n    const mutex$5 = new Mutex();\n    let wasmCache$5 = null;\n    const seedBuffer$2 = new ArrayBuffer(8);\n    function validateSeed$2(seed) {\n        if (!Number.isInteger(seed) || seed < 0 || seed > 0xFFFFFFFF) {\n            return new Error('Seed must be given as two valid 32-bit long unsigned integers (lo + high).');\n        }\n        return null;\n    }\n    function writeSeed$2(arr, low, high) {\n        // write in little-endian format\n        const buffer = new DataView(arr);\n        buffer.setUint32(0, low, true);\n        buffer.setUint32(4, high, true);\n    }\n    /**\n     * Calculates xxHash64 hash\n     * @param data Input data (string, Buffer or TypedArray)\n     * @param seedLow Lower 32 bits of the number used to\n     *  initialize the internal state of the algorithm (defaults to 0)\n     * @param seedHigh Higher 32 bits of the number used to\n     *  initialize the internal state of the algorithm (defaults to 0)\n     * @returns Computed hash as a hexadecimal string\n     */\n    function xxhash64(data, seedLow = 0, seedHigh = 0) {\n        if (validateSeed$2(seedLow)) {\n            return Promise.reject(validateSeed$2(seedLow));\n        }\n        if (validateSeed$2(seedHigh)) {\n            return Promise.reject(validateSeed$2(seedHigh));\n        }\n        if (wasmCache$5 === null) {\n            return lockedCreate(mutex$5, wasmJson$7, 8)\n                .then((wasm) => {\n                wasmCache$5 = wasm;\n                writeSeed$2(seedBuffer$2, seedLow, seedHigh);\n                wasmCache$5.writeMemory(new Uint8Array(seedBuffer$2));\n                return wasmCache$5.calculate(data);\n            });\n        }\n        try {\n            writeSeed$2(seedBuffer$2, seedLow, seedHigh);\n            wasmCache$5.writeMemory(new Uint8Array(seedBuffer$2));\n            const hash = wasmCache$5.calculate(data);\n            return Promise.resolve(hash);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    /**\n     * Creates a new xxHash64 hash instance\n     * @param seedLow Lower 32 bits of the number used to\n     *  initialize the internal state of the algorithm (defaults to 0)\n     * @param seedHigh Higher 32 bits of the number used to\n     *  initialize the internal state of the algorithm (defaults to 0)\n     */\n    function createXXHash64(seedLow = 0, seedHigh = 0) {\n        if (validateSeed$2(seedLow)) {\n            return Promise.reject(validateSeed$2(seedLow));\n        }\n        if (validateSeed$2(seedHigh)) {\n            return Promise.reject(validateSeed$2(seedHigh));\n        }\n        return WASMInterface(wasmJson$7, 8).then((wasm) => {\n            const instanceBuffer = new ArrayBuffer(8);\n            writeSeed$2(instanceBuffer, seedLow, seedHigh);\n            wasm.writeMemory(new Uint8Array(instanceBuffer));\n            wasm.init();\n            const obj = {\n                init: () => {\n                    wasm.writeMemory(new Uint8Array(instanceBuffer));\n                    wasm.init();\n                    return obj;\n                },\n                update: (data) => { wasm.update(data); return obj; },\n                digest: (outputType) => wasm.digest(outputType),\n                save: () => wasm.save(),\n                load: (data) => { wasm.load(data); return obj; },\n                blockSize: 32,\n                digestSize: 8,\n            };\n            return obj;\n        });\n    }\n\n    var name$6 = \"xxhash3\";\n    var data$6 = \"\";\n    var hash$6 = \"0dca92d1\";\n    var wasmJson$6 = {\n    \tname: name$6,\n    \tdata: data$6,\n    \thash: hash$6\n    };\n\n    const mutex$4 = new Mutex();\n    let wasmCache$4 = null;\n    const seedBuffer$1 = new ArrayBuffer(8);\n    function validateSeed$1(seed) {\n        if (!Number.isInteger(seed) || seed < 0 || seed > 0xFFFFFFFF) {\n            return new Error('Seed must be given as two valid 32-bit long unsigned integers (lo + high).');\n        }\n        return null;\n    }\n    function writeSeed$1(arr, low, high) {\n        // write in little-endian format\n        const buffer = new DataView(arr);\n        buffer.setUint32(0, low, true);\n        buffer.setUint32(4, high, true);\n    }\n    /**\n     * Calculates xxHash3 hash\n     * @param data Input data (string, Buffer or TypedArray)\n     * @param seedLow Lower 32 bits of the number used to\n     *  initialize the internal state of the algorithm (defaults to 0)\n     * @param seedHigh Higher 32 bits of the number used to\n     *  initialize the internal state of the algorithm (defaults to 0)\n     * @returns Computed hash as a hexadecimal string\n     */\n    function xxhash3(data, seedLow = 0, seedHigh = 0) {\n        if (validateSeed$1(seedLow)) {\n            return Promise.reject(validateSeed$1(seedLow));\n        }\n        if (validateSeed$1(seedHigh)) {\n            return Promise.reject(validateSeed$1(seedHigh));\n        }\n        if (wasmCache$4 === null) {\n            return lockedCreate(mutex$4, wasmJson$6, 8)\n                .then((wasm) => {\n                wasmCache$4 = wasm;\n                writeSeed$1(seedBuffer$1, seedLow, seedHigh);\n                wasmCache$4.writeMemory(new Uint8Array(seedBuffer$1));\n                return wasmCache$4.calculate(data);\n            });\n        }\n        try {\n            writeSeed$1(seedBuffer$1, seedLow, seedHigh);\n            wasmCache$4.writeMemory(new Uint8Array(seedBuffer$1));\n            const hash = wasmCache$4.calculate(data);\n            return Promise.resolve(hash);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    /**\n     * Creates a new xxHash3 hash instance\n     * @param seedLow Lower 32 bits of the number used to\n     *  initialize the internal state of the algorithm (defaults to 0)\n     * @param seedHigh Higher 32 bits of the number used to\n     *  initialize the internal state of the algorithm (defaults to 0)\n     */\n    function createXXHash3(seedLow = 0, seedHigh = 0) {\n        if (validateSeed$1(seedLow)) {\n            return Promise.reject(validateSeed$1(seedLow));\n        }\n        if (validateSeed$1(seedHigh)) {\n            return Promise.reject(validateSeed$1(seedHigh));\n        }\n        return WASMInterface(wasmJson$6, 8).then((wasm) => {\n            const instanceBuffer = new ArrayBuffer(8);\n            writeSeed$1(instanceBuffer, seedLow, seedHigh);\n            wasm.writeMemory(new Uint8Array(instanceBuffer));\n            wasm.init();\n            const obj = {\n                init: () => {\n                    wasm.writeMemory(new Uint8Array(instanceBuffer));\n                    wasm.init();\n                    return obj;\n                },\n                update: (data) => { wasm.update(data); return obj; },\n                digest: (outputType) => wasm.digest(outputType),\n                save: () => wasm.save(),\n                load: (data) => { wasm.load(data); return obj; },\n                blockSize: 512,\n                digestSize: 8,\n            };\n            return obj;\n        });\n    }\n\n    var name$5 = \"xxhash128\";\n    var data$5 = \"\";\n    var hash$5 = \"1f682d91\";\n    var wasmJson$5 = {\n    \tname: name$5,\n    \tdata: data$5,\n    \thash: hash$5\n    };\n\n    const mutex$3 = new Mutex();\n    let wasmCache$3 = null;\n    const seedBuffer = new ArrayBuffer(8);\n    function validateSeed(seed) {\n        if (!Number.isInteger(seed) || seed < 0 || seed > 0xFFFFFFFF) {\n            return new Error('Seed must be given as two valid 32-bit long unsigned integers (lo + high).');\n        }\n        return null;\n    }\n    function writeSeed(arr, low, high) {\n        // write in little-endian format\n        const buffer = new DataView(arr);\n        buffer.setUint32(0, low, true);\n        buffer.setUint32(4, high, true);\n    }\n    /**\n     * Calculates xxHash128 hash\n     * @param data Input data (string, Buffer or TypedArray)\n     * @param seedLow Lower 32 bits of the number used to\n     *  initialize the internal state of the algorithm (defaults to 0)\n     * @param seedHigh Higher 32 bits of the number used to\n     *  initialize the internal state of the algorithm (defaults to 0)\n     * @returns Computed hash as a hexadecimal string\n     */\n    function xxhash128(data, seedLow = 0, seedHigh = 0) {\n        if (validateSeed(seedLow)) {\n            return Promise.reject(validateSeed(seedLow));\n        }\n        if (validateSeed(seedHigh)) {\n            return Promise.reject(validateSeed(seedHigh));\n        }\n        if (wasmCache$3 === null) {\n            return lockedCreate(mutex$3, wasmJson$5, 16)\n                .then((wasm) => {\n                wasmCache$3 = wasm;\n                writeSeed(seedBuffer, seedLow, seedHigh);\n                wasmCache$3.writeMemory(new Uint8Array(seedBuffer));\n                return wasmCache$3.calculate(data);\n            });\n        }\n        try {\n            writeSeed(seedBuffer, seedLow, seedHigh);\n            wasmCache$3.writeMemory(new Uint8Array(seedBuffer));\n            const hash = wasmCache$3.calculate(data);\n            return Promise.resolve(hash);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    /**\n     * Creates a new xxHash128 hash instance\n     * @param seedLow Lower 32 bits of the number used to\n     *  initialize the internal state of the algorithm (defaults to 0)\n     * @param seedHigh Higher 32 bits of the number used to\n     *  initialize the internal state of the algorithm (defaults to 0)\n     */\n    function createXXHash128(seedLow = 0, seedHigh = 0) {\n        if (validateSeed(seedLow)) {\n            return Promise.reject(validateSeed(seedLow));\n        }\n        if (validateSeed(seedHigh)) {\n            return Promise.reject(validateSeed(seedHigh));\n        }\n        return WASMInterface(wasmJson$5, 16).then((wasm) => {\n            const instanceBuffer = new ArrayBuffer(8);\n            writeSeed(instanceBuffer, seedLow, seedHigh);\n            wasm.writeMemory(new Uint8Array(instanceBuffer));\n            wasm.init();\n            const obj = {\n                init: () => {\n                    wasm.writeMemory(new Uint8Array(instanceBuffer));\n                    wasm.init();\n                    return obj;\n                },\n                update: (data) => { wasm.update(data); return obj; },\n                digest: (outputType) => wasm.digest(outputType),\n                save: () => wasm.save(),\n                load: (data) => { wasm.load(data); return obj; },\n                blockSize: 512,\n                digestSize: 16,\n            };\n            return obj;\n        });\n    }\n\n    var name$4 = \"ripemd160\";\n    var data$4 = \"\";\n    var hash$4 = \"c089a7ca\";\n    var wasmJson$4 = {\n    \tname: name$4,\n    \tdata: data$4,\n    \thash: hash$4\n    };\n\n    const mutex$2 = new Mutex();\n    let wasmCache$2 = null;\n    /**\n     * Calculates RIPEMD-160 hash\n     * @param data Input data (string, Buffer or TypedArray)\n     * @returns Computed hash as a hexadecimal string\n     */\n    function ripemd160(data) {\n        if (wasmCache$2 === null) {\n            return lockedCreate(mutex$2, wasmJson$4, 20)\n                .then((wasm) => {\n                wasmCache$2 = wasm;\n                return wasmCache$2.calculate(data);\n            });\n        }\n        try {\n            const hash = wasmCache$2.calculate(data);\n            return Promise.resolve(hash);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    /**\n     * Creates a new RIPEMD-160 hash instance\n     */\n    function createRIPEMD160() {\n        return WASMInterface(wasmJson$4, 20).then((wasm) => {\n            wasm.init();\n            const obj = {\n                init: () => { wasm.init(); return obj; },\n                update: (data) => { wasm.update(data); return obj; },\n                digest: (outputType) => wasm.digest(outputType),\n                save: () => wasm.save(),\n                load: (data) => { wasm.load(data); return obj; },\n                blockSize: 64,\n                digestSize: 20,\n            };\n            return obj;\n        });\n    }\n\n    function calculateKeyBuffer(hasher, key) {\n        const { blockSize } = hasher;\n        const buf = getUInt8Buffer(key);\n        if (buf.length > blockSize) {\n            hasher.update(buf);\n            const uintArr = hasher.digest('binary');\n            hasher.init();\n            return uintArr;\n        }\n        return new Uint8Array(buf.buffer, buf.byteOffset, buf.length);\n    }\n    function calculateHmac(hasher, key) {\n        hasher.init();\n        const { blockSize } = hasher;\n        const keyBuf = calculateKeyBuffer(hasher, key);\n        const keyBuffer = new Uint8Array(blockSize);\n        keyBuffer.set(keyBuf);\n        const opad = new Uint8Array(blockSize);\n        for (let i = 0; i < blockSize; i++) {\n            const v = keyBuffer[i];\n            opad[i] = v ^ 0x5C;\n            keyBuffer[i] = v ^ 0x36;\n        }\n        hasher.update(keyBuffer);\n        const obj = {\n            init: () => {\n                hasher.init();\n                hasher.update(keyBuffer);\n                return obj;\n            },\n            update: (data) => {\n                hasher.update(data);\n                return obj;\n            },\n            digest: ((outputType) => {\n                const uintArr = hasher.digest('binary');\n                hasher.init();\n                hasher.update(opad);\n                hasher.update(uintArr);\n                return hasher.digest(outputType);\n            }),\n            save: () => {\n                throw new Error('save() not supported');\n            },\n            load: () => {\n                throw new Error('load() not supported');\n            },\n            blockSize: hasher.blockSize,\n            digestSize: hasher.digestSize,\n        };\n        return obj;\n    }\n    /**\n     * Calculates HMAC hash\n     * @param hash Hash algorithm to use. It has to be the return value of a function like createSHA1()\n     * @param key Key (string, Buffer or TypedArray)\n     */\n    function createHMAC(hash, key) {\n        if (!hash || !hash.then) {\n            throw new Error('Invalid hash function is provided! Usage: createHMAC(createMD5(), \"key\").');\n        }\n        return hash.then((hasher) => calculateHmac(hasher, key));\n    }\n\n    function calculatePBKDF2(digest, salt, iterations, hashLength, outputType) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const DK = new Uint8Array(hashLength);\n            const block1 = new Uint8Array(salt.length + 4);\n            const block1View = new DataView(block1.buffer);\n            const saltBuffer = getUInt8Buffer(salt);\n            const saltUIntBuffer = new Uint8Array(saltBuffer.buffer, saltBuffer.byteOffset, saltBuffer.length);\n            block1.set(saltUIntBuffer);\n            let destPos = 0;\n            const hLen = digest.digestSize;\n            const l = Math.ceil(hashLength / hLen);\n            let T = null;\n            let U = null;\n            for (let i = 1; i <= l; i++) {\n                block1View.setUint32(salt.length, i);\n                digest.init();\n                digest.update(block1);\n                T = digest.digest('binary');\n                U = T.slice();\n                for (let j = 1; j < iterations; j++) {\n                    digest.init();\n                    digest.update(U);\n                    U = digest.digest('binary');\n                    for (let k = 0; k < hLen; k++) {\n                        T[k] ^= U[k];\n                    }\n                }\n                DK.set(T.subarray(0, hashLength - destPos), destPos);\n                destPos += hLen;\n            }\n            if (outputType === 'binary') {\n                return DK;\n            }\n            const digestChars = new Uint8Array(hashLength * 2);\n            return getDigestHex(digestChars, DK, hashLength);\n        });\n    }\n    const validateOptions$2 = (options) => {\n        if (!options || typeof options !== 'object') {\n            throw new Error('Invalid options parameter. It requires an object.');\n        }\n        if (!options.hashFunction || !options.hashFunction.then) {\n            throw new Error('Invalid hash function is provided! Usage: pbkdf2(\"password\", \"salt\", 1000, 32, createSHA1()).');\n        }\n        if (!Number.isInteger(options.iterations) || options.iterations < 1) {\n            throw new Error('Iterations should be a positive number');\n        }\n        if (!Number.isInteger(options.hashLength) || options.hashLength < 1) {\n            throw new Error('Hash length should be a positive number');\n        }\n        if (options.outputType === undefined) {\n            options.outputType = 'hex';\n        }\n        if (!['hex', 'binary'].includes(options.outputType)) {\n            throw new Error(`Insupported output type ${options.outputType}. Valid values: ['hex', 'binary']`);\n        }\n    };\n    /**\n     * Generates a new PBKDF2 hash for the supplied password\n     */\n    function pbkdf2(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            validateOptions$2(options);\n            const hmac = yield createHMAC(options.hashFunction, options.password);\n            return calculatePBKDF2(hmac, options.salt, options.iterations, options.hashLength, options.outputType);\n        });\n    }\n\n    var name$3 = \"scrypt\";\n    var data$3 = \"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\";\n    var hash$3 = \"c51b8bf7\";\n    var wasmJson$3 = {\n    \tname: name$3,\n    \tdata: data$3,\n    \thash: hash$3\n    };\n\n    function scryptInternal(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { costFactor, blockSize, parallelism, hashLength, } = options;\n            const SHA256Hasher = createSHA256();\n            const blockData = yield pbkdf2({\n                password: options.password,\n                salt: options.salt,\n                iterations: 1,\n                hashLength: 128 * blockSize * parallelism,\n                hashFunction: SHA256Hasher,\n                outputType: 'binary',\n            });\n            const scryptInterface = yield WASMInterface(wasmJson$3, 0);\n            // last block is for storing the temporary vectors\n            const VSize = 128 * blockSize * costFactor;\n            const XYSize = 256 * blockSize;\n            scryptInterface.setMemorySize(blockData.length + VSize + XYSize);\n            scryptInterface.writeMemory(blockData, 0);\n            // mix blocks\n            scryptInterface.getExports().scrypt(blockSize, costFactor, parallelism);\n            const expensiveSalt = scryptInterface\n                .getMemory()\n                .subarray(0, 128 * blockSize * parallelism);\n            const outputData = yield pbkdf2({\n                password: options.password,\n                salt: expensiveSalt,\n                iterations: 1,\n                hashLength,\n                hashFunction: SHA256Hasher,\n                outputType: 'binary',\n            });\n            if (options.outputType === 'hex') {\n                const digestChars = new Uint8Array(hashLength * 2);\n                return getDigestHex(digestChars, outputData, hashLength);\n            }\n            // return binary format\n            return outputData;\n        });\n    }\n    // eslint-disable-next-line no-bitwise\n    const isPowerOfTwo = (v) => v && !(v & (v - 1));\n    const validateOptions$1 = (options) => {\n        if (!options || typeof options !== 'object') {\n            throw new Error('Invalid options parameter. It requires an object.');\n        }\n        if (!Number.isInteger(options.blockSize) || options.blockSize < 1) {\n            throw new Error('Block size should be a positive number');\n        }\n        if (!Number.isInteger(options.costFactor)\n            || options.costFactor < 2\n            || !isPowerOfTwo(options.costFactor)) {\n            throw new Error('Cost factor should be a power of 2, greater than 1');\n        }\n        if (!Number.isInteger(options.parallelism) || options.parallelism < 1) {\n            throw new Error('Parallelism should be a positive number');\n        }\n        if (!Number.isInteger(options.hashLength) || options.hashLength < 1) {\n            throw new Error('Hash length should be a positive number.');\n        }\n        if (options.outputType === undefined) {\n            options.outputType = 'hex';\n        }\n        if (!['hex', 'binary'].includes(options.outputType)) {\n            throw new Error(`Insupported output type ${options.outputType}. Valid values: ['hex', 'binary']`);\n        }\n    };\n    /**\n     * Calculates hash using the scrypt password-based key derivation function\n     * @returns Computed hash as a hexadecimal string or as\n     *          Uint8Array depending on the outputType option\n     */\n    function scrypt(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            validateOptions$1(options);\n            return scryptInternal(options);\n        });\n    }\n\n    var name$2 = \"bcrypt\";\n    var data$2 = \"AGFzbQEAAAABFwRgAAF/YAR/f39/AGADf39/AGABfwF/AwUEAAECAwUEAQECAgYIAX8BQZCrBQsHNAQGbWVtb3J5AgAOSGFzaF9HZXRCdWZmZXIAAAZiY3J5cHQAAg1iY3J5cHRfdmVyaWZ5AAMK+GAEBQBBgCsL3lkEFH8Bfgh/AX4jAEHwAGshBCACQQA6AAIgAkGq4AA7AAACQCABLQAAQSpHDQAgAS0AAUEwRw0AIAJBMToAAQsCQCABLAAFIAEsAARBCmxqQfB7aiIFQQRJDQAgAS0AB0FgaiIGQd8ASw0AIAZBkAlqLQAAIgZBP0sNACABLQAIQWBqIgdB3wBLDQAgB0GQCWotAAAiB0E/Sw0AIAQgB0EEdiAGQQJ0cjoACCABLQAJQWBqIgZB3wBLDQAgBkGQCWotAAAiBkE/Sw0AIAQgBkECdiAHQQR0cjoACSABLQAKQWBqIgdB3wBLDQAgB0GQCWotAAAiB0E/Sw0AIAQgByAGQQZ0cjoACiABLQALQWBqIgZB3wBLDQAgBkGQCWotAAAiBkE/Sw0AIAEtAAxBYGoiB0HfAEsNACAHQZAJai0AACIHQT9LDQAgBCAHQQR2IAZBAnRyOgALIAEtAA1BYGoiBkHfAEsNACAGQZAJai0AACIGQT9LDQAgBCAGQQJ2IAdBBHRyOgAMIAEtAA5BYGoiB0HfAEsNACAHQZAJai0AACIHQT9LDQAgBCAHIAZBBnRyOgANIAEtAA9BYGoiBkHfAEsNACAGQZAJai0AACIGQT9LDQAgAS0AEEFgaiIHQd8ASw0AIAdBkAlqLQAAIgdBP0sNACAEIAdBBHYgBkECdHI6AA4gAS0AEUFgaiIGQd8ASw0AIAZBkAlqLQAAIgZBP0sNACAEIAZBAnYgB0EEdHI6AA8gAS0AEkFgaiIHQd8ASw0AIAdBkAlqLQAAIgdBP0sNACAEIAcgBkEGdHI6ABAgAS0AE0FgaiIGQd8ASw0AIAZBkAlqLQAAIgZBP0sNACABLQAUQWBqIgdB3wBLDQAgB0GQCWotAAAiB0E/Sw0AIAQgB0EEdiAGQQJ0cjoAESABLQAVQWBqIgZB3wBLDQAgBkGQCWotAAAiBkE/Sw0AIAQgBkECdiAHQQR0cjoAEiABLQAWQWBqIgdB3wBLDQAgB0GQCWotAAAiB0E/Sw0AIAQgByAGQQZ0cjoAEyABLQAXQWBqIgZB3wBLDQAgBkGQCWotAAAiBkE/Sw0AIAEtABhBYGoiB0HfAEsNACAHQZAJai0AACIHQT9LDQAgBCAHQQR2IAZBAnRyOgAUIAEtABlBYGoiBkHfAEsNACAGQZAJai0AACIGQT9LDQAgBCAGQQJ2IAdBBHRyOgAVIAEtABpBYGoiB0HfAEsNACAHQZAJai0AACIHQT9LDQAgBCAHIAZBBnRyOgAWIAEtABtBYGoiBkHfAEsNACAGQZAJai0AACIGQT9LDQAgAS0AHEFgaiIHQd8ASw0AIAdBkAlqLQAAIgdBP0sNAEEBIAV0IQggBCAHQQR2IAZBAnRyOgAXIAQgBCgCCCIFQRh0IAVBgP4DcUEIdHIgBUEIdkGA/gNxIAVBGHZyciIJNgIIIAQgBCgCDCIFQRh0IAVBgP4DcUEIdHIgBUEIdkGA/gNxIAVBGHZyciIKNgIMIAQgBCgCECIFQRh0IAVBgP4DcUEIdHIgBUEIdkGA/gNxIAVBGHZyciILNgIQIAQgBCgCFCIFQRh0IAVBgP4DcUEIdHIgBUEIdkGA/gNxIAVBGHZyciIMNgIUIARB6ABqIAEtAAJBnwdqLQAAIg1BAXFBAnRqIQ5BACEGQQAhD0EAIRAgACEFA0AgBEIANwJoIAUtAAAhByAEQQA2AmwgBCAHNgJoIAQgBSwAACIRNgJsIAUtAAAhEiAEIAdBCHQiBzYCaCAEIAcgBUEBaiAAIBIbIgUtAAByIgc2AmggBCARQQh0IhE2AmwgBCARIAUsAAAiEnIiETYCbCAFLQAAIRMgBCAHQQh0Igc2AmggBCAHIAVBAWogACATGyIFLQAAciIHNgJoIAQgEUEIdCIRNgJsIAQgESAFLAAAIhNyIhE2AmwgBS0AACEUIAQgB0EIdCIHNgJoIAQgByAFQQFqIAAgFBsiBS0AAHIiBzYCaCAEIBFBCHQiETYCbCAEIBEgBSwAACIUciIRNgJsIAUtAAAhFSAEQSBqIAZqIA4oAgAiFjYCACAGQfApaiIXIBYgFygCAHM2AgAgESAHcyAPciEPIAVBAWogACAVGyEFIBQgEyAScnJBgAFxIBByIRAgBkEEaiIGQcgARw0AC0EAQQAoAvApIBBBCXQgDUEPdHFBgIAEIA9B//8DcSAPQRB2cmtxczYC8ClCACEYQX4hBkHwKSEHA0BBACgCrCpBACgCqCpBACgCpCpBACgCoCpBACgCnCpBACgCmCpBACgClCpBACgCkCpBACgCjCpBACgCiCpBACgChCpBACgCgCpBACgC/ClBACgC+ClBACgC9CkgBEEIaiAGQQJqIgZBAnFBAnRqKQMAIBiFIhhCIIinc0EAKALwKSAYp3MiAEEWdkH8B3FB8AlqKAIAIABBDnZB/AdxQfARaigCAGogAEEGdkH8B3FB8BlqKAIAcyAAQf8BcUECdEHwIWooAgBqcyIFQRZ2QfwHcUHwCWooAgAgBUEOdkH8B3FB8BFqKAIAaiAFQQZ2QfwHcUHwGWooAgBzIAVB/wFxQQJ0QfAhaigCAGpzIABzIgBBFnZB/AdxQfAJaigCACAAQQ52QfwHcUHwEWooAgBqIABBBnZB/AdxQfAZaigCAHMgAEH/AXFBAnRB8CFqKAIAanMgBXMiBUEWdkH8B3FB8AlqKAIAIAVBDnZB/AdxQfARaigCAGogBUEGdkH8B3FB8BlqKAIAcyAFQf8BcUECdEHwIWooAgBqcyAAcyIAQRZ2QfwHcUHwCWooAgAgAEEOdkH8B3FB8BFqKAIAaiAAQQZ2QfwHcUHwGWooAgBzIABB/wFxQQJ0QfAhaigCAGpzIAVzIgVBFnZB/AdxQfAJaigCACAFQQ52QfwHcUHwEWooAgBqIAVBBnZB/AdxQfAZaigCAHMgBUH/AXFBAnRB8CFqKAIAanMgAHMiAEEWdkH8B3FB8AlqKAIAIABBDnZB/AdxQfARaigCAGogAEEGdkH8B3FB8BlqKAIAcyAAQf8BcUECdEHwIWooAgBqcyAFcyIFQRZ2QfwHcUHwCWooAgAgBUEOdkH8B3FB8BFqKAIAaiAFQQZ2QfwHcUHwGWooAgBzIAVB/wFxQQJ0QfAhaigCAGpzIABzIgBBFnZB/AdxQfAJaigCACAAQQ52QfwHcUHwEWooAgBqIABBBnZB/AdxQfAZaigCAHMgAEH/AXFBAnRB8CFqKAIAanMgBXMiBUEWdkH8B3FB8AlqKAIAIAVBDnZB/AdxQfARaigCAGogBUEGdkH8B3FB8BlqKAIAcyAFQf8BcUECdEHwIWooAgBqcyAAcyIAQRZ2QfwHcUHwCWooAgAgAEEOdkH8B3FB8BFqKAIAaiAAQQZ2QfwHcUHwGWooAgBzIABB/wFxQQJ0QfAhaigCAGpzIAVzIgVBFnZB/AdxQfAJaigCACAFQQ52QfwHcUHwEWooAgBqIAVBBnZB/AdxQfAZaigCAHMgBUH/AXFBAnRB8CFqKAIAanMgAHMiAEEWdkH8B3FB8AlqKAIAIABBDnZB/AdxQfARaigCAGogAEEGdkH8B3FB8BlqKAIAcyAAQf8BcUECdEHwIWooAgBqcyAFcyIFQRZ2QfwHcUHwCWooAgAgBUEOdkH8B3FB8BFqKAIAaiAFQQZ2QfwHcUHwGWooAgBzIAVB/wFxQQJ0QfAhaigCAGpzIABzIgBBFnZB/AdxQfAJaigCACAAQQ52QfwHcUHwEWooAgBqIABBBnZB/AdxQfAZaigCAHMgAEH/AXFBAnRB8CFqKAIAanMgBXMiBUH/AXFBAnRB8CFqKAIAIQ8gBUEGdkH8B3FB8BlqKAIAIRAgBUEWdkH8B3FB8AlqKAIAIREgBUEOdkH8B3FB8BFqKAIAIRJBACgCsCohE0EAQQAoArQqIAVzNgKAqwFBACATIA8gECARIBJqc2pzIABzNgKEqwEgB0EAKQOAqwEiGDcCACAHQQhqIQcgBkEQSQ0ACyAYQiCIpyEFIBinIQZB8AkhAANAQQAoAqwqQQAoAqgqQQAoAqQqQQAoAqAqQQAoApwqQQAoApgqQQAoApQqQQAoApAqQQAoAowqQQAoAogqQQAoAoQqQQAoAoAqQQAoAvwpQQAoAvgpIAVBACgC9ClzIAZBACgC8ClzIAtzIgVBFnZB/AdxQfAJaigCACAFQQ52QfwHcUHwEWooAgBqIAVBBnZB/AdxQfAZaigCAHMgBUH/AXFBAnRB8CFqKAIAanMgDHMiBkEWdkH8B3FB8AlqKAIAIAZBDnZB/AdxQfARaigCAGogBkEGdkH8B3FB8BlqKAIAcyAGQf8BcUECdEHwIWooAgBqcyAFcyIFQRZ2QfwHcUHwCWooAgAgBUEOdkH8B3FB8BFqKAIAaiAFQQZ2QfwHcUHwGWooAgBzIAVB/wFxQQJ0QfAhaigCAGpzIAZzIgZBFnZB/AdxQfAJaigCACAGQQ52QfwHcUHwEWooAgBqIAZBBnZB/AdxQfAZaigCAHMgBkH/AXFBAnRB8CFqKAIAanMgBXMiBUEWdkH8B3FB8AlqKAIAIAVBDnZB/AdxQfARaigCAGogBUEGdkH8B3FB8BlqKAIAcyAFQf8BcUECdEHwIWooAgBqcyAGcyIGQRZ2QfwHcUHwCWooAgAgBkEOdkH8B3FB8BFqKAIAaiAGQQZ2QfwHcUHwGWooAgBzIAZB/wFxQQJ0QfAhaigCAGpzIAVzIgVBFnZB/AdxQfAJaigCACAFQQ52QfwHcUHwEWooAgBqIAVBBnZB/AdxQfAZaigCAHMgBUH/AXFBAnRB8CFqKAIAanMgBnMiBkEWdkH8B3FB8AlqKAIAIAZBDnZB/AdxQfARaigCAGogBkEGdkH8B3FB8BlqKAIAcyAGQf8BcUECdEHwIWooAgBqcyAFcyIFQRZ2QfwHcUHwCWooAgAgBUEOdkH8B3FB8BFqKAIAaiAFQQZ2QfwHcUHwGWooAgBzIAVB/wFxQQJ0QfAhaigCAGpzIAZzIgZBFnZB/AdxQfAJaigCACAGQQ52QfwHcUHwEWooAgBqIAZBBnZB/AdxQfAZaigCAHMgBkH/AXFBAnRB8CFqKAIAanMgBXMiBUEWdkH8B3FB8AlqKAIAIAVBDnZB/AdxQfARaigCAGogBUEGdkH8B3FB8BlqKAIAcyAFQf8BcUECdEHwIWooAgBqcyAGcyIGQRZ2QfwHcUHwCWooAgAgBkEOdkH8B3FB8BFqKAIAaiAGQQZ2QfwHcUHwGWooAgBzIAZB/wFxQQJ0QfAhaigCAGpzIAVzIgVBFnZB/AdxQfAJaigCACAFQQ52QfwHcUHwEWooAgBqIAVBBnZB/AdxQfAZaigCAHMgBUH/AXFBAnRB8CFqKAIAanMgBnMiBkEWdkH8B3FB8AlqKAIAIAZBDnZB/AdxQfARaigCAGogBkEGdkH8B3FB8BlqKAIAcyAGQf8BcUECdEHwIWooAgBqcyAFcyIFQRZ2QfwHcUHwCWooAgAgBUEOdkH8B3FB8BFqKAIAaiAFQQZ2QfwHcUHwGWooAgBzIAVB/wFxQQJ0QfAhaigCAGpzIAZzIgZB/wFxQQJ0QfAhaigCACEHIAZBBnZB/AdxQfAZaigCACEPIAZBFnZB/AdxQfAJaigCACEQIAZBDnZB/AdxQfARaigCACERQQAoArAqIRIgAEEAKAK0KiAGcyIGNgIAIABBBGogEiAHIA8gECARanNqcyAFcyIHNgIAQQAoAqwqQQAoAqgqQQAoAqQqQQAoAqAqQQAoApwqQQAoApgqQQAoApQqQQAoApAqQQAoAowqQQAoAogqQQAoAoQqQQAoAoAqQQAoAvwpQQAoAvgpQQAoAvQpIAlBACgC8ClzIAZzIgVBFnZB/AdxQfAJaigCACAFQQ52QfwHcUHwEWooAgBqIAVBBnZB/AdxQfAZaigCAHMgBUH/AXFBAnRB8CFqKAIAanMgCnMgB3MiBkEWdkH8B3FB8AlqKAIAIAZBDnZB/AdxQfARaigCAGogBkEGdkH8B3FB8BlqKAIAcyAGQf8BcUECdEHwIWooAgBqcyAFcyIFQRZ2QfwHcUHwCWooAgAgBUEOdkH8B3FB8BFqKAIAaiAFQQZ2QfwHcUHwGWooAgBzIAVB/wFxQQJ0QfAhaigCAGpzIAZzIgZBFnZB/AdxQfAJaigCACAGQQ52QfwHcUHwEWooAgBqIAZBBnZB/AdxQfAZaigCAHMgBkH/AXFBAnRB8CFqKAIAanMgBXMiBUEWdkH8B3FB8AlqKAIAIAVBDnZB/AdxQfARaigCAGogBUEGdkH8B3FB8BlqKAIAcyAFQf8BcUECdEHwIWooAgBqcyAGcyIGQRZ2QfwHcUHwCWooAgAgBkEOdkH8B3FB8BFqKAIAaiAGQQZ2QfwHcUHwGWooAgBzIAZB/wFxQQJ0QfAhaigCAGpzIAVzIgVBFnZB/AdxQfAJaigCACAFQQ52QfwHcUHwEWooAgBqIAVBBnZB/AdxQfAZaigCAHMgBUH/AXFBAnRB8CFqKAIAanMgBnMiBkEWdkH8B3FB8AlqKAIAIAZBDnZB/AdxQfARaigCAGogBkEGdkH8B3FB8BlqKAIAcyAGQf8BcUECdEHwIWooAgBqcyAFcyIFQRZ2QfwHcUHwCWooAgAgBUEOdkH8B3FB8BFqKAIAaiAFQQZ2QfwHcUHwGWooAgBzIAVB/wFxQQJ0QfAhaigCAGpzIAZzIgZBFnZB/AdxQfAJaigCACAGQQ52QfwHcUHwEWooAgBqIAZBBnZB/AdxQfAZaigCAHMgBkH/AXFBAnRB8CFqKAIAanMgBXMiBUEWdkH8B3FB8AlqKAIAIAVBDnZB/AdxQfARaigCAGogBUEGdkH8B3FB8BlqKAIAcyAFQf8BcUECdEHwIWooAgBqcyAGcyIGQRZ2QfwHcUHwCWooAgAgBkEOdkH8B3FB8BFqKAIAaiAGQQZ2QfwHcUHwGWooAgBzIAZB/wFxQQJ0QfAhaigCAGpzIAVzIgVBFnZB/AdxQfAJaigCACAFQQ52QfwHcUHwEWooAgBqIAVBBnZB/AdxQfAZaigCAHMgBUH/AXFBAnRB8CFqKAIAanMgBnMiBkEWdkH8B3FB8AlqKAIAIAZBDnZB/AdxQfARaigCAGogBkEGdkH8B3FB8BlqKAIAcyAGQf8BcUECdEHwIWooAgBqcyAFcyIFQRZ2QfwHcUHwCWooAgAgBUEOdkH8B3FB8BFqKAIAaiAFQQZ2QfwHcUHwGWooAgBzIAVB/wFxQQJ0QfAhaigCAGpzIAZzIgZB/wFxQQJ0QfAhaigCACEHIAZBBnZB/AdxQfAZaigCACEPIAZBFnZB/AdxQfAJaigCACEQIAZBDnZB/AdxQfARaigCACERQQAoArAqIRIgAEEIakEAKAK0KiAGcyIGNgIAIABBDGogEiAHIA8gECARanNqcyAFcyIFNgIAIABBEGoiAEHsKUkNAAtBACAFNgKEqwFBACAGNgKAqwEgBCgCZCEUIAQoAmAhFSAEKAJcIRYgBCgCWCEXIAQoAlQhCSAEKAJQIQogBCgCTCELIAQoAkghDCAEKAJEIQ4gBCgCQCENIAQoAjwhGSAEKAI4IRogBCgCNCEbIAQoAjAhHCAEKAIsIR0gBCgCKCEeIAQoAiQhHyAEKAIgISAgBCkDECEhIAQpAwghGANAQQBBACgC8CkgIHM2AvApQQBBACgC9CkgH3M2AvQpQQBBACgC+CkgHnM2AvgpQQBBACgC/CkgHXM2AvwpQQBBACgCgCogHHM2AoAqQQBBACgChCogG3M2AoQqQQBBACgCiCogGnM2AogqQQBBACgCjCogGXM2AowqQQBBACgCkCogDXM2ApAqQQBBACgClCogDnM2ApQqQQBBACgCmCogDHM2ApgqQQBBACgCnCogC3M2ApwqQQBBACgCoCogCnM2AqAqQQBBACgCpCogCXM2AqQqQQBBACgCqCogF3M2AqgqQQBBACgCrCogFnM2AqwqQQBBACgCsCogFXM2ArAqQQBBACgCtCogFHM2ArQqQQEhEwNAQQAhAEEAQgA3A4CrAUHwKSEGQQAhBQNAQQAoAqwqQQAoAqgqQQAoAqQqQQAoAqAqQQAoApwqQQAoApgqQQAoApQqQQAoApAqQQAoAowqQQAoAogqQQAoAoQqQQAoAoAqQQAoAvwpQQAoAvgpQQAoAvQpIABzQQAoAvApIAVzIgBBFnZB/AdxQfAJaigCACAAQQ52QfwHcUHwEWooAgBqIABBBnZB/AdxQfAZaigCAHMgAEH/AXFBAnRB8CFqKAIAanMiBUEWdkH8B3FB8AlqKAIAIAVBDnZB/AdxQfARaigCAGogBUEGdkH8B3FB8BlqKAIAcyAFQf8BcUECdEHwIWooAgBqcyAAcyIAQRZ2QfwHcUHwCWooAgAgAEEOdkH8B3FB8BFqKAIAaiAAQQZ2QfwHcUHwGWooAgBzIABB/wFxQQJ0QfAhaigCAGpzIAVzIgVBFnZB/AdxQfAJaigCACAFQQ52QfwHcUHwEWooAgBqIAVBBnZB/AdxQfAZaigCAHMgBUH/AXFBAnRB8CFqKAIAanMgAHMiAEEWdkH8B3FB8AlqKAIAIABBDnZB/AdxQfARaigCAGogAEEGdkH8B3FB8BlqKAIAcyAAQf8BcUECdEHwIWooAgBqcyAFcyIFQRZ2QfwHcUHwCWooAgAgBUEOdkH8B3FB8BFqKAIAaiAFQQZ2QfwHcUHwGWooAgBzIAVB/wFxQQJ0QfAhaigCAGpzIABzIgBBFnZB/AdxQfAJaigCACAAQQ52QfwHcUHwEWooAgBqIABBBnZB/AdxQfAZaigCAHMgAEH/AXFBAnRB8CFqKAIAanMgBXMiBUEWdkH8B3FB8AlqKAIAIAVBDnZB/AdxQfARaigCAGogBUEGdkH8B3FB8BlqKAIAcyAFQf8BcUECdEHwIWooAgBqcyAAcyIAQRZ2QfwHcUHwCWooAgAgAEEOdkH8B3FB8BFqKAIAaiAAQQZ2QfwHcUHwGWooAgBzIABB/wFxQQJ0QfAhaigCAGpzIAVzIgVBFnZB/AdxQfAJaigCACAFQQ52QfwHcUHwEWooAgBqIAVBBnZB/AdxQfAZaigCAHMgBUH/AXFBAnRB8CFqKAIAanMgAHMiAEEWdkH8B3FB8AlqKAIAIABBDnZB/AdxQfARaigCAGogAEEGdkH8B3FB8BlqKAIAcyAAQf8BcUECdEHwIWooAgBqcyAFcyIFQRZ2QfwHcUHwCWooAgAgBUEOdkH8B3FB8BFqKAIAaiAFQQZ2QfwHcUHwGWooAgBzIAVB/wFxQQJ0QfAhaigCAGpzIABzIgBBFnZB/AdxQfAJaigCACAAQQ52QfwHcUHwEWooAgBqIABBBnZB/AdxQfAZaigCAHMgAEH/AXFBAnRB8CFqKAIAanMgBXMiBUEWdkH8B3FB8AlqKAIAIAVBDnZB/AdxQfARaigCAGogBUEGdkH8B3FB8BlqKAIAcyAFQf8BcUECdEHwIWooAgBqcyAAcyIAQRZ2QfwHcUHwCWooAgAgAEEOdkH8B3FB8BFqKAIAaiAAQQZ2QfwHcUHwGWooAgBzIABB/wFxQQJ0QfAhaigCAGpzIAVzIgVB/wFxQQJ0QfAhaigCACEHIAVBBnZB/AdxQfAZaigCACEPIAVBFnZB/AdxQfAJaigCACEQIAVBDnZB/AdxQfARaigCACERQQAoArAqIRIgBkEAKAK0KiAFcyIFNgIAIAZBBGogEiAHIA8gECARanNqcyAAcyIANgIAIAZBCGoiBkG4KkkNAAtB8AkhBgNAQQAoAqwqQQAoAqgqQQAoAqQqQQAoAqAqQQAoApwqQQAoApgqQQAoApQqQQAoApAqQQAoAowqQQAoAogqQQAoAoQqQQAoAoAqQQAoAvwpQQAoAvgpQQAoAvQpIABzQQAoAvApIAVzIgBBFnZB/AdxQfAJaigCACAAQQ52QfwHcUHwEWooAgBqIABBBnZB/AdxQfAZaigCAHMgAEH/AXFBAnRB8CFqKAIAanMiBUEWdkH8B3FB8AlqKAIAIAVBDnZB/AdxQfARaigCAGogBUEGdkH8B3FB8BlqKAIAcyAFQf8BcUECdEHwIWooAgBqcyAAcyIAQRZ2QfwHcUHwCWooAgAgAEEOdkH8B3FB8BFqKAIAaiAAQQZ2QfwHcUHwGWooAgBzIABB/wFxQQJ0QfAhaigCAGpzIAVzIgVBFnZB/AdxQfAJaigCACAFQQ52QfwHcUHwEWooAgBqIAVBBnZB/AdxQfAZaigCAHMgBUH/AXFBAnRB8CFqKAIAanMgAHMiAEEWdkH8B3FB8AlqKAIAIABBDnZB/AdxQfARaigCAGogAEEGdkH8B3FB8BlqKAIAcyAAQf8BcUECdEHwIWooAgBqcyAFcyIFQRZ2QfwHcUHwCWooAgAgBUEOdkH8B3FB8BFqKAIAaiAFQQZ2QfwHcUHwGWooAgBzIAVB/wFxQQJ0QfAhaigCAGpzIABzIgBBFnZB/AdxQfAJaigCACAAQQ52QfwHcUHwEWooAgBqIABBBnZB/AdxQfAZaigCAHMgAEH/AXFBAnRB8CFqKAIAanMgBXMiBUEWdkH8B3FB8AlqKAIAIAVBDnZB/AdxQfARaigCAGogBUEGdkH8B3FB8BlqKAIAcyAFQf8BcUECdEHwIWooAgBqcyAAcyIAQRZ2QfwHcUHwCWooAgAgAEEOdkH8B3FB8BFqKAIAaiAAQQZ2QfwHcUHwGWooAgBzIABB/wFxQQJ0QfAhaigCAGpzIAVzIgVBFnZB/AdxQfAJaigCACAFQQ52QfwHcUHwEWooAgBqIAVBBnZB/AdxQfAZaigCAHMgBUH/AXFBAnRB8CFqKAIAanMgAHMiAEEWdkH8B3FB8AlqKAIAIABBDnZB/AdxQfARaigCAGogAEEGdkH8B3FB8BlqKAIAcyAAQf8BcUECdEHwIWooAgBqcyAFcyIFQRZ2QfwHcUHwCWooAgAgBUEOdkH8B3FB8BFqKAIAaiAFQQZ2QfwHcUHwGWooAgBzIAVB/wFxQQJ0QfAhaigCAGpzIABzIgBBFnZB/AdxQfAJaigCACAAQQ52QfwHcUHwEWooAgBqIABBBnZB/AdxQfAZaigCAHMgAEH/AXFBAnRB8CFqKAIAanMgBXMiBUEWdkH8B3FB8AlqKAIAIAVBDnZB/AdxQfARaigCAGogBUEGdkH8B3FB8BlqKAIAcyAFQf8BcUECdEHwIWooAgBqcyAAcyIAQRZ2QfwHcUHwCWooAgAgAEEOdkH8B3FB8BFqKAIAaiAAQQZ2QfwHcUHwGWooAgBzIABB/wFxQQJ0QfAhaigCAGpzIAVzIgVB/wFxQQJ0QfAhaigCACEHIAVBBnZB/AdxQfAZaigCACEPIAVBFnZB/AdxQfAJaigCACEQIAVBDnZB/AdxQfARaigCACERQQAoArAqIRIgBkEAKAK0KiAFcyIFNgIAIAZBBGogEiAHIA8gECARanNqcyAAcyIANgIAIAZBCGoiBkHsKUkNAAtBACAANgKEqwFBACAFNgKAqwECQCATQQFxRQ0AQQAhE0EAQQApAvApIBiFNwLwKUEAQQApAvgpICGFNwL4KUEAQQApAoAqIBiFNwKAKkEAQQApAogqICGFNwKIKkEAQQApApAqIBiFNwKQKkEAQQApApgqICGFNwKYKkEAQQApAqAqIBiFNwKgKkEAQQApAqgqICGFNwKoKkEAQQApArAqIBiFNwKwKgwBCwsgCEF/aiIIDQALQQAoArQqIQ9BACgCsCohEEEAKAKsKiERQQAoAqgqIRJBACgCpCohE0EAKAKgKiEIQQAoApwqIRRBACgCmCohFUEAKAKUKiEWQQAoApAqIRdBACgCjCohCUEAKAKIKiEKQQAoAoQqIQtBACgCgCohDEEAKAL8KSEOQQAoAvgpIQ1BACgC9CkhGUEAKALwKSEaQQAhGwNAIBtBAnQiHEGgCGopAwAiGKchACAYQiCIpyEGQUAhBwNAIBAgESASIBMgCCAUIBUgFiAXIAkgCiALIAwgDiANIAYgGXMgACAacyIAQRZ2QfwHcUHwCWooAgAgAEEOdkH8B3FB8BFqKAIAaiAAQQZ2QfwHcUHwGWooAgBzIABB/wFxQQJ0QfAhaigCAGpzIgVBFnZB/AdxQfAJaigCACAFQQ52QfwHcUHwEWooAgBqIAVBBnZB/AdxQfAZaigCAHMgBUH/AXFBAnRB8CFqKAIAanMgAHMiAEEWdkH8B3FB8AlqKAIAIABBDnZB/AdxQfARaigCAGogAEEGdkH8B3FB8BlqKAIAcyAAQf8BcUECdEHwIWooAgBqcyAFcyIFQRZ2QfwHcUHwCWooAgAgBUEOdkH8B3FB8BFqKAIAaiAFQQZ2QfwHcUHwGWooAgBzIAVB/wFxQQJ0QfAhaigCAGpzIABzIgBBFnZB/AdxQfAJaigCACAAQQ52QfwHcUHwEWooAgBqIABBBnZB/AdxQfAZaigCAHMgAEH/AXFBAnRB8CFqKAIAanMgBXMiBUEWdkH8B3FB8AlqKAIAIAVBDnZB/AdxQfARaigCAGogBUEGdkH8B3FB8BlqKAIAcyAFQf8BcUECdEHwIWooAgBqcyAAcyIAQRZ2QfwHcUHwCWooAgAgAEEOdkH8B3FB8BFqKAIAaiAAQQZ2QfwHcUHwGWooAgBzIABB/wFxQQJ0QfAhaigCAGpzIAVzIgVBFnZB/AdxQfAJaigCACAFQQ52QfwHcUHwEWooAgBqIAVBBnZB/AdxQfAZaigCAHMgBUH/AXFBAnRB8CFqKAIAanMgAHMiAEEWdkH8B3FB8AlqKAIAIABBDnZB/AdxQfARaigCAGogAEEGdkH8B3FB8BlqKAIAcyAAQf8BcUECdEHwIWooAgBqcyAFcyIFQRZ2QfwHcUHwCWooAgAgBUEOdkH8B3FB8BFqKAIAaiAFQQZ2QfwHcUHwGWooAgBzIAVB/wFxQQJ0QfAhaigCAGpzIABzIgBBFnZB/AdxQfAJaigCACAAQQ52QfwHcUHwEWooAgBqIABBBnZB/AdxQfAZaigCAHMgAEH/AXFBAnRB8CFqKAIAanMgBXMiBUEWdkH8B3FB8AlqKAIAIAVBDnZB/AdxQfARaigCAGogBUEGdkH8B3FB8BlqKAIAcyAFQf8BcUECdEHwIWooAgBqcyAAcyIAQRZ2QfwHcUHwCWooAgAgAEEOdkH8B3FB8BFqKAIAaiAAQQZ2QfwHcUHwGWooAgBzIABB/wFxQQJ0QfAhaigCAGpzIAVzIgVBFnZB/AdxQfAJaigCACAFQQ52QfwHcUHwEWooAgBqIAVBBnZB/AdxQfAZaigCAHMgBUH/AXFBAnRB8CFqKAIAanMgAHMiAEEWdkH8B3FB8AlqKAIAIABBDnZB/AdxQfARaigCAGogAEEGdkH8B3FB8BlqKAIAcyAAQf8BcUECdEHwIWooAgBqcyAFcyIFQRZ2QfwHcUHwCWooAgAgBUEOdkH8B3FB8BFqKAIAaiAFQQZ2QfwHcUHwGWooAgBzIAVB/wFxQQJ0QfAhaigCAGpzIABzIQYgBSAPcyEAIAdBAWoiBw0AC0EAIAY2AoSrAUEAIAA2AoCrASAEQQhqIBxqQQApA4CrATcDACAbQQRJIQAgG0ECaiEbIAANAAsgAiABKAIANgIAIAIgASgCBDYCBCACIAEoAgg2AgggAiABKAIMNgIMIAIgASgCEDYCECACIAEoAhQ2AhQgAiABKAIYNgIYIAIgASwAHEHwCGotAABBMHFBwAhqLQAAOgAcIAQgBCgCCCIBQRh0IAFBgP4DcUEIdHIgAUEIdkGA/gNxIAFBGHZyciIHNgIIIAQgBCgCDCIBQRh0IAFBgP4DcUEIdHIgAUEIdkGA/gNxIAFBGHZyciIBNgIMIAQgBCgCECIAQRh0IABBgP4DcUEIdHIgAEEIdkGA/gNxIABBGHZyciIANgIQIAQgBCgCFCIFQRh0IAVBgP4DcUEIdHIgBUEIdkGA/gNxIAVBGHZyciIFNgIUIAQgBCgCGCIGQRh0IAZBgP4DcUEIdHIgBkEIdkGA/gNxIAZBGHZyciIGNgIYIAQgBCgCHCIPQRh0IA9BgP4DcUEIdHIgD0EIdkGA/gNxIA9BGHZyciIPNgIcAkACQCADDQAgAiAEKQMINwMAIAIgBCkDEDcDCCACIAQpAxg3AxAMAQsgAiAPQT9xQcAIai0AADoAOCACIAVBGnZBwAhqLQAAOgAxIAIgAEE/cUHACGotAAA6ACggAiAHQRp2QcAIai0AADoAISACIAQtAAgiBEECdkHACGotAAA6AB0gAiAPQQ52QTxxQcAIai0AADoAOyACIA9BCnZBP3FBwAhqLQAAOgA5IAIgBkESdkE/cUHACGotAAA6ADUgAiAGQQh2QT9xQcAIai0AADoANCACIAVBEHZBP3FBwAhqLQAAOgAwIAIgBUH8AXFBAnZBwAhqLQAAOgAtIAIgAEEYdkE/cUHACGotAAA6ACwgAiAAQQp2QT9xQcAIai0AADoAKSACIAFBEnZBP3FBwAhqLQAAOgAlIAIgAUEIdkE/cUHACGotAAA6ACQgAiAHQRB2QT9xQcAIai0AADoAICACIA9BFHZBD3EgD0EEdkEwcXJBwAhqLQAAOgA6IAIgD0EGdkEDcSAGQRZ2QTxxckHACGotAAA6ADcgAiAGQQx2QTBxIAZBHHZyQcAIai0AADoANiACIAZBAnRBPHEgBkEOdkEDcXJBwAhqLQAAOgAzIAIgBkHwAXFBBHYgBUEUdkEwcXJBwAhqLQAAOgAyIAIgBUEWdkEDcSAFQQZ2QTxxckHACGotAAA6AC8gAiAFQQR0QTBxIAVBDHZBD3FyQcAIai0AADoALiACIABBDnZBPHEgAEEednJBwAhqLQAAOgArIAIgAEEUdkEPcSAAQQR2QTBxckHACGotAAA6ACogAiAAQQZ2QQNxIAFBFnZBPHFyQcAIai0AADoAJyACIAFBDHZBMHEgAUEcdnJBwAhqLQAAOgAmIAIgAUECdEE8cSABQQ52QQNxckHACGotAAA6ACMgAiABQfABcUEEdiAHQRR2QTBxckHACGotAAA6ACIgAiAHQRZ2QQNxIAdBBnZBPHFyQcAIai0AADoAHyACIARBBHRBMHEgB0EMdkEPcXJBwAhqLQAAOgAeCyACQQA6ADwLC4YGAQZ/IwBB4ABrIgMkAEEAIQQgAEGQK2pBADoAACADQSQ6AEYgAyABQQpuIgBBMGo6AEQgA0Gk5ISjAjYCQCADIABB9gFsIAFqQTByOgBFIANBAC0AgCsiAUECdkHACGotAAA6AEcgA0EALQCCKyIAQT9xQcAIai0AADoASiADQQAtAIMrIgVBAnZBwAhqLQAAOgBLIANBAC0AhSsiBkE/cUHACGotAAA6AE4gA0EALQCBKyIHQQR2IAFBBHRBMHFyQcAIai0AADoASCADIABBBnYgB0ECdEE8cXJBwAhqLQAAOgBJIANBAC0AhCsiAUEEdiAFQQR0QTBxckHACGotAAA6AEwgAyAGQQZ2IAFBAnRBPHFyQcAIai0AADoATSADQQAtAIYrIgFBAnZBwAhqLQAAOgBPIANBAC0AiCsiAEE/cUHACGotAAA6AFIgA0EALQCJKyIFQQJ2QcAIai0AADoAUyADQQAtAIsrIgZBP3FBwAhqLQAAOgBWIANBAC0AjCsiB0ECdkHACGotAAA6AFcgA0EALQCHKyIIQQR2IAFBBHRBMHFyQcAIai0AADoAUCADIABBBnYgCEECdEE8cXJBwAhqLQAAOgBRIANBAC0AiisiAUEEdiAFQQR0QTBxckHACGotAAA6AFQgAyAGQQZ2IAFBAnRBPHFyQcAIai0AADoAVSADQQAtAI0rIgFBBHYgB0EEdEEwcXJBwAhqLQAAOgBYIANBADoAXSADQQAtAI4rIgBBP3FBwAhqLQAAOgBaIANBAC0AjysiBUECdkHACGotAAA6AFsgAyAAQQZ2IAFBAnRBPHFyQcAIai0AADoAWSADIAVBBHRBMHFBwAhqLQAAOgBcQZArIANBwABqIAMgAhABA0AgBEGAK2ogAyAEaiIBLQAAOgAAIARBgStqIAFBAWotAAA6AAAgBEGCK2ogAUECai0AADoAACAEQYMraiABQQNqLQAAOgAAIARBhCtqIAFBBGotAAA6AAAgBEEFaiIEQTxHDQALIANB4ABqJAALhwECAX8IfiMAQcAAayIBJAAgAEG8K2pBADoAAEG8K0GAKyABQQEQAUEAKQOkKyECIAEpAyQhA0EAKQOcKyEEIAEpAxwhBUEAKQOsKyEGIAEpAywhB0EAKQO0KyEIIAEpAzQhCSABQcAAaiQAIAUgBFIgAyACUmogByAGUmpBf0EAIAkgCFIbRgsLxyICAEGACAvwAQIEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQQAAAAAAAAAaHByT0JuYWVsb2hlU3JlZER5cmN0YnVvAAAAAAAAAAAuL0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5AAAAAAAAAAAAAAAAAAAAAEBAQEBAQEBAQEBAQEBAAAE2Nzg5Ojs8PT4/QEBAQEBAQAIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobQEBAQEBAHB0eHyAhIiMkJSYnKCkqKywtLi8wMTIzNDVAQEBAQABB8AkLyCCmCzHRrLXfmNty/S+33xrQ7a/huJZ+JmpFkHy6mX8s8UeZoST3bJGz4vIBCBb8joXYIGljaU5XcaP+WKR+PZP0j3SVDVi2jnJYzYtx7koVgh2kVHu1WVrCOdUwnBNg8iojsNHF8IVgKBh5QcrvONu4sNx5jg4YOmCLDp5sPooesMF3FdcnSzG92i+veGBcYFXzJVXmlKtVqmKYSFdAFOhjajnKVbYQqyo0XMy0zuhBEa+GVKGT6XJ8ERTusyq8b2Ndxakr9jEYdBY+XM4ek4ebM7rWr1zPJGyBUzJ6d4aVKJhIjzuvuUtrG+i/xJMhKGbMCdhhkakh+2CsfEgygOxdXV2E77F1hekCIybciBtl64E+iSPFrJbT829tDzlC9IOCRAsuBCCEpErwyGlemx+eQmjGIZps6fZhnAxn8IjTq9KgUWpoL1TYKKcPlqMzUatsC+9u5Dt6E1DwO7qYKvt+HWXxoXYBrzk+WcpmiA5DghmG7oy0n29Fw6WEfb5eizvYdW/gcyDBhZ9EGkCmasFWYqrTTgZ3PzZy3/4bPQKbQiTX0DdIEgrQ0+oP25vA8UnJclMHexuZgNh51CX33uj2GlD+4ztMeba94GyXugbABLZPqcHEYJ9Awp5cXmMkahmvb/totVNsPuuyORNv7FI7H1H8bSyVMJtERYHMCb1erwTQ4779SjPeBygPZrNLLhlXqMvAD3TIRTlfC9Lb+9O5vcB5VQoyYBrGAKHWeXIsQP4ln2fMox/7+OmljvgiMtvfFnU8FWth/cgeUC+rUgWt+rU9MmCHI/1IezFTgt8APrtXXJ6gjG/KLlaHGttpF9/2qELVw/9+KMYyZ6xzVU+MsCdbachYyrtdo//hoBHwuJg9+hC4gyH9bLX8SlvT0S155FOaZUX4trxJjtKQl/tL2vLd4TN+y6RBE/ti6MbkztrKIO8BTHc2/p5+0LQf8StN2tuVmJGQrnGOreqg1ZNr0NGO0OAlx68vWzyOt5R1jvvi9o9kKxLyEriIiBzwDZCgXq1PHMOPaJHxz9GtwaizGCIvL3cXDr7+LXXqoR8Ciw/MoOXodG+11vOsGJniic7gT6i0t+AT/YE7xHzZqK3SZqJfFgV3lYAUc8yTdxQaIWUgreaG+rV39UJUx881nfsMr83roIk+e9MbQdZJfh6uLQ4lAF6zcSC7AGgir+C4V5s2ZCQeuQnwHZFjVaqm31mJQ8F4f1Na2aJbfSDFueUCdgMmg6nPlWJoGcgRQUpzTsotR7NKqRR7UgBRGxUpU5o/Vw/W5MabvHakYCsAdOaBtW+6CB/pG1dr7JbyFdkNKiFlY7a2+bnnLgU0/2RWhcVdLbBToY+fqZlHughqB4Vu6XB6S0Qps7UuCXXbIyYZxLCmbq1936dJuGDunGay7Y9xjKrs/xeaaWxSZFbhnrHCpQI2GSlMCXVAE1mgPjoY5JqYVD9lnUJb1uSPa9Y/95kHnNKh9TDo7+Y4LU3BXSXwhiDdTCbrcITG6YJjXsweAj9raAnJ77o+FBiXPKFwamuENX9ohuKgUgVTnLc3B1CqHIQHPlyu3n/sRH2OuPIWVzfaOrANDFDwBB8c8P+zAAIa9QyusnS1PFh6gyW9IQnc+ROR0fYvqXxzRzKUAUf1IoHl5Trc2sI3NHa1yKfd85pGYUSpDgPQDz7HyOxBHnWkmc044i8O6juhu4AyMbM+GDiLVE4IuW1PAw1Cb78ECvaQErgseXyXJHKweVavia+8H3ea3hAIk9kSrouzLj/P3B9yElUkcWsu5t0aUIfNhJ8YR1h6F9oIdLyan7yMfUvpOux67PodhdtmQwlj0sNkxEcYHO8I2RUyNztD3Ra6wiRDTaESUcRlKgIAlFDd5DoTnvjfcVVOMRDWd6yBmxkRX/FWNQRrx6PXOxgRPAmlJFnt5o/y+vvxlyy/up5uPBUecEXjhrFv6eoKXg6Gsyo+WhznH3f6Bj1OudxlKQ8d55nWiT6AJchmUnjJTC5qsxCcug4Vxnjq4pRTPPyl9C0KHqdO9/I9Kx02DyY5GWB5whkIpyNSthIT927+retmH8PqlUW844PIe6bRN3+xKP+MAe/dMsOlWmy+hSFYZQKYq2gPpc7uO5Uv26197yqEL25bKLYhFXBhByl1R93sEBWfYTCozBOWvWHrHv40A89jA6qQXHO1OaJwTAuentUU3qrLvIbM7qcsYmCrXKucboTzsq8ei2TK8L0ZuWkjoFC7WmUyWmhAs7QqPNXpnjH3uCHAGQtUm5mgX4d+mfeVqH09YpqIN/h3LeOXX5PtEYESaBYpiDUO1h/mx6Hf3paZulh4pYT1V2NyIhv/w4OblkbCGusKs81UMC5T5EjZjygxvG3v8utY6v/GNGHtKP5zPHzu2RRKXeO3ZOgUXRBC4BM+ILbi7kXqq6qjFU9s29BPy/pC9ELHtbtq7x07T2UFIc1Bnnke2MdNhYZqR0vkUGKBPfKhYs9GJo1boIOI/KO2x8HDJBV/knTLaQuKhEeFspJWAL9bCZ1IGa10sWIUAA6CIyqNQljq9VUMPvStHWFwPyOS8HIzQX6TjfHsX9bbOyJsWTfefGB07sun8oVAbjJ3zoSAB6aeUPgZVdjv6DWX2WGqp2mpwgYMxfyrBFrcyguALnpEnoQ0RcMFZ9X9yZ4eDtPbc9vNiFUQedpfZ0BDZ+NlNMTF2Dg+cZ74KD0g/23x5yE+FUo9sI8rn+Pm962D22haPen3QIGUHCZM9jQpaZT3IBVB99QCdi5r9LxoAKLUcSQI1Gr0IDO31LdDr2EAUC72OR5GRSSXdE8hFECIi78d/JVNr5G1ltPd9HBFL6Bm7Am8v4WXvQPQbax/BIXLMbMn65ZBOf1V5kcl2poKyqsleFAo9CkEU9qGLAr7bbbpYhTcaABpSNekwA5o7o2hJ6L+P0+MrYfoBuCMtbbW9Hp8Hs6q7F8305mjeM5CKmtANZ7+ILmF89mr1znui04SO/f6yR1WGG1LMWajJrKX4+p0+m46MkNb3ffnQWj7IHjKTvUK+5ez/tisVkBFJ5VIujo6U1WHjYMgt6lr/kuVltC8Z6hVWJoVoWMpqcwz2+GZVkoqpvklMT8cfvRefDEpkALo+P1wLycEXBW7gOMsKAVIFcGVIm3G5D8TwUjchg/H7sn5Bw8fBEGkeUdAF26IXetRXzLRwJvVj8G88mQ1EUE0eHslYJwqYKPo+N8bbGMfwrQSDp4y4QLRT2avFYHRyuCVI2vhkj4zYgskOyK5vu4OorKFmQ265owMct4o96ItRXgS0P2Ut5ViCH1k8PXM52+jSVT6SH2HJ/2dwx6NPvNBY0cKdP8umatubzo3/fj0YNwSqPjd66FM4RuZDWtu2xBVe8Y3LGdtO9RlJwTo0NzHDSnxo/8AzJIPObUL7Q9p+597Zpx9284Lz5Ggo14V2YgvE7skrVtRv3mUe+vWO3azLjk3eVkRzJfiJoAtMS70p61CaDsrasbMTHUSHPEueDdCEmrnUZK35ruhBlBj+0sYEGsa+u3KEdi9JT3Jw+HiWRZCRIYTEgpu7AzZKuqr1U5nr2RfqIbaiOm/vv7D5GRXgLydhsD38Ph7eGBNYANgRoP90bAfOPYErkV3zPw21zNrQoNxqx7wh0GAsF9eADy+V6B3JK7ovZlCRlVhLli/j/RYTqL93fI473T0wr2Jh8P5ZlN0jrPIVfJ1tLnZ/EZhJut6hN8di3kOaoTilV+RjlluRnBXtCCRVdWMTN4CyeGsC7nQBYK7SGKoEZ6pdHW2GX+3Cdyp4KEJLWYzRjLEAh9a6Iy+8AkloJlKEP5uHR09uRrfpKULD/KGoWnxaCiD2rfc/gY5V5vO4qFSf81PAV4RUPqDBqfEtQKgJ9DmDSeM+JpBhj93Bkxgw7UGqGEoehfw4Ib1wKpYYABifdww157mEWPqOCOU3cJTNBbCwlbuy7vetryQoX3863YdWc4J5AVviAF8Sz0KcjkkfJJ8X3LjhrmdTXK0W8Ea/Lie03hVVO21pfwI03w92MQPrU1e71Ae+OZhsdkUhaI8E1Fs58fVb8RO4VbOvyo2N8jG3TQymtcSgmOSjvoOZ+AAYEA3zjk6z/X60zd3wqsbLcVanmewXEI3o09AJ4LTvpu8mZ2OEdUVcw+/fhwt1nvEAMdrG4y3RZChIb6xbrK0bjZqL6tIV3lulLzSdqPGyMJJZe74D1N93o1GHQpz1cZN0EzbuzkpUEa6qegmlawE416+8NX6oZpRLWrijO9jIu6GmrjCicD2LiRDqgMepaTQ8py6YcCDTWrpm1AV5Y/WW2S6+aImKOE6OqeGlalL6WJV79PvL8fa91L3aW8EP1kK+ncVqeSAAYawh63mCZuT5T47Wv2Q6ZfXNJ7Zt/AsUYsrAjqs1ZZ9pn0B1j7P0SgtfXzPJZ8fm7jyrXK01lpM9Yhacawp4OalGeD9rLBHm/qT7Y3E0+jMVzsoKWbV+CguE3mRAV94VWB17UQOlveMXtPj1G0FFbpt9IglYaEDvfBkBRWe68OiV5A87BonlyoHOqmbbT8b9SFjHvtmnPUZ89wmKNkzdfX9VbGCNFYDuzy6ihF3USj42QrCZ1HMq1+SrcxRF+hNjtwwOGJYnTeR+SCTwpB66s57PvtkziFRMr5Pd37jtqhGPSnDaVPeSIDmE2QQCK6iJLJt3f0thWlmIQcJCkaas93ARWTP3mxYrsggHN33vltAjVgbfwHSzLvjtGt+aqLdRf9ZOkQKNT7VzbS8qM7qcruEZPquEmaNR288v2Pkm9KeXS9UG3fCrnBjTvaNDQ50VxNb53EWcvhdfVOvCMtAQMzitE5qRtI0hK8VASgEsOEdOpiVtJ+4Bkigbs6COz9vgqsgNUsdGgH4J3InsWAVYdw/k+creTq7vSVFNOE5iKBLec5Rt8kyL8m6H6B+yBzg9tHHvMMRAc/HquihSYeQGpq9T9TL3trQONoK1SrDOQNnNpHGfDH5jU8rseC3WZ73Orv1Q/8Z1fKcRdknLCKXvyr85hVx/JEPJRWUm2GT5frrnLbOWWSowtGouhJeB8G2DGoF42VQ0hBCpAPLDm7s4DvbmBa+oJhMZOl4MjKVH5/fktPgKzSg0x7ycYlBdAobjDSjSyBxvsXYMnbDjZ813y4vmZtHbwvmHfHjD1TaTOWR2Noez3lizm9+Ps1msRgWBR0s/cXSj4SZIvv2V/Mj9SN2MqYxNaiTAs3MVmKB8Ky163ValzYWbsxz0oiSYpbe0Em5gRuQUEwUVsZxvcfG5goUejIG0OFFmnvyw/1TqskAD6hi4r8lu/bSvTUFaRJxIgIEsnzPy7YrnHbNwD4RU9PjQBZgvas48K1HJZwgOLp2zkb3xaGvd2BgdSBO/suF2I3oirD5qnp+qvlMXMJIGYyK+wLkasMB+eHr1mn41JCg3lymLSUJP5/mCMIyYU63W+J3zuPfj1fmcsM6iGo/JNMIo4UuihkTRHNwAyI4CaTQMZ8pmPouCIlsTuzmIShFdxPQOM9mVL5sDOk0tymswN1QfMm11YQ/FwlHtdnVFpIb+3mJ\";\n    var hash$2 = \"497b89b2\";\n    var wasmJson$2 = {\n    \tname: name$2,\n    \tdata: data$2,\n    \thash: hash$2\n    };\n\n    function bcryptInternal(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { costFactor, password, salt } = options;\n            const bcryptInterface = yield WASMInterface(wasmJson$2, 0);\n            bcryptInterface.writeMemory(getUInt8Buffer(salt), 0);\n            const passwordBuffer = getUInt8Buffer(password);\n            bcryptInterface.writeMemory(passwordBuffer, 16);\n            const shouldEncode = options.outputType === 'encoded' ? 1 : 0;\n            bcryptInterface.getExports().bcrypt(passwordBuffer.length, costFactor, shouldEncode);\n            const memory = bcryptInterface.getMemory();\n            if (options.outputType === 'encoded') {\n                return intArrayToString(memory, 60);\n            }\n            if (options.outputType === 'hex') {\n                const digestChars = new Uint8Array(24 * 2);\n                return getDigestHex(digestChars, memory, 24);\n            }\n            // return binary format\n            // the data is copied to allow GC of the original memory buffer\n            return memory.slice(0, 24);\n        });\n    }\n    const validateOptions = (options) => {\n        if (!options || typeof options !== 'object') {\n            throw new Error('Invalid options parameter. It requires an object.');\n        }\n        if (!Number.isInteger(options.costFactor) || options.costFactor < 4 || options.costFactor > 31) {\n            throw new Error('Cost factor should be a number between 4 and 31');\n        }\n        options.password = getUInt8Buffer(options.password);\n        if (options.password.length < 1) {\n            throw new Error('Password should be at least 1 byte long');\n        }\n        if (options.password.length > 72) {\n            throw new Error('Password should be at most 72 bytes long');\n        }\n        options.salt = getUInt8Buffer(options.salt);\n        if (options.salt.length !== 16) {\n            throw new Error('Salt should be 16 bytes long');\n        }\n        if (options.outputType === undefined) {\n            options.outputType = 'encoded';\n        }\n        if (!['hex', 'binary', 'encoded'].includes(options.outputType)) {\n            throw new Error(`Insupported output type ${options.outputType}. Valid values: ['hex', 'binary', 'encoded']`);\n        }\n    };\n    /**\n     * Calculates hash using the bcrypt password-hashing function\n     * @returns Computed hash\n     */\n    function bcrypt(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            validateOptions(options);\n            return bcryptInternal(options);\n        });\n    }\n    const validateHashCharacters = (hash) => {\n        if (!/^\\$2[axyb]\\$[0-3][0-9]\\$[./A-Za-z0-9]{53}$/.test(hash)) {\n            return false;\n        }\n        if (hash[4] === '0' && parseInt(hash[5], 10) < 4) {\n            return false;\n        }\n        if (hash[4] === '3' && parseInt(hash[5], 10) > 1) {\n            return false;\n        }\n        return true;\n    };\n    const validateVerifyOptions = (options) => {\n        if (!options || typeof options !== 'object') {\n            throw new Error('Invalid options parameter. It requires an object.');\n        }\n        if (options.hash === undefined || typeof options.hash !== 'string') {\n            throw new Error('Hash should be specified');\n        }\n        if (options.hash.length !== 60) {\n            throw new Error('Hash should be 60 bytes long');\n        }\n        if (!validateHashCharacters(options.hash)) {\n            throw new Error('Invalid hash');\n        }\n        options.password = getUInt8Buffer(options.password);\n        if (options.password.length < 1) {\n            throw new Error('Password should be at least 1 byte long');\n        }\n        if (options.password.length > 72) {\n            throw new Error('Password should be at most 72 bytes long');\n        }\n    };\n    /**\n     * Verifies password using bcrypt password-hashing function\n     * @returns True if the encoded hash matches the password\n     */\n    function bcryptVerify(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            validateVerifyOptions(options);\n            const { hash, password } = options;\n            const bcryptInterface = yield WASMInterface(wasmJson$2, 0);\n            bcryptInterface.writeMemory(getUInt8Buffer(hash), 0);\n            const passwordBuffer = getUInt8Buffer(password);\n            bcryptInterface.writeMemory(passwordBuffer, 60);\n            return !!bcryptInterface.getExports().bcrypt_verify(passwordBuffer.length);\n        });\n    }\n\n    var name$1 = \"whirlpool\";\n    var data$1 = \"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\";\n    var hash$1 = \"dba12019\";\n    var wasmJson$1 = {\n    \tname: name$1,\n    \tdata: data$1,\n    \thash: hash$1\n    };\n\n    const mutex$1 = new Mutex();\n    let wasmCache$1 = null;\n    /**\n     * Calculates Whirlpool hash\n     * @param data Input data (string, Buffer or TypedArray)\n     * @returns Computed hash as a hexadecimal string\n     */\n    function whirlpool(data) {\n        if (wasmCache$1 === null) {\n            return lockedCreate(mutex$1, wasmJson$1, 64)\n                .then((wasm) => {\n                wasmCache$1 = wasm;\n                return wasmCache$1.calculate(data);\n            });\n        }\n        try {\n            const hash = wasmCache$1.calculate(data);\n            return Promise.resolve(hash);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    /**\n     * Creates a new Whirlpool hash instance\n     */\n    function createWhirlpool() {\n        return WASMInterface(wasmJson$1, 64).then((wasm) => {\n            wasm.init();\n            const obj = {\n                init: () => { wasm.init(); return obj; },\n                update: (data) => { wasm.update(data); return obj; },\n                digest: (outputType) => wasm.digest(outputType),\n                save: () => wasm.save(),\n                load: (data) => { wasm.load(data); return obj; },\n                blockSize: 64,\n                digestSize: 64,\n            };\n            return obj;\n        });\n    }\n\n    var name = \"sm3\";\n    var data = \"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\";\n    var hash = \"56515712\";\n    var wasmJson = {\n    \tname: name,\n    \tdata: data,\n    \thash: hash\n    };\n\n    const mutex = new Mutex();\n    let wasmCache = null;\n    /**\n     * Calculates SM3 hash\n     * @param data Input data (string, Buffer or TypedArray)\n     * @returns Computed hash as a hexadecimal string\n     */\n    function sm3(data) {\n        if (wasmCache === null) {\n            return lockedCreate(mutex, wasmJson, 32)\n                .then((wasm) => {\n                wasmCache = wasm;\n                return wasmCache.calculate(data);\n            });\n        }\n        try {\n            const hash = wasmCache.calculate(data);\n            return Promise.resolve(hash);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    /**\n     * Creates a new SM3 hash instance\n     */\n    function createSM3() {\n        return WASMInterface(wasmJson, 32).then((wasm) => {\n            wasm.init();\n            const obj = {\n                init: () => { wasm.init(); return obj; },\n                update: (data) => { wasm.update(data); return obj; },\n                digest: (outputType) => wasm.digest(outputType),\n                save: () => wasm.save(),\n                load: (data) => { wasm.load(data); return obj; },\n                blockSize: 64,\n                digestSize: 32,\n            };\n            return obj;\n        });\n    }\n\n    exports.adler32 = adler32;\n    exports.argon2Verify = argon2Verify;\n    exports.argon2d = argon2d;\n    exports.argon2i = argon2i;\n    exports.argon2id = argon2id;\n    exports.bcrypt = bcrypt;\n    exports.bcryptVerify = bcryptVerify;\n    exports.blake2b = blake2b;\n    exports.blake2s = blake2s;\n    exports.blake3 = blake3;\n    exports.crc32 = crc32;\n    exports.crc32c = crc32c;\n    exports.createAdler32 = createAdler32;\n    exports.createBLAKE2b = createBLAKE2b;\n    exports.createBLAKE2s = createBLAKE2s;\n    exports.createBLAKE3 = createBLAKE3;\n    exports.createCRC32 = createCRC32;\n    exports.createCRC32C = createCRC32C;\n    exports.createHMAC = createHMAC;\n    exports.createKeccak = createKeccak;\n    exports.createMD4 = createMD4;\n    exports.createMD5 = createMD5;\n    exports.createRIPEMD160 = createRIPEMD160;\n    exports.createSHA1 = createSHA1;\n    exports.createSHA224 = createSHA224;\n    exports.createSHA256 = createSHA256;\n    exports.createSHA3 = createSHA3;\n    exports.createSHA384 = createSHA384;\n    exports.createSHA512 = createSHA512;\n    exports.createSM3 = createSM3;\n    exports.createWhirlpool = createWhirlpool;\n    exports.createXXHash128 = createXXHash128;\n    exports.createXXHash3 = createXXHash3;\n    exports.createXXHash32 = createXXHash32;\n    exports.createXXHash64 = createXXHash64;\n    exports.keccak = keccak;\n    exports.md4 = md4;\n    exports.md5 = md5;\n    exports.pbkdf2 = pbkdf2;\n    exports.ripemd160 = ripemd160;\n    exports.scrypt = scrypt;\n    exports.sha1 = sha1;\n    exports.sha224 = sha224;\n    exports.sha256 = sha256;\n    exports.sha3 = sha3;\n    exports.sha384 = sha384;\n    exports.sha512 = sha512;\n    exports.sm3 = sm3;\n    exports.whirlpool = whirlpool;\n    exports.xxhash128 = xxhash128;\n    exports.xxhash3 = xxhash3;\n    exports.xxhash32 = xxhash32;\n    exports.xxhash64 = xxhash64;\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX2NsaWVudCkvLi9ub2RlX21vZHVsZXMvLnBucG0vaGFzaC13YXNtQDQuMTEuMC9ub2RlX21vZHVsZXMvaGFzaC13YXNtL2Rpc3QvaW5kZXgudW1kLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJLEtBQTREO0FBQ2hFLElBQUksQ0FDeUc7QUFDN0csQ0FBQyw4QkFBOEI7O0FBRS9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQywrREFBK0QsaUJBQWlCO0FBQ2hIO0FBQ0Esd0NBQXdDLE1BQU0sK0JBQStCLFlBQVk7QUFDekYsdUNBQXVDLE1BQU0sbUNBQW1DLFlBQVk7QUFDNUYsb0NBQW9DO0FBQ3BDO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsVUFBVTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdCQUFnQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0JBQWdCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQix3QkFBd0I7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsVUFBVTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixFQUFFLEVBQUUsRUFBRTtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLFNBQVM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QixvQkFBb0I7QUFDcEIsaUJBQWlCO0FBQ2pCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtFQUFrRSxlQUFlLGFBQWEsYUFBYTtBQUMzRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGlCQUFpQixhQUFhO0FBQzVELG9DQUFvQyxtQkFBbUIsYUFBYTtBQUNwRTtBQUNBO0FBQ0Esa0NBQWtDLGlCQUFpQixhQUFhO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLG9DQUFvQyxtQkFBbUIsYUFBYTtBQUNwRTtBQUNBO0FBQ0Esa0NBQWtDLGlCQUFpQixhQUFhO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLG9DQUFvQyxtQkFBbUIsYUFBYTtBQUNwRTtBQUNBO0FBQ0Esa0NBQWtDLGlCQUFpQixhQUFhO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLG9DQUFvQyxtQkFBbUIsYUFBYTtBQUNwRTtBQUNBO0FBQ0Esa0NBQWtDLGlCQUFpQixhQUFhO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsYUFBYSxhQUFhO0FBQ3hELG9DQUFvQyxtQkFBbUIsYUFBYTtBQUNwRTtBQUNBO0FBQ0Esa0NBQWtDLGlCQUFpQixhQUFhO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0EsZ0JBQWdCLFlBQVk7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixZQUFZO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGVBQWU7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsUUFBUTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLGdCQUFnQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsVUFBVTtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RCxtQkFBbUI7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esb0JBQW9CLGtEQUFrRDtBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQsbUJBQW1CO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esb0JBQW9CLDZCQUE2QjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQsbUJBQW1CO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxvREFBb0QsR0FBRztBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGlCQUFpQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsYUFBYSxhQUFhO0FBQ3hELG9DQUFvQyxtQkFBbUIsYUFBYTtBQUNwRTtBQUNBO0FBQ0Esa0NBQWtDLGlCQUFpQixhQUFhO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsYUFBYSxhQUFhO0FBQ3hELG9DQUFvQyxtQkFBbUIsYUFBYTtBQUNwRTtBQUNBO0FBQ0Esa0NBQWtDLGlCQUFpQixhQUFhO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtYXV0aC1maXJlYmFzZS8uL25vZGVfbW9kdWxlcy8ucG5wbS9oYXNoLXdhc21ANC4xMS4wL25vZGVfbW9kdWxlcy9oYXNoLXdhc20vZGlzdC9pbmRleC51bWQuanM/NWZlNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIGhhc2gtd2FzbSAoaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGFzaC13YXNtKVxuICogKGMpIERhbmkgQmlyb1xuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBmYWN0b3J5KGV4cG9ydHMpIDpcbiAgICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWydleHBvcnRzJ10sIGZhY3RvcnkpIDpcbiAgICAoZ2xvYmFsID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6IGdsb2JhbCB8fCBzZWxmLCBmYWN0b3J5KGdsb2JhbC5oYXNod2FzbSA9IHt9KSk7XG59KSh0aGlzLCAoZnVuY3Rpb24gKGV4cG9ydHMpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXHJcblxyXG4gICAgUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbiAgICBwdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG4gICAgVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxyXG4gICAgUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbiAgICBBTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbiAgICBJTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cclxuICAgIExPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbiAgICBPVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcbiAgICBQRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxyXG4gICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuICAgIC8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlLCBTdXBwcmVzc2VkRXJyb3IsIFN5bWJvbCAqL1xyXG5cclxuXHJcbiAgICBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICB0eXBlb2YgU3VwcHJlc3NlZEVycm9yID09PSBcImZ1bmN0aW9uXCIgPyBTdXBwcmVzc2VkRXJyb3IgOiBmdW5jdGlvbiAoZXJyb3IsIHN1cHByZXNzZWQsIG1lc3NhZ2UpIHtcclxuICAgICAgICB2YXIgZSA9IG5ldyBFcnJvcihtZXNzYWdlKTtcclxuICAgICAgICByZXR1cm4gZS5uYW1lID0gXCJTdXBwcmVzc2VkRXJyb3JcIiwgZS5lcnJvciA9IGVycm9yLCBlLnN1cHByZXNzZWQgPSBzdXBwcmVzc2VkLCBlO1xyXG4gICAgfTtcblxuICAgIGNsYXNzIE11dGV4IHtcbiAgICAgICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgICAgICB0aGlzLm11dGV4ID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgbG9jaygpIHtcbiAgICAgICAgICAgIGxldCBiZWdpbiA9ICgpID0+IHsgfTtcbiAgICAgICAgICAgIHRoaXMubXV0ZXggPSB0aGlzLm11dGV4LnRoZW4oKCkgPT4gbmV3IFByb21pc2UoYmVnaW4pKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgYmVnaW4gPSByZXM7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBkaXNwYXRjaChmbikge1xuICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB1bmxvY2sgPSB5aWVsZCB0aGlzLmxvY2soKTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geWllbGQgUHJvbWlzZS5yZXNvbHZlKGZuKCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgdW5sb2NrKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBpbXBvcnQvcHJlZmVyLWRlZmF1bHQtZXhwb3J0ICovXG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tYml0d2lzZSAqL1xuICAgIHZhciBfYTtcbiAgICBmdW5jdGlvbiBnZXRHbG9iYWwoKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgICAgICByZXR1cm4gZ2xvYmFsVGhpcztcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFsc1xuICAgICAgICBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKVxuICAgICAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJylcbiAgICAgICAgICAgIHJldHVybiB3aW5kb3c7XG4gICAgICAgIHJldHVybiBnbG9iYWw7XG4gICAgfVxuICAgIGNvbnN0IGdsb2JhbE9iamVjdCA9IGdldEdsb2JhbCgpO1xuICAgIGNvbnN0IG5vZGVCdWZmZXIgPSAoX2EgPSBnbG9iYWxPYmplY3QuQnVmZmVyKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBudWxsO1xuICAgIGNvbnN0IHRleHRFbmNvZGVyID0gZ2xvYmFsT2JqZWN0LlRleHRFbmNvZGVyID8gbmV3IGdsb2JhbE9iamVjdC5UZXh0RW5jb2RlcigpIDogbnVsbDtcbiAgICBmdW5jdGlvbiBpbnRBcnJheVRvU3RyaW5nKGFyciwgbGVuKSB7XG4gICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKC4uLmFyci5zdWJhcnJheSgwLCBsZW4pKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaGV4Q2hhckNvZGVzVG9JbnQoYSwgYikge1xuICAgICAgICByZXR1cm4gKCgoYSAmIDB4RikgKyAoKGEgPj4gNikgfCAoKGEgPj4gMykgJiAweDgpKSkgPDwgNCkgfCAoKGIgJiAweEYpICsgKChiID4+IDYpIHwgKChiID4+IDMpICYgMHg4KSkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB3cml0ZUhleFRvVUludDgoYnVmLCBzdHIpIHtcbiAgICAgICAgY29uc3Qgc2l6ZSA9IHN0ci5sZW5ndGggPj4gMTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaXplOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gaSA8PCAxO1xuICAgICAgICAgICAgYnVmW2ldID0gaGV4Q2hhckNvZGVzVG9JbnQoc3RyLmNoYXJDb2RlQXQoaW5kZXgpLCBzdHIuY2hhckNvZGVBdChpbmRleCArIDEpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBoZXhTdHJpbmdFcXVhbHNVSW50OChzdHIsIGJ1Zikge1xuICAgICAgICBpZiAoc3RyLmxlbmd0aCAhPT0gYnVmLmxlbmd0aCAqIDIpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1Zi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3Qgc3RySW5kZXggPSBpIDw8IDE7XG4gICAgICAgICAgICBpZiAoYnVmW2ldICE9PSBoZXhDaGFyQ29kZXNUb0ludChzdHIuY2hhckNvZGVBdChzdHJJbmRleCksIHN0ci5jaGFyQ29kZUF0KHN0ckluZGV4ICsgMSkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBhbHBoYSA9ICdhJy5jaGFyQ29kZUF0KDApIC0gMTA7XG4gICAgY29uc3QgZGlnaXQgPSAnMCcuY2hhckNvZGVBdCgwKTtcbiAgICBmdW5jdGlvbiBnZXREaWdlc3RIZXgodG1wQnVmZmVyLCBpbnB1dCwgaGFzaExlbmd0aCkge1xuICAgICAgICBsZXQgcCA9IDA7XG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXBsdXNwbHVzICovXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaGFzaExlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgbmliYmxlID0gaW5wdXRbaV0gPj4+IDQ7XG4gICAgICAgICAgICB0bXBCdWZmZXJbcCsrXSA9IG5pYmJsZSA+IDkgPyBuaWJibGUgKyBhbHBoYSA6IG5pYmJsZSArIGRpZ2l0O1xuICAgICAgICAgICAgbmliYmxlID0gaW5wdXRbaV0gJiAweEY7XG4gICAgICAgICAgICB0bXBCdWZmZXJbcCsrXSA9IG5pYmJsZSA+IDkgPyBuaWJibGUgKyBhbHBoYSA6IG5pYmJsZSArIGRpZ2l0O1xuICAgICAgICB9XG4gICAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tcGx1c3BsdXMgKi9cbiAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgdG1wQnVmZmVyKTtcbiAgICB9XG4gICAgY29uc3QgZ2V0VUludDhCdWZmZXIgPSBub2RlQnVmZmVyICE9PSBudWxsXG4gICAgICAgID8gKGRhdGEpID0+IHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBidWYgPSBub2RlQnVmZmVyLmZyb20oZGF0YSwgJ3V0ZjgnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYnVmLmJ1ZmZlciwgYnVmLmJ5dGVPZmZzZXQsIGJ1Zi5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5vZGVCdWZmZXIuaXNCdWZmZXIoZGF0YSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoZGF0YS5idWZmZXIsIGRhdGEuYnl0ZU9mZnNldCwgZGF0YS5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKEFycmF5QnVmZmVyLmlzVmlldyhkYXRhKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShkYXRhLmJ1ZmZlciwgZGF0YS5ieXRlT2Zmc2V0LCBkYXRhLmJ5dGVMZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGRhdGEgdHlwZSEnKTtcbiAgICAgICAgfVxuICAgICAgICA6IChkYXRhKSA9PiB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRleHRFbmNvZGVyLmVuY29kZShkYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcoZGF0YSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoZGF0YS5idWZmZXIsIGRhdGEuYnl0ZU9mZnNldCwgZGF0YS5ieXRlTGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBkYXRhIHR5cGUhJyk7XG4gICAgICAgIH07XG4gICAgY29uc3QgYmFzZTY0Q2hhcnMgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLyc7XG4gICAgY29uc3QgYmFzZTY0TG9va3VwID0gbmV3IFVpbnQ4QXJyYXkoMjU2KTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJhc2U2NENoYXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGJhc2U2NExvb2t1cFtiYXNlNjRDaGFycy5jaGFyQ29kZUF0KGkpXSA9IGk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGVuY29kZUJhc2U2NChkYXRhLCBwYWQgPSB0cnVlKSB7XG4gICAgICAgIGNvbnN0IGxlbiA9IGRhdGEubGVuZ3RoO1xuICAgICAgICBjb25zdCBleHRyYUJ5dGVzID0gbGVuICUgMztcbiAgICAgICAgY29uc3QgcGFydHMgPSBbXTtcbiAgICAgICAgY29uc3QgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuMjsgaSArPSAzKSB7XG4gICAgICAgICAgICBjb25zdCB0bXAgPSAoKGRhdGFbaV0gPDwgMTYpICYgMHhGRjAwMDApXG4gICAgICAgICAgICAgICAgKyAoKGRhdGFbaSArIDFdIDw8IDgpICYgMHhGRjAwKVxuICAgICAgICAgICAgICAgICsgKGRhdGFbaSArIDJdICYgMHhGRik7XG4gICAgICAgICAgICBjb25zdCB0cmlwbGV0ID0gYmFzZTY0Q2hhcnMuY2hhckF0KCh0bXAgPj4gMTgpICYgMHgzRilcbiAgICAgICAgICAgICAgICArIGJhc2U2NENoYXJzLmNoYXJBdCgodG1wID4+IDEyKSAmIDB4M0YpXG4gICAgICAgICAgICAgICAgKyBiYXNlNjRDaGFycy5jaGFyQXQoKHRtcCA+PiA2KSAmIDB4M0YpXG4gICAgICAgICAgICAgICAgKyBiYXNlNjRDaGFycy5jaGFyQXQodG1wICYgMHgzRik7XG4gICAgICAgICAgICBwYXJ0cy5wdXNoKHRyaXBsZXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChleHRyYUJ5dGVzID09PSAxKSB7XG4gICAgICAgICAgICBjb25zdCB0bXAgPSBkYXRhW2xlbiAtIDFdO1xuICAgICAgICAgICAgY29uc3QgYSA9IGJhc2U2NENoYXJzLmNoYXJBdCh0bXAgPj4gMik7XG4gICAgICAgICAgICBjb25zdCBiID0gYmFzZTY0Q2hhcnMuY2hhckF0KCh0bXAgPDwgNCkgJiAweDNGKTtcbiAgICAgICAgICAgIHBhcnRzLnB1c2goYCR7YX0ke2J9YCk7XG4gICAgICAgICAgICBpZiAocGFkKSB7XG4gICAgICAgICAgICAgICAgcGFydHMucHVzaCgnPT0nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgICAgICAgICBjb25zdCB0bXAgPSAoZGF0YVtsZW4gLSAyXSA8PCA4KSArIGRhdGFbbGVuIC0gMV07XG4gICAgICAgICAgICBjb25zdCBhID0gYmFzZTY0Q2hhcnMuY2hhckF0KHRtcCA+PiAxMCk7XG4gICAgICAgICAgICBjb25zdCBiID0gYmFzZTY0Q2hhcnMuY2hhckF0KCh0bXAgPj4gNCkgJiAweDNGKTtcbiAgICAgICAgICAgIGNvbnN0IGMgPSBiYXNlNjRDaGFycy5jaGFyQXQoKHRtcCA8PCAyKSAmIDB4M0YpO1xuICAgICAgICAgICAgcGFydHMucHVzaChgJHthfSR7Yn0ke2N9YCk7XG4gICAgICAgICAgICBpZiAocGFkKSB7XG4gICAgICAgICAgICAgICAgcGFydHMucHVzaCgnPScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJ0cy5qb2luKCcnKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0RGVjb2RlQmFzZTY0TGVuZ3RoKGRhdGEpIHtcbiAgICAgICAgbGV0IGJ1ZmZlckxlbmd0aCA9IE1hdGguZmxvb3IoZGF0YS5sZW5ndGggKiAwLjc1KTtcbiAgICAgICAgY29uc3QgbGVuID0gZGF0YS5sZW5ndGg7XG4gICAgICAgIGlmIChkYXRhW2xlbiAtIDFdID09PSAnPScpIHtcbiAgICAgICAgICAgIGJ1ZmZlckxlbmd0aCAtPSAxO1xuICAgICAgICAgICAgaWYgKGRhdGFbbGVuIC0gMl0gPT09ICc9Jykge1xuICAgICAgICAgICAgICAgIGJ1ZmZlckxlbmd0aCAtPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBidWZmZXJMZW5ndGg7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRlY29kZUJhc2U2NChkYXRhKSB7XG4gICAgICAgIGNvbnN0IGJ1ZmZlckxlbmd0aCA9IGdldERlY29kZUJhc2U2NExlbmd0aChkYXRhKTtcbiAgICAgICAgY29uc3QgbGVuID0gZGF0YS5sZW5ndGg7XG4gICAgICAgIGNvbnN0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyTGVuZ3RoKTtcbiAgICAgICAgbGV0IHAgPSAwO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgICAgICAgICBjb25zdCBlbmNvZGVkMSA9IGJhc2U2NExvb2t1cFtkYXRhLmNoYXJDb2RlQXQoaSldO1xuICAgICAgICAgICAgY29uc3QgZW5jb2RlZDIgPSBiYXNlNjRMb29rdXBbZGF0YS5jaGFyQ29kZUF0KGkgKyAxKV07XG4gICAgICAgICAgICBjb25zdCBlbmNvZGVkMyA9IGJhc2U2NExvb2t1cFtkYXRhLmNoYXJDb2RlQXQoaSArIDIpXTtcbiAgICAgICAgICAgIGNvbnN0IGVuY29kZWQ0ID0gYmFzZTY0TG9va3VwW2RhdGEuY2hhckNvZGVBdChpICsgMyldO1xuICAgICAgICAgICAgYnl0ZXNbcF0gPSAoZW5jb2RlZDEgPDwgMikgfCAoZW5jb2RlZDIgPj4gNCk7XG4gICAgICAgICAgICBwICs9IDE7XG4gICAgICAgICAgICBieXRlc1twXSA9ICgoZW5jb2RlZDIgJiAxNSkgPDwgNCkgfCAoZW5jb2RlZDMgPj4gMik7XG4gICAgICAgICAgICBwICs9IDE7XG4gICAgICAgICAgICBieXRlc1twXSA9ICgoZW5jb2RlZDMgJiAzKSA8PCA2KSB8IChlbmNvZGVkNCAmIDYzKTtcbiAgICAgICAgICAgIHAgKz0gMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYnl0ZXM7XG4gICAgfVxuXG4gICAgY29uc3QgTUFYX0hFQVAgPSAxNiAqIDEwMjQ7XG4gICAgY29uc3QgV0FTTV9GVU5DX0hBU0hfTEVOR1RIID0gNDtcbiAgICBjb25zdCB3YXNtTXV0ZXggPSBuZXcgTXV0ZXgoKTtcbiAgICBjb25zdCB3YXNtTW9kdWxlQ2FjaGUgPSBuZXcgTWFwKCk7XG4gICAgZnVuY3Rpb24gV0FTTUludGVyZmFjZShiaW5hcnksIGhhc2hMZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGxldCB3YXNtSW5zdGFuY2UgPSBudWxsO1xuICAgICAgICAgICAgbGV0IG1lbW9yeVZpZXcgPSBudWxsO1xuICAgICAgICAgICAgbGV0IGluaXRpYWxpemVkID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAodHlwZW9mIFdlYkFzc2VtYmx5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignV2ViQXNzZW1ibHkgaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGVudmlyb25tZW50IScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgd3JpdGVNZW1vcnkgPSAoZGF0YSwgb2Zmc2V0ID0gMCkgPT4ge1xuICAgICAgICAgICAgICAgIG1lbW9yeVZpZXcuc2V0KGRhdGEsIG9mZnNldCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgZ2V0TWVtb3J5ID0gKCkgPT4gbWVtb3J5VmlldztcbiAgICAgICAgICAgIGNvbnN0IGdldEV4cG9ydHMgPSAoKSA9PiB3YXNtSW5zdGFuY2UuZXhwb3J0cztcbiAgICAgICAgICAgIGNvbnN0IHNldE1lbW9yeVNpemUgPSAodG90YWxTaXplKSA9PiB7XG4gICAgICAgICAgICAgICAgd2FzbUluc3RhbmNlLmV4cG9ydHMuSGFzaF9TZXRNZW1vcnlTaXplKHRvdGFsU2l6ZSk7XG4gICAgICAgICAgICAgICAgY29uc3QgYXJyYXlPZmZzZXQgPSB3YXNtSW5zdGFuY2UuZXhwb3J0cy5IYXNoX0dldEJ1ZmZlcigpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1lbW9yeUJ1ZmZlciA9IHdhc21JbnN0YW5jZS5leHBvcnRzLm1lbW9yeS5idWZmZXI7XG4gICAgICAgICAgICAgICAgbWVtb3J5VmlldyA9IG5ldyBVaW50OEFycmF5KG1lbW9yeUJ1ZmZlciwgYXJyYXlPZmZzZXQsIHRvdGFsU2l6ZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgZ2V0U3RhdGVTaXplID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZpZXcgPSBuZXcgRGF0YVZpZXcod2FzbUluc3RhbmNlLmV4cG9ydHMubWVtb3J5LmJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhdGVTaXplID0gdmlldy5nZXRVaW50MzIod2FzbUluc3RhbmNlLmV4cG9ydHMuU1RBVEVfU0laRSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YXRlU2l6ZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBsb2FkV0FTTVByb21pc2UgPSB3YXNtTXV0ZXguZGlzcGF0Y2goKCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgICAgIGlmICghd2FzbU1vZHVsZUNhY2hlLmhhcyhiaW5hcnkubmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYXNtID0gZGVjb2RlQmFzZTY0KGJpbmFyeS5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvbWlzZSA9IFdlYkFzc2VtYmx5LmNvbXBpbGUoYXNtKTtcbiAgICAgICAgICAgICAgICAgICAgd2FzbU1vZHVsZUNhY2hlLnNldChiaW5hcnkubmFtZSwgcHJvbWlzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IG1vZHVsZSA9IHlpZWxkIHdhc21Nb2R1bGVDYWNoZS5nZXQoYmluYXJ5Lm5hbWUpO1xuICAgICAgICAgICAgICAgIHdhc21JbnN0YW5jZSA9IHlpZWxkIFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlKG1vZHVsZSwge1xuICAgICAgICAgICAgICAgIC8vIGVudjoge1xuICAgICAgICAgICAgICAgIC8vICAgZW1zY3JpcHRlbl9tZW1jcHlfYmlnOiAoZGVzdCwgc3JjLCBudW0pID0+IHtcbiAgICAgICAgICAgICAgICAvLyAgICAgY29uc3QgbWVtb3J5QnVmZmVyID0gd2FzbUluc3RhbmNlLmV4cG9ydHMubWVtb3J5LmJ1ZmZlcjtcbiAgICAgICAgICAgICAgICAvLyAgICAgY29uc3QgbWVtVmlldyA9IG5ldyBVaW50OEFycmF5KG1lbW9yeUJ1ZmZlciwgMCk7XG4gICAgICAgICAgICAgICAgLy8gICAgIG1lbVZpZXcuc2V0KG1lbVZpZXcuc3ViYXJyYXkoc3JjLCBzcmMgKyBudW0pLCBkZXN0KTtcbiAgICAgICAgICAgICAgICAvLyAgIH0sXG4gICAgICAgICAgICAgICAgLy8gICBwcmludF9tZW1vcnk6IChvZmZzZXQsIGxlbikgPT4ge1xuICAgICAgICAgICAgICAgIC8vICAgICBjb25zdCBtZW1vcnlCdWZmZXIgPSB3YXNtSW5zdGFuY2UuZXhwb3J0cy5tZW1vcnkuYnVmZmVyO1xuICAgICAgICAgICAgICAgIC8vICAgICBjb25zdCBtZW1WaWV3ID0gbmV3IFVpbnQ4QXJyYXkobWVtb3J5QnVmZmVyLCAwKTtcbiAgICAgICAgICAgICAgICAvLyAgICAgY29uc29sZS5sb2coJ3ByaW50X2ludDMyJywgbWVtVmlldy5zdWJhcnJheShvZmZzZXQsIG9mZnNldCArIGxlbikpO1xuICAgICAgICAgICAgICAgIC8vICAgfSxcbiAgICAgICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIC8vIHdhc21JbnN0YW5jZS5leHBvcnRzLl9zdGFydCgpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgY29uc3Qgc2V0dXBJbnRlcmZhY2UgPSAoKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF3YXNtSW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgeWllbGQgbG9hZFdBU01Qcm9taXNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBhcnJheU9mZnNldCA9IHdhc21JbnN0YW5jZS5leHBvcnRzLkhhc2hfR2V0QnVmZmVyKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgbWVtb3J5QnVmZmVyID0gd2FzbUluc3RhbmNlLmV4cG9ydHMubWVtb3J5LmJ1ZmZlcjtcbiAgICAgICAgICAgICAgICBtZW1vcnlWaWV3ID0gbmV3IFVpbnQ4QXJyYXkobWVtb3J5QnVmZmVyLCBhcnJheU9mZnNldCwgTUFYX0hFQVApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCBpbml0ID0gKGJpdHMgPSBudWxsKSA9PiB7XG4gICAgICAgICAgICAgICAgaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHdhc21JbnN0YW5jZS5leHBvcnRzLkhhc2hfSW5pdChiaXRzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCB1cGRhdGVVSW50OEFycmF5ID0gKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgcmVhZCA9IDA7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHJlYWQgPCBkYXRhLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjaHVuayA9IGRhdGEuc3ViYXJyYXkocmVhZCwgcmVhZCArIE1BWF9IRUFQKTtcbiAgICAgICAgICAgICAgICAgICAgcmVhZCArPSBjaHVuay5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIG1lbW9yeVZpZXcuc2V0KGNodW5rKTtcbiAgICAgICAgICAgICAgICAgICAgd2FzbUluc3RhbmNlLmV4cG9ydHMuSGFzaF9VcGRhdGUoY2h1bmsubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgdXBkYXRlID0gKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIWluaXRpYWxpemVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndXBkYXRlKCkgY2FsbGVkIGJlZm9yZSBpbml0KCknKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgVWludDhCdWZmZXIgPSBnZXRVSW50OEJ1ZmZlcihkYXRhKTtcbiAgICAgICAgICAgICAgICB1cGRhdGVVSW50OEFycmF5KFVpbnQ4QnVmZmVyKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBkaWdlc3RDaGFycyA9IG5ldyBVaW50OEFycmF5KGhhc2hMZW5ndGggKiAyKTtcbiAgICAgICAgICAgIGNvbnN0IGRpZ2VzdCA9IChvdXRwdXRUeXBlLCBwYWRkaW5nID0gbnVsbCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdkaWdlc3QoKSBjYWxsZWQgYmVmb3JlIGluaXQoKScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpbml0aWFsaXplZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHdhc21JbnN0YW5jZS5leHBvcnRzLkhhc2hfRmluYWwocGFkZGluZyk7XG4gICAgICAgICAgICAgICAgaWYgKG91dHB1dFR5cGUgPT09ICdiaW5hcnknKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSBkYXRhIGlzIGNvcGllZCB0byBhbGxvdyBHQyBvZiB0aGUgb3JpZ2luYWwgbWVtb3J5IG9iamVjdFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWVtb3J5Vmlldy5zbGljZSgwLCBoYXNoTGVuZ3RoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldERpZ2VzdEhleChkaWdlc3RDaGFycywgbWVtb3J5VmlldywgaGFzaExlbmd0aCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3Qgc2F2ZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIWluaXRpYWxpemVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignc2F2ZSgpIGNhbiBvbmx5IGJlIGNhbGxlZCBhZnRlciBpbml0KCkgYW5kIGJlZm9yZSBkaWdlc3QoKScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBzdGF0ZU9mZnNldCA9IHdhc21JbnN0YW5jZS5leHBvcnRzLkhhc2hfR2V0U3RhdGUoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGF0ZUxlbmd0aCA9IGdldFN0YXRlU2l6ZSgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1lbW9yeUJ1ZmZlciA9IHdhc21JbnN0YW5jZS5leHBvcnRzLm1lbW9yeS5idWZmZXI7XG4gICAgICAgICAgICAgICAgY29uc3QgaW50ZXJuYWxTdGF0ZSA9IG5ldyBVaW50OEFycmF5KG1lbW9yeUJ1ZmZlciwgc3RhdGVPZmZzZXQsIHN0YXRlTGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAvLyBwcmVmaXggaXMgNCBieXRlcyBmcm9tIFNIQTEgaGFzaCBvZiB0aGUgV0FTTSBiaW5hcnlcbiAgICAgICAgICAgICAgICAvLyBpdCBpcyB1c2VkIHRvIGRldGVjdCBpbmNvbXBhdGlibGUgaW50ZXJuYWwgc3RhdGVzIGJldHdlZW4gZGlmZmVyZW50IHZlcnNpb25zIG9mIGhhc2gtd2FzbVxuICAgICAgICAgICAgICAgIGNvbnN0IHByZWZpeGVkU3RhdGUgPSBuZXcgVWludDhBcnJheShXQVNNX0ZVTkNfSEFTSF9MRU5HVEggKyBzdGF0ZUxlbmd0aCk7XG4gICAgICAgICAgICAgICAgd3JpdGVIZXhUb1VJbnQ4KHByZWZpeGVkU3RhdGUsIGJpbmFyeS5oYXNoKTtcbiAgICAgICAgICAgICAgICBwcmVmaXhlZFN0YXRlLnNldChpbnRlcm5hbFN0YXRlLCBXQVNNX0ZVTkNfSEFTSF9MRU5HVEgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBwcmVmaXhlZFN0YXRlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IGxvYWQgPSAoc3RhdGUpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIShzdGF0ZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbG9hZCgpIGV4cGVjdHMgYW4gVWludDhBcnJheSBnZW5lcmF0ZWQgYnkgc2F2ZSgpJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXRlT2Zmc2V0ID0gd2FzbUluc3RhbmNlLmV4cG9ydHMuSGFzaF9HZXRTdGF0ZSgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXRlTGVuZ3RoID0gZ2V0U3RhdGVTaXplKCk7XG4gICAgICAgICAgICAgICAgY29uc3Qgb3ZlcmFsbExlbmd0aCA9IFdBU01fRlVOQ19IQVNIX0xFTkdUSCArIHN0YXRlTGVuZ3RoO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1lbW9yeUJ1ZmZlciA9IHdhc21JbnN0YW5jZS5leHBvcnRzLm1lbW9yeS5idWZmZXI7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLmxlbmd0aCAhPT0gb3ZlcmFsbExlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEJhZCBzdGF0ZSBsZW5ndGggKGV4cGVjdGVkICR7b3ZlcmFsbExlbmd0aH0gYnl0ZXMsIGdvdCAke3N0YXRlLmxlbmd0aH0pYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghaGV4U3RyaW5nRXF1YWxzVUludDgoYmluYXJ5Lmhhc2gsIHN0YXRlLnN1YmFycmF5KDAsIFdBU01fRlVOQ19IQVNIX0xFTkdUSCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBzdGF0ZSB3YXMgd3JpdHRlbiBieSBhbiBpbmNvbXBhdGlibGUgaGFzaCBpbXBsZW1lbnRhdGlvbicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBpbnRlcm5hbFN0YXRlID0gc3RhdGUuc3ViYXJyYXkoV0FTTV9GVU5DX0hBU0hfTEVOR1RIKTtcbiAgICAgICAgICAgICAgICBuZXcgVWludDhBcnJheShtZW1vcnlCdWZmZXIsIHN0YXRlT2Zmc2V0LCBzdGF0ZUxlbmd0aCkuc2V0KGludGVybmFsU3RhdGUpO1xuICAgICAgICAgICAgICAgIGluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBpc0RhdGFTaG9ydCA9IChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAvLyB3b3JzdCBjYXNlIGlzIDQgYnl0ZXMgLyBjaGFyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhLmxlbmd0aCA8IE1BWF9IRUFQIC8gNDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEuYnl0ZUxlbmd0aCA8IE1BWF9IRUFQO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGxldCBjYW5TaW1wbGlmeSA9IGlzRGF0YVNob3J0O1xuICAgICAgICAgICAgc3dpdGNoIChiaW5hcnkubmFtZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2FyZ29uMic6XG4gICAgICAgICAgICAgICAgY2FzZSAnc2NyeXB0JzpcbiAgICAgICAgICAgICAgICAgICAgY2FuU2ltcGxpZnkgPSAoKSA9PiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdibGFrZTJiJzpcbiAgICAgICAgICAgICAgICBjYXNlICdibGFrZTJzJzpcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlcmUgaXMgYSBrZXkgYXQgYmxha2UyIHRoZW4gY2Fubm90IHNpbXBsaWZ5XG4gICAgICAgICAgICAgICAgICAgIGNhblNpbXBsaWZ5ID0gKGRhdGEsIGluaXRQYXJhbSkgPT4gaW5pdFBhcmFtIDw9IDUxMiAmJiBpc0RhdGFTaG9ydChkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnYmxha2UzJzpcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlcmUgaXMgYSBrZXkgYXQgYmxha2UzIHRoZW4gY2Fubm90IHNpbXBsaWZ5XG4gICAgICAgICAgICAgICAgICAgIGNhblNpbXBsaWZ5ID0gKGRhdGEsIGluaXRQYXJhbSkgPT4gaW5pdFBhcmFtID09PSAwICYmIGlzRGF0YVNob3J0KGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd4eGhhc2g2NCc6IC8vIGNhbm5vdCBzaW1wbGlmeVxuICAgICAgICAgICAgICAgIGNhc2UgJ3h4aGFzaDMnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3h4aGFzaDEyOCc6XG4gICAgICAgICAgICAgICAgICAgIGNhblNpbXBsaWZ5ID0gKCkgPT4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gc2hvcnRoYW5kIGZvciAoaW5pdCArIHVwZGF0ZSArIGRpZ2VzdCkgZm9yIGJldHRlciBwZXJmb3JtYW5jZVxuICAgICAgICAgICAgY29uc3QgY2FsY3VsYXRlID0gKGRhdGEsIGluaXRQYXJhbSA9IG51bGwsIGRpZ2VzdFBhcmFtID0gbnVsbCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghY2FuU2ltcGxpZnkoZGF0YSwgaW5pdFBhcmFtKSkge1xuICAgICAgICAgICAgICAgICAgICBpbml0KGluaXRQYXJhbSk7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZShkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRpZ2VzdCgnaGV4JywgZGlnZXN0UGFyYW0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBidWZmZXIgPSBnZXRVSW50OEJ1ZmZlcihkYXRhKTtcbiAgICAgICAgICAgICAgICBtZW1vcnlWaWV3LnNldChidWZmZXIpO1xuICAgICAgICAgICAgICAgIHdhc21JbnN0YW5jZS5leHBvcnRzLkhhc2hfQ2FsY3VsYXRlKGJ1ZmZlci5sZW5ndGgsIGluaXRQYXJhbSwgZGlnZXN0UGFyYW0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBnZXREaWdlc3RIZXgoZGlnZXN0Q2hhcnMsIG1lbW9yeVZpZXcsIGhhc2hMZW5ndGgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHlpZWxkIHNldHVwSW50ZXJmYWNlKCk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGdldE1lbW9yeSxcbiAgICAgICAgICAgICAgICB3cml0ZU1lbW9yeSxcbiAgICAgICAgICAgICAgICBnZXRFeHBvcnRzLFxuICAgICAgICAgICAgICAgIHNldE1lbW9yeVNpemUsXG4gICAgICAgICAgICAgICAgaW5pdCxcbiAgICAgICAgICAgICAgICB1cGRhdGUsXG4gICAgICAgICAgICAgICAgZGlnZXN0LFxuICAgICAgICAgICAgICAgIHNhdmUsXG4gICAgICAgICAgICAgICAgbG9hZCxcbiAgICAgICAgICAgICAgICBjYWxjdWxhdGUsXG4gICAgICAgICAgICAgICAgaGFzaExlbmd0aCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBuYW1lJGsgPSBcImFkbGVyMzJcIjtcbiAgICB2YXIgZGF0YSRrID0gXCJBR0Z6YlFFQUFBQUJEQU5nQUFGL1lBQUFZQUYvQUFNSEJnQUJBZ0VBQWdVRUFRRUNBZ1lPQW44QlFZQ0pCUXQvQUVHQUNBc0hjQWdHYldWdGIzSjVBZ0FPU0dGemFGOUhaWFJDZFdabVpYSUFBQWxJWVhOb1gwbHVhWFFBQVF0SVlYTm9YMVZ3WkdGMFpRQUNDa2hoYzJoZlJtbHVZV3dBQXcxSVlYTm9YMGRsZEZOMFlYUmxBQVFPU0dGemFGOURZV3hqZFd4aGRHVUFCUXBUVkVGVVJWOVRTVnBGQXdFSzZ3a0dCUUJCZ0FrTENnQkJBRUVCTmdLRUNBdmpDQUVIZjBFQUtBS0VDQ0lCUWYvL0EzRWhBaUFCUVJCMklRTUNRQUpBSUFCQkFVY05BQ0FDUVFBdEFJQUphaUlCUVkrQWZHb2dBU0FCUWZEL0Ewc2JJZ0VnQTJvaUJFRVFkQ0lGUVlDQVBHb2dCU0FFUWZEL0Ewc2JJQUZ5SVFFTUFRc0NRQUpBQWtBQ1FBSkFJQUJCRUVrTkFFR0FDU0VHSUFCQnNDdEpEUUZCZ0FraEJnTkFRUUFoQlFOQUlBWWdCV29pQVNnQ0FDSUVRZjhCY1NBQ2FpSUNJQU5xSUFJZ0JFRUlka0gvQVhGcUlnSnFJQUlnQkVFUWRrSC9BWEZxSWdKcUlBSWdCRUVZZG1vaUFtb2dBaUFCUVFScUtBSUFJZ1JCL3dGeGFpSUNhaUFDSUFSQkNIWkIvd0Z4YWlJQ2FpQUNJQVJCRUhaQi93RnhhaUlDYWlBQ0lBUkJHSFpxSWdKcUlBSWdBVUVJYWlnQ0FDSUVRZjhCY1dvaUFtb2dBaUFFUVFoMlFmOEJjV29pQW1vZ0FpQUVRUkIyUWY4QmNXb2lBbW9nQWlBRVFSaDJhaUlFYWlBRUlBRkJER29vQWdBaUFVSC9BWEZxSWdScUlBUWdBVUVJZGtIL0FYRnFJZ1JxSUFRZ0FVRVFka0gvQVhGcUlnUnFJQVFnQVVFWWRtb2lBbW9oQXlBRlFSQnFJZ1ZCc0N0SERRQUxJQU5COGY4RGNDRURJQUpCOGY4RGNDRUNJQVpCc0N0cUlRWWdBRUhRVkdvaUFFR3ZLMHNOQUFzZ0FFVU5CQ0FBUVE5TERRRU1BZ3NDUUNBQVJRMEFBa0FDUUNBQVFRTnhJZ1VOQUVHQUNTRUJJQUFoQkF3QkN5QUFRWHh4SVFSQkFDRUJBMEFnQWlBQlFZQUphaTBBQUdvaUFpQURhaUVESUFVZ0FVRUJhaUlCUncwQUN5QUZRWUFKYWlFQkN5QUFRUVJKRFFBRFFDQUNJQUV0QUFCcUlnVWdBUzBBQVdvaUJpQUJMUUFDYWlJQUlBRkJBMm90QUFCcUlnSWdBQ0FHSUFVZ0EycHFhbW9oQXlBQlFRUnFJUUVnQkVGOGFpSUVEUUFMQ3lBQ1FZK0FmR29nQWlBQ1FmRC9BMHNiSUFOQjhmOERjRUVRZEhJaEFRd0VDd05BSUFZb0FnQWlBVUgvQVhFZ0Ftb2lCQ0FEYWlBRUlBRkJDSFpCL3dGeGFpSUVhaUFFSUFGQkVIWkIvd0Z4YWlJRWFpQUVJQUZCR0hacUlnUnFJQVFnQmtFRWFpZ0NBQ0lCUWY4QmNXb2lCR29nQkNBQlFRaDJRZjhCY1dvaUJHb2dCQ0FCUVJCMlFmOEJjV29pQkdvZ0JDQUJRUmgyYWlJRWFpQUVJQVpCQ0dvb0FnQWlBVUgvQVhGcUlnUnFJQVFnQVVFSWRrSC9BWEZxSWdScUlBUWdBVUVRZGtIL0FYRnFJZ1JxSUFRZ0FVRVlkbW9pQkdvZ0JDQUdRUXhxS0FJQUlnRkIvd0Z4YWlJRWFpQUVJQUZCQ0haQi93RnhhaUlFYWlBRUlBRkJFSFpCL3dGeGFpSUVhaUFFSUFGQkdIWnFJZ0pxSVFNZ0JrRVFhaUVHSUFCQmNHb2lBRUVQU3cwQUN5QUFSUTBCQ3lBQVFYOXFJUWNDUUNBQVFRTnhJZ1ZGRFFBZ0FFRjhjU0VBSUFVaEJDQUdJUUVEUUNBQ0lBRXRBQUJxSWdJZ0Eyb2hBeUFCUVFGcUlRRWdCRUYvYWlJRURRQUxJQVlnQldvaEJnc2dCMEVEU1EwQUEwQWdBaUFHTFFBQWFpSUJJQVl0QUFGcUlnUWdCaTBBQW1vaUJTQUdRUU5xTFFBQWFpSUNJQVVnQkNBQklBTnFhbXBxSVFNZ0JrRUVhaUVHSUFCQmZHb2lBQTBBQ3dzZ0EwSHgvd053SVFNZ0FrSHgvd053SVFJTElBSWdBMEVRZEhJaEFRdEJBQ0FCTmdLRUNBc3hBUUYvUVFCQkFDZ0NoQWdpQUVFWWRDQUFRWUQrQTNGQkNIUnlJQUJCQ0haQmdQNERjU0FBUVJoMmNuSTJBb0FKQ3dVQVFZUUlDenNBUVFCQkFUWUNoQWdnQUJBQ1FRQkJBQ2dDaEFnaUFFRVlkQ0FBUVlEK0EzRkJDSFJ5SUFCQkNIWkJnUDREY1NBQVFSaDJjbkkyQW9BSkN3c1ZBZ0JCZ0FnTEJBUUFBQUFBUVlRSUN3UUJBQUFBXCI7XG4gICAgdmFyIGhhc2gkayA9IFwiMDJkZGJkMTdcIjtcbiAgICB2YXIgd2FzbUpzb24kayA9IHtcbiAgICBcdG5hbWU6IG5hbWUkayxcbiAgICBcdGRhdGE6IGRhdGEkayxcbiAgICBcdGhhc2g6IGhhc2gka1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBsb2NrZWRDcmVhdGUobXV0ZXgsIGJpbmFyeSwgaGFzaExlbmd0aCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgdW5sb2NrID0geWllbGQgbXV0ZXgubG9jaygpO1xuICAgICAgICAgICAgY29uc3Qgd2FzbSA9IHlpZWxkIFdBU01JbnRlcmZhY2UoYmluYXJ5LCBoYXNoTGVuZ3RoKTtcbiAgICAgICAgICAgIHVubG9jaygpO1xuICAgICAgICAgICAgcmV0dXJuIHdhc207XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IG11dGV4JGwgPSBuZXcgTXV0ZXgoKTtcbiAgICBsZXQgd2FzbUNhY2hlJGwgPSBudWxsO1xuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZXMgQWRsZXItMzIgaGFzaC4gVGhlIHJlc3VsdGluZyAzMi1iaXQgaGFzaCBpcyBzdG9yZWQgaW5cbiAgICAgKiBuZXR3b3JrIGJ5dGUgb3JkZXIgKGJpZy1lbmRpYW4pLlxuICAgICAqXG4gICAgICogQHBhcmFtIGRhdGEgSW5wdXQgZGF0YSAoc3RyaW5nLCBCdWZmZXIgb3IgVHlwZWRBcnJheSlcbiAgICAgKiBAcmV0dXJucyBDb21wdXRlZCBoYXNoIGFzIGEgaGV4YWRlY2ltYWwgc3RyaW5nXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWRsZXIzMihkYXRhKSB7XG4gICAgICAgIGlmICh3YXNtQ2FjaGUkbCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2tlZENyZWF0ZShtdXRleCRsLCB3YXNtSnNvbiRrLCA0KVxuICAgICAgICAgICAgICAgIC50aGVuKCh3YXNtKSA9PiB7XG4gICAgICAgICAgICAgICAgd2FzbUNhY2hlJGwgPSB3YXNtO1xuICAgICAgICAgICAgICAgIHJldHVybiB3YXNtQ2FjaGUkbC5jYWxjdWxhdGUoZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgaGFzaCA9IHdhc21DYWNoZSRsLmNhbGN1bGF0ZShkYXRhKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoaGFzaCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBBZGxlci0zMiBoYXNoIGluc3RhbmNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQWRsZXIzMigpIHtcbiAgICAgICAgcmV0dXJuIFdBU01JbnRlcmZhY2Uod2FzbUpzb24kaywgNCkudGhlbigod2FzbSkgPT4ge1xuICAgICAgICAgICAgd2FzbS5pbml0KCk7XG4gICAgICAgICAgICBjb25zdCBvYmogPSB7XG4gICAgICAgICAgICAgICAgaW5pdDogKCkgPT4geyB3YXNtLmluaXQoKTsgcmV0dXJuIG9iajsgfSxcbiAgICAgICAgICAgICAgICB1cGRhdGU6IChkYXRhKSA9PiB7IHdhc20udXBkYXRlKGRhdGEpOyByZXR1cm4gb2JqOyB9LFxuICAgICAgICAgICAgICAgIGRpZ2VzdDogKG91dHB1dFR5cGUpID0+IHdhc20uZGlnZXN0KG91dHB1dFR5cGUpLFxuICAgICAgICAgICAgICAgIHNhdmU6ICgpID0+IHdhc20uc2F2ZSgpLFxuICAgICAgICAgICAgICAgIGxvYWQ6IChkYXRhKSA9PiB7IHdhc20ubG9hZChkYXRhKTsgcmV0dXJuIG9iajsgfSxcbiAgICAgICAgICAgICAgICBibG9ja1NpemU6IDQsXG4gICAgICAgICAgICAgICAgZGlnZXN0U2l6ZTogNCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgbmFtZSRqID0gXCJibGFrZTJiXCI7XG4gICAgdmFyIGRhdGEkaiA9IFwiQUdGemJRRUFBQUFCRVFSZ0FBRi9ZQUovZndCZ0FYOEFZQUFBQXdvSkFBRUNBd0VDQWdBQkJRUUJBUUlDQmc0Q2Z3RkJzSXNGQzM4QVFZQUlDd2R3Q0FadFpXMXZjbmtDQUE1SVlYTm9YMGRsZEVKMVptWmxjZ0FBQ2toaGMyaGZSbWx1WVd3QUF3bElZWE5vWDBsdWFYUUFCUXRJWVhOb1gxVndaR0YwWlFBR0RVaGhjMmhmUjJWMFUzUmhkR1VBQnc1SVlYTm9YME5oYkdOMWJHRjBaUUFJQ2xOVVFWUkZYMU5KV2tVREFRclRPQWtGQUVHQUNRdnJBZ0lGZndGK0FrQWdBVUVCU0EwQUFrQUNRQUpBUVlBQlFRQW9BdUNLQVNJQ2F5SURJQUZJRFFBZ0FTRUVEQUVMUVFCQkFEWUM0SW9CQWtBZ0FrSC9BRW9OQUNBQ1FlQ0pBV29oQlNBQUlRUkJBQ0VHQTBBZ0JTQUVMUUFBT2dBQUlBUkJBV29oQkNBRlFRRnFJUVVnQXlBR1FRRnFJZ1pCL3dGeFNnMEFDd3RCQUVFQUtRUEFpUUVpQjBLQUFYdzNBOENKQVVFQVFRQXBBOGlKQVNBSFF2OStWcTE4TndQSWlRRkI0SWtCRUFJZ0FDQURhaUVBQWtBZ0FTQURheUlFUVlFQlNBMEFJQUlnQVdvaEJRTkFRUUJCQUNrRHdJa0JJZ2RDZ0FGOE53UEFpUUZCQUVFQUtRUElpUUVnQjBML2ZsYXRmRGNEeUlrQklBQVFBaUFBUVlBQmFpRUFJQVZCZ0g5cUlnVkJnQUpMRFFBTElBVkJnSDlxSVFRTUFRc2dCRUVBVEEwQkMwRUFJUVVEUUNBRlFRQW9BdUNLQVdwQjRJa0JhaUFBSUFWcUxRQUFPZ0FBSUFRZ0JVRUJhaUlGUWY4QmNVb05BQXNMUVFCQkFDZ0M0SW9CSUFScU5nTGdpZ0VMQzc4dUFTUitRUUJCQUNrRDBJa0JRUUFwQTdDSkFTSUJRUUFwQTVDSkFYd2dBQ2tESUNJQ2ZDSURoVUxyK29iYXY3WDJ3UitGUWlDSklnUkNxL0RUOUsvdXZMYzhmQ0lGSUFHRlFpaUpJZ1lnQTN3Z0FDa0RLQ0lCZkNJSElBU0ZRakNKSWdnZ0JYd2lDU0FHaFVJQmlTSUtRUUFwQThpSkFVRUFLUU9vaVFFaUJFRUFLUU9JaVFGOElBQXBBeEFpQTN3aUJZVkNuOWo1MmNLUjJvS2JmNFZDSUlraUMwSzd6cXFtMk5EcnM3dC9mQ0lNSUFTRlFpaUpJZzBnQlh3Z0FDa0RHQ0lFZkNJT2ZDQUFLUU5RSWdWOElnOUJBQ2tEd0lrQlFRQXBBNkNKQVNJUVFRQXBBNENKQVNJUmZDQUFLUU1BSWdaOEloS0ZRdEdGbXUvNno1U0gwUUNGUWlDSkloTkNpSkx6bmYvTStZVHFBSHdpRkNBUWhVSW9pU0lWSUJKOElBQXBBd2dpRUh3aUZpQVRoVUl3aVNJWGhVSWdpU0lZUVFBcEE5aUpBVUVBS1FPNGlRRWlFMEVBS1FPWWlRRjhJQUFwQXpBaUVud2lHWVZDK2NMNG01R2pzL0RiQUlWQ0lJa2lHa0x4N2ZUNHBhZjlwNlYvZkNJYklCT0ZRaWlKSWh3Z0dYd2dBQ2tET0NJVGZDSVpJQnFGUWpDSklob2dHM3dpRzN3aUhTQUtoVUlvaVNJZUlBOThJQUFwQTFnaUNud2lEeUFZaFVJd2lTSVlJQjE4SWgwZ0RpQUxoVUl3aVNJT0lBeDhJaDhnRFlWQ0FZa2lEQ0FXZkNBQUtRTkFJZ3Q4SWcwZ0dvVkNJSWtpRmlBSmZDSWFJQXlGUWlpSklpQWdEWHdnQUNrRFNDSUpmQ0loSUJhRlFqQ0pJaFlnR3lBY2hVSUJpU0lNSUFkOElBQXBBMkFpQjN3aURTQU9oVUlnaVNJT0lCY2dGSHdpRkh3aUZ5QU1oVUlvaVNJYklBMThJQUFwQTJnaURId2lIQ0FPaFVJd2lTSU9JQmQ4SWhjZ0c0VkNBWWtpR3lBWklCUWdGWVZDQVlraUZId2dBQ2tEY0NJTmZDSVZJQWlGUWlDSkloa2dIM3dpSHlBVWhVSW9pU0lVSUJWOElBQXBBM2dpQ0h3aUZYd2dESHdpSW9WQ0lJa2lJM3dpSkNBYmhVSW9pU0liSUNKOElCSjhJaUlnRnlBWUlCVWdHWVZDTUlraUZTQWZmQ0laSUJTRlFnR0pJaFFnSVh3Z0RYd2lINFZDSUlraUdId2lGeUFVaFVJb2lTSVVJQjk4SUFWOEloOGdHSVZDTUlraUdDQVhmQ0lYSUJTRlFnR0pJaFI4SUFGOElpRWdGaUFhZkNJV0lCVWdIU0FlaFVJQmlTSWFJQng4SUFsOEloeUZRaUNKSWhWOEloMGdHb1ZDS0lraUdpQWNmQ0FJZkNJY0lCV0ZRakNKSWhXRlFpQ0pJaDRnR1NBT0lCWWdJSVZDQVlraUZpQVBmQ0FDZkNJUGhVSWdpU0lPZkNJWklCYUZRaWlKSWhZZ0Qzd2dDM3dpRHlBT2hVSXdpU0lPSUJsOElobDhJaUFnRklWQ0tJa2lGQ0FoZkNBRWZDSWhJQjZGUWpDSkloNGdJSHdpSUNBaUlDT0ZRakNKSWlJZ0pId2lJeUFiaFVJQmlTSWJJQng4SUFwOElod2dEb1ZDSUlraURpQVhmQ0lYSUJ1RlFpaUpJaHNnSEh3Z0Uzd2lIQ0FPaFVJd2lTSU9JQmtnRm9WQ0FZa2lGaUFmZkNBUWZDSVpJQ0tGUWlDSkloOGdGU0FkZkNJVmZDSWRJQmFGUWlpSkloWWdHWHdnQjN3aUdTQWZoVUl3aVNJZklCMThJaDBnRm9WQ0FZa2lGaUFWSUJxRlFnR0pJaFVnRDN3Z0Jud2lEeUFZaFVJZ2lTSVlJQ044SWhvZ0ZZVkNLSWtpRlNBUGZDQURmQ0lQZkNBSGZDSWloVUlnaVNJamZDSWtJQmFGUWlpSkloWWdJbndnQm53aUlpQWpoVUl3aVNJaklDUjhJaVFnRm9WQ0FZa2lGaUFPSUJkOElnNGdEeUFZaFVJd2lTSVBJQ0FnRklWQ0FZa2lGQ0FaZkNBS2ZDSVhoVUlnaVNJWWZDSVpJQlNGUWlpSkloUWdGM3dnQzN3aUYzd2dCWHdpSUNBUElCcDhJZzhnSHlBT0lCdUZRZ0dKSWc0Z0lYd2dDSHdpR29WQ0lJa2lHM3dpSHlBT2hVSW9pU0lPSUJwOElBeDhJaG9nRzRWQ01Ja2lHNFZDSUlraUlTQWRJQjRnRHlBVmhVSUJpU0lQSUJ4OElBRjhJaFdGUWlDSkloeDhJaDBnRDRWQ0tJa2lEeUFWZkNBRGZDSVZJQnlGUWpDSklod2dIWHdpSFh3aUhpQVdoVUlvaVNJV0lDQjhJQTE4SWlBZ0lZVkNNSWtpSVNBZWZDSWVJQm9nRnlBWWhVSXdpU0lYSUJsOEloZ2dGSVZDQVlraUZId2dDWHdpR1NBY2hVSWdpU0lhSUNSOElod2dGSVZDS0lraUZDQVpmQ0FDZkNJWklCcUZRakNKSWhvZ0hTQVBoVUlCaVNJUElDSjhJQVI4SWgwZ0Y0VkNJSWtpRnlBYklCOThJaHQ4SWg4Z0Q0VkNLSWtpRHlBZGZDQVNmQ0lkSUJlRlFqQ0pJaGNnSDN3aUh5QVBoVUlCaVNJUElCc2dEb1ZDQVlraURpQVZmQ0FUZkNJVklDT0ZRaUNKSWhzZ0dId2lHQ0FPaFVJb2lTSU9JQlY4SUJCOEloVjhJQXg4SWlLRlFpQ0pJaU44SWlRZ0Q0VkNLSWtpRHlBaWZDQUhmQ0lpSUNPRlFqQ0pJaU1nSkh3aUpDQVBoVUlCaVNJUElCb2dISHdpR2lBVklCdUZRakNKSWhVZ0hpQVdoVUlCaVNJV0lCMThJQVI4SWh1RlFpQ0pJaHg4SWgwZ0ZvVkNLSWtpRmlBYmZDQVFmQ0liZkNBQmZDSWVJQlVnR0h3aUZTQVhJQm9nRklWQ0FZa2lGQ0FnZkNBVGZDSVloVUlnaVNJWGZDSWFJQlNGUWlpSkloUWdHSHdnQ1h3aUdDQVhoVUl3aVNJWGhVSWdpU0lnSUI4Z0lTQVZJQTZGUWdHSklnNGdHWHdnQ253aUZZVkNJSWtpR1h3aUh5QU9oVUlvaVNJT0lCVjhJQTE4SWhVZ0dZVkNNSWtpR1NBZmZDSWZmQ0loSUErRlFpaUpJZzhnSG53Z0JYd2lIaUFnaFVJd2lTSWdJQ0Y4SWlFZ0d5QWNoVUl3aVNJYklCMThJaHdnRm9WQ0FZa2lGaUFZZkNBRGZDSVlJQm1GUWlDSkloa2dKSHdpSFNBV2hVSW9pU0lXSUJoOElCSjhJaGdnR1lWQ01Ja2lHU0FmSUE2RlFnR0pJZzRnSW53Z0Fud2lIeUFiaFVJZ2lTSWJJQmNnR253aUYzd2lHaUFPaFVJb2lTSU9JQjk4SUFaOEloOGdHNFZDTUlraUd5QWFmQ0lhSUE2RlFnR0pJZzRnRlNBWElCU0ZRZ0dKSWhSOElBaDhJaFVnSTRWQ0lJa2lGeUFjZkNJY0lCU0ZRaWlKSWhRZ0ZYd2dDM3dpRlh3Z0JYd2lJb1ZDSUlraUkzd2lKQ0FPaFVJb2lTSU9JQ0o4SUFoOElpSWdHaUFnSUJVZ0Y0VkNNSWtpRlNBY2ZDSVhJQlNGUWdHSkloUWdHSHdnQ1h3aUdJVkNJSWtpSEh3aUdpQVVoVUlvaVNJVUlCaDhJQVo4SWhnZ0hJVkNNSWtpSENBYWZDSWFJQlNGUWdHSkloUjhJQVI4SWlBZ0dTQWRmQ0laSUJVZ0lTQVBoVUlCaVNJUElCOThJQU44SWgyRlFpQ0pJaFY4SWg4Z0Q0VkNLSWtpRHlBZGZDQUNmQ0lkSUJXRlFqQ0pJaFdGUWlDSklpRWdGeUFiSUJrZ0ZvVkNBWWtpRmlBZWZDQUJmQ0laaFVJZ2lTSWJmQ0lYSUJhRlFpaUpJaFlnR1h3Z0Uzd2lHU0FiaFVJd2lTSWJJQmQ4SWhkOEloNGdGSVZDS0lraUZDQWdmQ0FNZkNJZ0lDR0ZRakNKSWlFZ0hud2lIaUFpSUNPRlFqQ0pJaUlnSkh3aUl5QU9oVUlCaVNJT0lCMThJQko4SWgwZ0c0VkNJSWtpR3lBYWZDSWFJQTZGUWlpSklnNGdIWHdnQzN3aUhTQWJoVUl3aVNJYklCY2dGb1ZDQVlraUZpQVlmQ0FOZkNJWElDS0ZRaUNKSWhnZ0ZTQWZmQ0lWZkNJZklCYUZRaWlKSWhZZ0Yzd2dFSHdpRnlBWWhVSXdpU0lZSUI5OEloOGdGb1ZDQVlraUZpQVZJQStGUWdHSklnOGdHWHdnQ253aUZTQWNoVUlnaVNJWklDTjhJaHdnRDRWQ0tJa2lEeUFWZkNBSGZDSVZmQ0FTZkNJaWhVSWdpU0lqZkNJa0lCYUZRaWlKSWhZZ0lud2dCWHdpSWlBamhVSXdpU0lqSUNSOElpUWdGb1ZDQVlraUZpQWJJQnA4SWhvZ0ZTQVpoVUl3aVNJVklCNGdGSVZDQVlraUZDQVhmQ0FEZkNJWGhVSWdpU0laZkNJYklCU0ZRaWlKSWhRZ0Yzd2dCM3dpRjN3Z0Fud2lIaUFWSUJ4OEloVWdHQ0FhSUE2RlFnR0pJZzRnSUh3Z0Mzd2lHb1ZDSUlraUdId2lIQ0FPaFVJb2lTSU9JQnA4SUFSOElob2dHSVZDTUlraUdJVkNJSWtpSUNBZklDRWdGU0FQaFVJQmlTSVBJQjE4SUFaOEloV0ZRaUNKSWgxOEloOGdENFZDS0lraUR5QVZmQ0FLZkNJVklCMkZRakNKSWgwZ0gzd2lIM3dpSVNBV2hVSW9pU0lXSUI1OElBeDhJaDRnSUlWQ01Ja2lJQ0FoZkNJaElCb2dGeUFaaFVJd2lTSVhJQnQ4SWhrZ0ZJVkNBWWtpRkh3Z0VId2lHaUFkaFVJZ2lTSWJJQ1I4SWgwZ0ZJVkNLSWtpRkNBYWZDQUpmQ0lhSUJ1RlFqQ0pJaHNnSHlBUGhVSUJpU0lQSUNKOElCTjhJaDhnRjRWQ0lJa2lGeUFZSUJ4OEloaDhJaHdnRDRWQ0tJa2lEeUFmZkNBQmZDSWZJQmVGUWpDSkloY2dISHdpSENBUGhVSUJpU0lQSUJnZ0RvVkNBWWtpRGlBVmZDQUlmQ0lWSUNPRlFpQ0pJaGdnR1h3aUdTQU9oVUlvaVNJT0lCVjhJQTE4SWhWOElBMThJaUtGUWlDSklpTjhJaVFnRDRWQ0tJa2lEeUFpZkNBTWZDSWlJQ09GUWpDSklpTWdKSHdpSkNBUGhVSUJpU0lQSUJzZ0hYd2lHeUFWSUJpRlFqQ0pJaFVnSVNBV2hVSUJpU0lXSUI5OElCQjhJaGlGUWlDSkloMThJaDhnRm9WQ0tJa2lGaUFZZkNBSWZDSVlmQ0FTZkNJaElCVWdHWHdpRlNBWElCc2dGSVZDQVlraUZDQWVmQ0FIZkNJWmhVSWdpU0lYZkNJYklCU0ZRaWlKSWhRZ0dYd2dBWHdpR1NBWGhVSXdpU0lYaFVJZ2lTSWVJQndnSUNBVklBNkZRZ0dKSWc0Z0dud2dBbndpRllWQ0lJa2lHbndpSENBT2hVSW9pU0lPSUJWOElBVjhJaFVnR29WQ01Ja2lHaUFjZkNJY2ZDSWdJQStGUWlpSklnOGdJWHdnQkh3aUlTQWVoVUl3aVNJZUlDQjhJaUFnR0NBZGhVSXdpU0lZSUI5OEloMGdGb1ZDQVlraUZpQVpmQ0FHZkNJWklCcUZRaUNKSWhvZ0pId2lIeUFXaFVJb2lTSVdJQmw4SUJOOEloa2dHb1ZDTUlraUdpQWNJQTZGUWdHSklnNGdJbndnQ1h3aUhDQVloVUlnaVNJWUlCY2dHM3dpRjN3aUd5QU9oVUlvaVNJT0lCeDhJQU44SWh3Z0dJVkNNSWtpR0NBYmZDSWJJQTZGUWdHSklnNGdGU0FYSUJTRlFnR0pJaFI4SUF0OEloVWdJNFZDSUlraUZ5QWRmQ0lkSUJTRlFpaUpJaFFnRlh3Z0Nud2lGWHdnQkh3aUlvVkNJSWtpSTN3aUpDQU9oVUlvaVNJT0lDSjhJQWw4SWlJZ0d5QWVJQlVnRjRWQ01Ja2lGU0FkZkNJWElCU0ZRZ0dKSWhRZ0dYd2dESHdpR1lWQ0lJa2lIWHdpR3lBVWhVSW9pU0lVSUJsOElBcDhJaGtnSFlWQ01Ja2lIU0FiZkNJYklCU0ZRZ0dKSWhSOElBTjhJaDRnR2lBZmZDSWFJQlVnSUNBUGhVSUJpU0lQSUJ4OElBZDhJaHlGUWlDSkloVjhJaDhnRDRWQ0tJa2lEeUFjZkNBUWZDSWNJQldGUWpDSkloV0ZRaUNKSWlBZ0Z5QVlJQm9nRm9WQ0FZa2lGaUFoZkNBVGZDSWFoVUlnaVNJWWZDSVhJQmFGUWlpSkloWWdHbndnRFh3aUdpQVloVUl3aVNJWUlCZDhJaGQ4SWlFZ0ZJVkNLSWtpRkNBZWZDQUZmQ0llSUNDRlFqQ0pJaUFnSVh3aUlTQWlJQ09GUWpDSklpSWdKSHdpSXlBT2hVSUJpU0lPSUJ4OElBdDhJaHdnR0lWQ0lJa2lHQ0FiZkNJYklBNkZRaWlKSWc0Z0hId2dFbndpSENBWWhVSXdpU0lZSUJjZ0ZvVkNBWWtpRmlBWmZDQUJmQ0lYSUNLRlFpQ0pJaGtnRlNBZmZDSVZmQ0lmSUJhRlFpaUpJaFlnRjN3Z0Jud2lGeUFaaFVJd2lTSVpJQjk4SWg4Z0ZvVkNBWWtpRmlBVklBK0ZRZ0dKSWc4Z0dud2dDSHdpRlNBZGhVSWdpU0lhSUNOOEloMGdENFZDS0lraUR5QVZmQ0FDZkNJVmZDQU5mQ0lpaFVJZ2lTSWpmQ0lrSUJhRlFpaUpJaFlnSW53Z0NYd2lJaUFqaFVJd2lTSWpJQ1I4SWlRZ0ZvVkNBWWtpRmlBWUlCdDhJaGdnRlNBYWhVSXdpU0lWSUNFZ0ZJVkNBWWtpRkNBWGZDQVNmQ0lYaFVJZ2lTSWFmQ0liSUJTRlFpaUpJaFFnRjN3Z0NId2lGM3dnQjN3aUlTQVZJQjE4SWhVZ0dTQVlJQTZGUWdHSklnNGdIbndnQm53aUdJVkNJSWtpR1h3aUhTQU9oVUlvaVNJT0lCaDhJQXQ4SWhnZ0dZVkNNSWtpR1lWQ0lJa2lIaUFmSUNBZ0ZTQVBoVUlCaVNJUElCeDhJQXA4SWhXRlFpQ0pJaHg4SWg4Z0Q0VkNLSWtpRHlBVmZDQUVmQ0lWSUJ5RlFqQ0pJaHdnSDN3aUgzd2lJQ0FXaFVJb2lTSVdJQ0Y4SUFOOElpRWdIb1ZDTUlraUhpQWdmQ0lnSUJnZ0Z5QWFoVUl3aVNJWElCdDhJaG9nRklWQ0FZa2lGSHdnQlh3aUdDQWNoVUlnaVNJYklDUjhJaHdnRklWQ0tJa2lGQ0FZZkNBQmZDSVlJQnVGUWpDSkloc2dIeUFQaFVJQmlTSVBJQ0o4SUF4OEloOGdGNFZDSUlraUZ5QVpJQjE4SWhsOEloMGdENFZDS0lraUR5QWZmQ0FUZkNJZklCZUZRakNKSWhjZ0hYd2lIU0FQaFVJQmlTSVBJQmtnRG9WQ0FZa2lEaUFWZkNBUWZDSVZJQ09GUWlDSkloa2dHbndpR2lBT2hVSW9pU0lPSUJWOElBSjhJaFY4SUJOOElpS0ZRaUNKSWlOOElpUWdENFZDS0lraUR5QWlmQ0FTZkNJaUlDT0ZRakNKSWlNZ0pId2lKQ0FQaFVJQmlTSVBJQnNnSEh3aUd5QVZJQm1GUWpDSkloVWdJQ0FXaFVJQmlTSVdJQjk4SUF0OElobUZRaUNKSWh4OEloOGdGb1ZDS0lraUZpQVpmQ0FDZkNJWmZDQUpmQ0lnSUJVZ0dud2lGU0FYSUJzZ0ZJVkNBWWtpRkNBaGZDQUZmQ0lhaFVJZ2lTSVhmQ0liSUJTRlFpaUpJaFFnR253Z0Ezd2lHaUFYaFVJd2lTSVhoVUlnaVNJaElCMGdIaUFWSUE2RlFnR0pJZzRnR0h3Z0VId2lGWVZDSUlraUdId2lIU0FPaFVJb2lTSU9JQlY4SUFGOEloVWdHSVZDTUlraUdDQWRmQ0lkZkNJZUlBK0ZRaWlKSWc4Z0lId2dEWHdpSUNBaGhVSXdpU0loSUI1OEloNGdHU0FjaFVJd2lTSVpJQjk4SWh3Z0ZvVkNBWWtpRmlBYWZDQUlmQ0lhSUJpRlFpQ0pJaGdnSkh3aUh5QVdoVUlvaVNJV0lCcDhJQXA4SWhvZ0dJVkNNSWtpR0NBZElBNkZRZ0dKSWc0Z0lud2dCSHdpSFNBWmhVSWdpU0laSUJjZ0czd2lGM3dpR3lBT2hVSW9pU0lPSUIxOElBZDhJaDBnR1lWQ01Ja2lHU0FiZkNJYklBNkZRZ0dKSWc0Z0ZTQVhJQlNGUWdHSkloUjhJQXg4SWhVZ0k0VkNJSWtpRnlBY2ZDSWNJQlNGUWlpSkloUWdGWHdnQm53aUZYd2dFbndpSW9WQ0lJa2lJM3dpSkNBT2hVSW9pU0lPSUNKOElCTjhJaUlnR3lBaElCVWdGNFZDTUlraUZTQWNmQ0lYSUJTRlFnR0pJaFFnR253Z0Jud2lHb1ZDSUlraUhId2lHeUFVaFVJb2lTSVVJQnA4SUJCOElob2dISVZDTUlraUhDQWJmQ0liSUJTRlFnR0pJaFI4SUExOElpRWdHQ0FmZkNJWUlCVWdIaUFQaFVJQmlTSVBJQjE4SUFKOEloMkZRaUNKSWhWOEloNGdENFZDS0lraUR5QWRmQ0FCZkNJZElCV0ZRakNKSWhXRlFpQ0pJaDhnRnlBWklCZ2dGb1ZDQVlraUZpQWdmQ0FEZkNJWWhVSWdpU0laZkNJWElCYUZRaWlKSWhZZ0dId2dCSHdpR0NBWmhVSXdpU0laSUJkOEloZDhJaUFnRklWQ0tJa2lGQ0FoZkNBSWZDSWhJQitGUWpDSkloOGdJSHdpSUNBaUlDT0ZRakNKSWlJZ0pId2lJeUFPaFVJQmlTSU9JQjE4SUFkOEloMGdHWVZDSUlraUdTQWJmQ0liSUE2RlFpaUpJZzRnSFh3Z0RId2lIU0FaaFVJd2lTSVpJQmNnRm9WQ0FZa2lGaUFhZkNBTGZDSVhJQ0tGUWlDSklob2dGU0FlZkNJVmZDSWVJQmFGUWlpSkloWWdGM3dnQ1h3aUZ5QWFoVUl3aVNJYUlCNThJaDRnRm9WQ0FZa2lGaUFWSUErRlFnR0pJZzhnR0h3Z0JYd2lGU0FjaFVJZ2lTSVlJQ044SWh3Z0Q0VkNLSWtpRHlBVmZDQUtmQ0lWZkNBQ2ZDSUNoVUlnaVNJaWZDSWpJQmFGUWlpSkloWWdBbndnQzN3aUFpQWloVUl3aVNJTElDTjhJaUlnRm9WQ0FZa2lGaUFaSUJ0OEloa2dGU0FZaFVJd2lTSVZJQ0FnRklWQ0FZa2lGQ0FYZkNBTmZDSU5oVUlnaVNJWGZDSVlJQlNGUWlpSkloUWdEWHdnQlh3aUJYd2dFSHdpRUNBVklCeDhJZzBnR2lBWklBNkZRZ0dKSWc0Z0lYd2dESHdpRElWQ0lJa2lGWHdpR1NBT2hVSW9pU0lPSUF4OElCSjhJaElnRllWQ01Ja2lESVZDSUlraUZTQWVJQjhnRFNBUGhVSUJpU0lOSUIxOElBbDhJZ21GUWlDSklnOThJaG9nRFlWQ0tJa2lEU0FKZkNBSWZDSUpJQStGUWpDSklnZ2dHbndpRDN3aUdpQVdoVUlvaVNJV0lCQjhJQWQ4SWhBZ0VZVWdEQ0FaZkNJSElBNkZRZ0dKSWd3Z0NYd2dDbndpQ2lBTGhVSWdpU0lMSUFVZ0Y0VkNNSWtpQlNBWWZDSUpmQ0lPSUF5RlFpaUpJZ3dnQ253Z0Uzd2lFeUFMaFVJd2lTSUtJQTU4SWd1Rk53T0FpUUZCQUNBRElBWWdEeUFOaFVJQmlTSU5JQUo4ZkNJQ0lBV0ZRaUNKSWdVZ0Izd2lCaUFOaFVJb2lTSUhJQUo4ZkNJQ1FRQXBBNGlKQVlVZ0JDQUJJQklnQ1NBVWhVSUJpU0lEZkh3aUFTQUloVUlnaVNJU0lDSjhJZ2tnQTRWQ0tJa2lBeUFCZkh3aUFTQVNoVUl3aVNJRUlBbDhJaEtGTndPSWlRRkJBQ0FUUVFBcEE1Q0pBWVVnRUNBVmhVSXdpU0lRSUJwOEloT0ZOd09RaVFGQkFDQUJRUUFwQTVpSkFZVWdBaUFGaFVJd2lTSUNJQVo4SWdHRk53T1lpUUZCQUNBU0lBT0ZRZ0dKUVFBcEE2Q0pBWVVnQW9VM0E2Q0pBVUVBSUJNZ0ZvVkNBWWxCQUNrRHFJa0JoU0FLaFRjRHFJa0JRUUFnQVNBSGhVSUJpVUVBS1FPd2lRR0ZJQVNGTndPd2lRRkJBQ0FMSUF5RlFnR0pRUUFwQTdpSkFZVWdFSVUzQTdpSkFRdmRBZ1VCZndGK0FYOEJmZ0ovSXdCQndBQnJJZ0FrQUFKQVFRQXBBOUNKQVVJQVVnMEFRUUJCQUNrRHdJa0JJZ0ZCQUNnQzRJb0JJZ0tzZkNJRE53UEFpUUZCQUVFQUtRUElpUUVnQXlBQlZLMThOd1BJaVFFQ1FFRUFMUURvaWdGRkRRQkJBRUovTndQWWlRRUxRUUJDZnpjRDBJa0JBa0FnQWtIL0FFb05BRUVBSVFRRFFDQUNJQVJxUWVDSkFXcEJBRG9BQUNBRVFRRnFJZ1JCZ0FGQkFDZ0M0SW9CSWdKclNBMEFDd3RCNElrQkVBSWdBRUVBS1FPQWlRRTNBd0FnQUVFQUtRT0lpUUUzQXdnZ0FFRUFLUU9RaVFFM0F4QWdBRUVBS1FPWWlRRTNBeGdnQUVFQUtRT2dpUUUzQXlBZ0FFRUFLUU9vaVFFM0F5Z2dBRUVBS1FPd2lRRTNBekFnQUVFQUtRTzRpUUUzQXpoQkFDZ0M1SW9CSWdWQkFVZ05BRUVBSVFSQkFDRUNBMEFnQkVHQUNXb2dBQ0FFYWkwQUFEb0FBQ0FFUVFGcUlRUWdCU0FDUVFGcUlnSkIvd0Z4U2cwQUN3c2dBRUhBQUdva0FBdjlBd01CZndGK0FYOGpBRUdBQVdzaUFpUUFRUUJCZ1FJN0FmS0tBVUVBSUFFNkFQR0tBVUVBSUFBNkFQQ0tBVUdRZmlFQUEwQWdBRUdBaXdGcVFnQTNBQUFnQUVINGlnRnFRZ0EzQUFBZ0FFSHdpZ0ZxUWdBM0FBQWdBRUVZYWlJQURRQUxRUUFoQUVFQVFRQXBBL0NLQVNJRFFvaVM4NTMvelBtRTZnQ0ZOd09BaVFGQkFFRUFLUVA0aWdGQ3U4NnFwdGpRNjdPN2Y0VTNBNGlKQVVFQVFRQXBBNENMQVVLcjhOUDByKzY4dHp5Rk53T1FpUUZCQUVFQUtRT0lpd0ZDOGUzMCtLV24vYWVsZjRVM0E1aUpBVUVBUVFBcEE1Q0xBVUxSaFpyditzK1VoOUVBaFRjRG9Ja0JRUUJCQUNrRG1Jc0JRcC9ZK2RuQ2tkcUNtMytGTndPb2lRRkJBRUVBS1FPZ2l3RkM2L3FHMnIrMTlzRWZoVGNEc0lrQlFRQkJBQ2tEcUlzQlF2bkMrSnVSbzdQdzJ3Q0ZOd080aVFGQkFDQURwMEgvQVhFMkF1U0tBUUpBSUFGQkFVZ05BQ0FDUWdBM0EzZ2dBa0lBTndOd0lBSkNBRGNEYUNBQ1FnQTNBMkFnQWtJQU53TllJQUpDQURjRFVDQUNRZ0EzQTBnZ0FrSUFOd05BSUFKQ0FEY0RPQ0FDUWdBM0F6QWdBa0lBTndNb0lBSkNBRGNESUNBQ1FnQTNBeGdnQWtJQU53TVFJQUpDQURjRENDQUNRZ0EzQXdCQkFDRUVBMEFnQWlBQWFpQUFRWUFKYWkwQUFEb0FBQ0FBUVFGcUlRQWdCRUVCYWlJRVFmOEJjU0FCU0EwQUN5QUNRWUFCRUFFTElBSkJnQUZxSkFBTEVnQWdBRUVEZGtIL1AzRWdBRUVRZGhBRUN3a0FRWUFKSUFBUUFRc0dBRUdBaVFFTEd3QWdBVUVEZGtIL1AzRWdBVUVRZGhBRVFZQUpJQUFRQVJBREN3c0xBUUJCZ0FnTEJQQUFBQUE9XCI7XG4gICAgdmFyIGhhc2gkaiA9IFwiNjU2ZTBmNjZcIjtcbiAgICB2YXIgd2FzbUpzb24kaiA9IHtcbiAgICBcdG5hbWU6IG5hbWUkaixcbiAgICBcdGRhdGE6IGRhdGEkaixcbiAgICBcdGhhc2g6IGhhc2gkalxuICAgIH07XG5cbiAgICBjb25zdCBtdXRleCRrID0gbmV3IE11dGV4KCk7XG4gICAgbGV0IHdhc21DYWNoZSRrID0gbnVsbDtcbiAgICBmdW5jdGlvbiB2YWxpZGF0ZUJpdHMkNChiaXRzKSB7XG4gICAgICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihiaXRzKSB8fCBiaXRzIDwgOCB8fCBiaXRzID4gNTEyIHx8IGJpdHMgJSA4ICE9PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdJbnZhbGlkIHZhcmlhbnQhIFZhbGlkIHZhbHVlczogOCwgMTYsIC4uLiwgNTEyJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldEluaXRQYXJhbSQxKG91dHB1dEJpdHMsIGtleUJpdHMpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWJpdHdpc2VcbiAgICAgICAgcmV0dXJuIG91dHB1dEJpdHMgfCAoa2V5Qml0cyA8PCAxNik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZXMgQkxBS0UyYiBoYXNoXG4gICAgICogQHBhcmFtIGRhdGEgSW5wdXQgZGF0YSAoc3RyaW5nLCBCdWZmZXIgb3IgVHlwZWRBcnJheSlcbiAgICAgKiBAcGFyYW0gYml0cyBOdW1iZXIgb2Ygb3V0cHV0IGJpdHMsIHdoaWNoIGhhcyB0byBiZSBhIG51bWJlclxuICAgICAqICAgICAgICAgICAgIGRpdmlzaWJsZSBieSA4LCBiZXR3ZWVuIDggYW5kIDUxMi4gRGVmYXVsdHMgdG8gNTEyLlxuICAgICAqIEBwYXJhbSBrZXkgT3B0aW9uYWwga2V5IChzdHJpbmcsIEJ1ZmZlciBvciBUeXBlZEFycmF5KS4gTWF4aW11bSBsZW5ndGggaXMgNjQgYnl0ZXMuXG4gICAgICogQHJldHVybnMgQ29tcHV0ZWQgaGFzaCBhcyBhIGhleGFkZWNpbWFsIHN0cmluZ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJsYWtlMmIoZGF0YSwgYml0cyA9IDUxMiwga2V5ID0gbnVsbCkge1xuICAgICAgICBpZiAodmFsaWRhdGVCaXRzJDQoYml0cykpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCh2YWxpZGF0ZUJpdHMkNChiaXRzKSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGtleUJ1ZmZlciA9IG51bGw7XG4gICAgICAgIGxldCBpbml0UGFyYW0gPSBiaXRzO1xuICAgICAgICBpZiAoa2V5ICE9PSBudWxsKSB7XG4gICAgICAgICAgICBrZXlCdWZmZXIgPSBnZXRVSW50OEJ1ZmZlcihrZXkpO1xuICAgICAgICAgICAgaWYgKGtleUJ1ZmZlci5sZW5ndGggPiA2NCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ01heCBrZXkgbGVuZ3RoIGlzIDY0IGJ5dGVzJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW5pdFBhcmFtID0gZ2V0SW5pdFBhcmFtJDEoYml0cywga2V5QnVmZmVyLmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaGFzaExlbmd0aCA9IGJpdHMgLyA4O1xuICAgICAgICBpZiAod2FzbUNhY2hlJGsgPT09IG51bGwgfHwgd2FzbUNhY2hlJGsuaGFzaExlbmd0aCAhPT0gaGFzaExlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2tlZENyZWF0ZShtdXRleCRrLCB3YXNtSnNvbiRqLCBoYXNoTGVuZ3RoKVxuICAgICAgICAgICAgICAgIC50aGVuKCh3YXNtKSA9PiB7XG4gICAgICAgICAgICAgICAgd2FzbUNhY2hlJGsgPSB3YXNtO1xuICAgICAgICAgICAgICAgIGlmIChpbml0UGFyYW0gPiA1MTIpIHtcbiAgICAgICAgICAgICAgICAgICAgd2FzbUNhY2hlJGsud3JpdGVNZW1vcnkoa2V5QnVmZmVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdhc21DYWNoZSRrLmNhbGN1bGF0ZShkYXRhLCBpbml0UGFyYW0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChpbml0UGFyYW0gPiA1MTIpIHtcbiAgICAgICAgICAgICAgICB3YXNtQ2FjaGUkay53cml0ZU1lbW9yeShrZXlCdWZmZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgaGFzaCA9IHdhc21DYWNoZSRrLmNhbGN1bGF0ZShkYXRhLCBpbml0UGFyYW0pO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShoYXNoKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IEJMQUtFMmIgaGFzaCBpbnN0YW5jZVxuICAgICAqIEBwYXJhbSBiaXRzIE51bWJlciBvZiBvdXRwdXQgYml0cywgd2hpY2ggaGFzIHRvIGJlIGEgbnVtYmVyXG4gICAgICogICAgICAgICAgICAgZGl2aXNpYmxlIGJ5IDgsIGJldHdlZW4gOCBhbmQgNTEyLiBEZWZhdWx0cyB0byA1MTIuXG4gICAgICogQHBhcmFtIGtleSBPcHRpb25hbCBrZXkgKHN0cmluZywgQnVmZmVyIG9yIFR5cGVkQXJyYXkpLiBNYXhpbXVtIGxlbmd0aCBpcyA2NCBieXRlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVCTEFLRTJiKGJpdHMgPSA1MTIsIGtleSA9IG51bGwpIHtcbiAgICAgICAgaWYgKHZhbGlkYXRlQml0cyQ0KGJpdHMpKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QodmFsaWRhdGVCaXRzJDQoYml0cykpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBrZXlCdWZmZXIgPSBudWxsO1xuICAgICAgICBsZXQgaW5pdFBhcmFtID0gYml0cztcbiAgICAgICAgaWYgKGtleSAhPT0gbnVsbCkge1xuICAgICAgICAgICAga2V5QnVmZmVyID0gZ2V0VUludDhCdWZmZXIoa2V5KTtcbiAgICAgICAgICAgIGlmIChrZXlCdWZmZXIubGVuZ3RoID4gNjQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdNYXgga2V5IGxlbmd0aCBpcyA2NCBieXRlcycpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGluaXRQYXJhbSA9IGdldEluaXRQYXJhbSQxKGJpdHMsIGtleUJ1ZmZlci5sZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG91dHB1dFNpemUgPSBiaXRzIC8gODtcbiAgICAgICAgcmV0dXJuIFdBU01JbnRlcmZhY2Uod2FzbUpzb24kaiwgb3V0cHV0U2l6ZSkudGhlbigod2FzbSkgPT4ge1xuICAgICAgICAgICAgaWYgKGluaXRQYXJhbSA+IDUxMikge1xuICAgICAgICAgICAgICAgIHdhc20ud3JpdGVNZW1vcnkoa2V5QnVmZmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdhc20uaW5pdChpbml0UGFyYW0pO1xuICAgICAgICAgICAgY29uc3Qgb2JqID0ge1xuICAgICAgICAgICAgICAgIGluaXQ6IGluaXRQYXJhbSA+IDUxMlxuICAgICAgICAgICAgICAgICAgICA/ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhc20ud3JpdGVNZW1vcnkoa2V5QnVmZmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhc20uaW5pdChpbml0UGFyYW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICA6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhc20uaW5pdChpbml0UGFyYW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB1cGRhdGU6IChkYXRhKSA9PiB7IHdhc20udXBkYXRlKGRhdGEpOyByZXR1cm4gb2JqOyB9LFxuICAgICAgICAgICAgICAgIGRpZ2VzdDogKG91dHB1dFR5cGUpID0+IHdhc20uZGlnZXN0KG91dHB1dFR5cGUpLFxuICAgICAgICAgICAgICAgIHNhdmU6ICgpID0+IHdhc20uc2F2ZSgpLFxuICAgICAgICAgICAgICAgIGxvYWQ6IChkYXRhKSA9PiB7IHdhc20ubG9hZChkYXRhKTsgcmV0dXJuIG9iajsgfSxcbiAgICAgICAgICAgICAgICBibG9ja1NpemU6IDEyOCxcbiAgICAgICAgICAgICAgICBkaWdlc3RTaXplOiBvdXRwdXRTaXplLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBuYW1lJGkgPSBcImFyZ29uMlwiO1xuICAgIHZhciBkYXRhJGkgPSBcIkFHRnpiUUVBQUFBQktRVmdBWDhCZjJBQUFYOWdFSDkvZjM5L2YzOS9mMzkvZjM5L2YzOEFZQVIvZjM5L0FHQUNmMzhBQXdZRkFBRUNBd1FGQmdFQkFvQ0FBZ1lJQVg4QlFaQ29CQXNIUVFRR2JXVnRiM0o1QWdBU1NHRnphRjlUWlhSTlpXMXZjbmxUYVhwbEFBQU9TR0Z6YUY5SFpYUkNkV1ptWlhJQUFRNUlZWE5vWDBOaGJHTjFiR0YwWlFBRUN2a3lCVmdCQW45QkFDRUJBa0JCQUNnQ2lBZ2lBaUFBUmcwQUFrQWdBQ0FDYXlJQVFSQjJJQUJCZ0lCOGNTQUFTV29pQUVBQVFYOUhEUUJCL3dIQUR3dEJBQ0VCUVFCQkFDa0RpQWdnQUVFUWRLMThOd09JQ0FzZ0FjQUxjQUVDZndKQVFRQW9Bb0FJSWdBTkFFRUFQd0JCRUhRaUFEWUNnQWhCQUNnQ2lBZ2lBVUdBZ0NCR0RRQUNRRUdBZ0NBZ0FXc2lBRUVRZGlBQVFZQ0FmSEVnQUVscUlnQkFBRUYvUncwQVFRQVBDMEVBUVFBcEE0Z0lJQUJCRUhTdGZEY0RpQWhCQUNnQ2dBZ2hBQXNnQUF2Y0RnRUNmaUFBSUFRcEF3QWlFQ0FBS1FNQUloRjhJQkZDQVlaQy92Ly8veCtESUJCQy8vLy8vdytEZm53aUVEY0RBQ0FNSUJBZ0RDa0RBSVZDSUlraUVEY0RBQ0FJSUJBZ0NDa0RBQ0lSZkNBUlFnR0dRdjcvLy84Zmd5QVFRdi8vLy84UGczNThJaEEzQXdBZ0JDQVFJQVFwQXdDRlFpaUpJaEEzQXdBZ0FDQVFJQUFwQXdBaUVYd2dFRUwvLy8vL0Q0TWdFVUlCaGtMKy8vLy9INE4rZkNJUU53TUFJQXdnRUNBTUtRTUFoVUl3aVNJUU53TUFJQWdnRUNBSUtRTUFJaEY4SUJCQy8vLy8vdytESUJGQ0FZWkMvdi8vL3grRGZud2lFRGNEQUNBRUlCQWdCQ2tEQUlWQ0FZazNBd0FnQVNBRktRTUFJaEFnQVNrREFDSVJmQ0FSUWdHR1F2Ny8vLzhmZ3lBUVF2Ly8vLzhQZzM1OEloQTNBd0FnRFNBUUlBMHBBd0NGUWlDSkloQTNBd0FnQ1NBUUlBa3BBd0FpRVh3Z0VVSUJoa0wrLy8vL0g0TWdFRUwvLy8vL0Q0TitmQ0lRTndNQUlBVWdFQ0FGS1FNQWhVSW9pU0lRTndNQUlBRWdFQ0FCS1FNQUloRjhJQkJDLy8vLy93K0RJQkZDQVlaQy92Ly8veCtEZm53aUVEY0RBQ0FOSUJBZ0RTa0RBSVZDTUlraUVEY0RBQ0FKSUJBZ0NTa0RBQ0lSZkNBUVF2Ly8vLzhQZ3lBUlFnR0dRdjcvLy84ZmczNThJaEEzQXdBZ0JTQVFJQVVwQXdDRlFnR0pOd01BSUFJZ0Jpa0RBQ0lRSUFJcEF3QWlFWHdnRVVJQmhrTCsvLy8vSDRNZ0VFTC8vLy8vRDROK2ZDSVFOd01BSUE0Z0VDQU9LUU1BaFVJZ2lTSVFOd01BSUFvZ0VDQUtLUU1BSWhGOElCRkNBWVpDL3YvLy94K0RJQkJDLy8vLy93K0RmbndpRURjREFDQUdJQkFnQmlrREFJVkNLSWtpRURjREFDQUNJQkFnQWlrREFDSVJmQ0FRUXYvLy8vOFBneUFSUWdHR1F2Ny8vLzhmZzM1OEloQTNBd0FnRGlBUUlBNHBBd0NGUWpDSkloQTNBd0FnQ2lBUUlBb3BBd0FpRVh3Z0VFTC8vLy8vRDRNZ0VVSUJoa0wrLy8vL0g0TitmQ0lRTndNQUlBWWdFQ0FHS1FNQWhVSUJpVGNEQUNBRElBY3BBd0FpRUNBREtRTUFJaEY4SUJGQ0FZWkMvdi8vL3grRElCQkMvLy8vL3crRGZud2lFRGNEQUNBUElCQWdEeWtEQUlWQ0lJa2lFRGNEQUNBTElCQWdDeWtEQUNJUmZDQVJRZ0dHUXY3Ly8vOGZneUFRUXYvLy8vOFBnMzU4SWhBM0F3QWdCeUFRSUFjcEF3Q0ZRaWlKSWhBM0F3QWdBeUFRSUFNcEF3QWlFWHdnRUVMLy8vLy9ENE1nRVVJQmhrTCsvLy8vSDROK2ZDSVFOd01BSUE4Z0VDQVBLUU1BaFVJd2lTSVFOd01BSUFzZ0VDQUxLUU1BSWhGOElCQkMvLy8vL3crRElCRkNBWVpDL3YvLy94K0RmbndpRURjREFDQUhJQkFnQnlrREFJVkNBWWszQXdBZ0FDQUZLUU1BSWhBZ0FDa0RBQ0lSZkNBUlFnR0dRdjcvLy84Zmd5QVFRdi8vLy84UGczNThJaEEzQXdBZ0R5QVFJQThwQXdDRlFpQ0pJaEEzQXdBZ0NpQVFJQW9wQXdBaUVYd2dFVUlCaGtMKy8vLy9INE1nRUVMLy8vLy9ENE4rZkNJUU53TUFJQVVnRUNBRktRTUFoVUlvaVNJUU53TUFJQUFnRUNBQUtRTUFJaEY4SUJCQy8vLy8vdytESUJGQ0FZWkMvdi8vL3grRGZud2lFRGNEQUNBUElCQWdEeWtEQUlWQ01Ja2lFRGNEQUNBS0lCQWdDaWtEQUNJUmZDQVFRdi8vLy84UGd5QVJRZ0dHUXY3Ly8vOGZnMzU4SWhBM0F3QWdCU0FRSUFVcEF3Q0ZRZ0dKTndNQUlBRWdCaWtEQUNJUUlBRXBBd0FpRVh3Z0VVSUJoa0wrLy8vL0g0TWdFRUwvLy8vL0Q0TitmQ0lRTndNQUlBd2dFQ0FNS1FNQWhVSWdpU0lRTndNQUlBc2dFQ0FMS1FNQUloRjhJQkZDQVlaQy92Ly8veCtESUJCQy8vLy8vdytEZm53aUVEY0RBQ0FHSUJBZ0Jpa0RBSVZDS0lraUVEY0RBQ0FCSUJBZ0FTa0RBQ0lSZkNBUVF2Ly8vLzhQZ3lBUlFnR0dRdjcvLy84ZmczNThJaEEzQXdBZ0RDQVFJQXdwQXdDRlFqQ0pJaEEzQXdBZ0N5QVFJQXNwQXdBaUVYd2dFRUwvLy8vL0Q0TWdFVUlCaGtMKy8vLy9INE4rZkNJUU53TUFJQVlnRUNBR0tRTUFoVUlCaVRjREFDQUNJQWNwQXdBaUVDQUNLUU1BSWhGOElCRkNBWVpDL3YvLy94K0RJQkJDLy8vLy93K0RmbndpRURjREFDQU5JQkFnRFNrREFJVkNJSWtpRURjREFDQUlJQkFnQ0NrREFDSVJmQ0FSUWdHR1F2Ny8vLzhmZ3lBUVF2Ly8vLzhQZzM1OEloQTNBd0FnQnlBUUlBY3BBd0NGUWlpSkloQTNBd0FnQWlBUUlBSXBBd0FpRVh3Z0VFTC8vLy8vRDRNZ0VVSUJoa0wrLy8vL0g0TitmQ0lRTndNQUlBMGdFQ0FOS1FNQWhVSXdpU0lRTndNQUlBZ2dFQ0FJS1FNQUloRjhJQkJDLy8vLy93K0RJQkZDQVlaQy92Ly8veCtEZm53aUVEY0RBQ0FISUJBZ0J5a0RBSVZDQVlrM0F3QWdBeUFFS1FNQUloQWdBeWtEQUNJUmZDQVJRZ0dHUXY3Ly8vOGZneUFRUXYvLy8vOFBnMzU4SWhBM0F3QWdEaUFRSUE0cEF3Q0ZRaUNKSWhBM0F3QWdDU0FRSUFrcEF3QWlFWHdnRVVJQmhrTCsvLy8vSDRNZ0VFTC8vLy8vRDROK2ZDSVFOd01BSUFRZ0VDQUVLUU1BaFVJb2lTSVFOd01BSUFNZ0VDQURLUU1BSWhGOElCQkMvLy8vL3crRElCRkNBWVpDL3YvLy94K0RmbndpRURjREFDQU9JQkFnRGlrREFJVkNNSWtpRURjREFDQUpJQkFnQ1NrREFDSVJmQ0FRUXYvLy8vOFBneUFSUWdHR1F2Ny8vLzhmZzM1OEloQTNBd0FnQkNBUUlBUXBBd0NGUWdHSk53TUFDOThhQVFOL1FRQWhCRUVBSUFJcEF3QWdBU2tEQUlVM0E1QUlRUUFnQWlrRENDQUJLUU1JaFRjRG1BaEJBQ0FDS1FNUUlBRXBBeENGTndPZ0NFRUFJQUlwQXhnZ0FTa0RHSVUzQTZnSVFRQWdBaWtESUNBQktRTWdoVGNEc0FoQkFDQUNLUU1vSUFFcEF5aUZOd080Q0VFQUlBSXBBekFnQVNrRE1JVTNBOEFJUVFBZ0Fpa0RPQ0FCS1FNNGhUY0R5QWhCQUNBQ0tRTkFJQUVwQTBDRk53UFFDRUVBSUFJcEEwZ2dBU2tEU0lVM0E5Z0lRUUFnQWlrRFVDQUJLUU5RaFRjRDRBaEJBQ0FDS1FOWUlBRXBBMWlGTndQb0NFRUFJQUlwQTJBZ0FTa0RZSVUzQS9BSVFRQWdBaWtEYUNBQktRTm9oVGNEK0FoQkFDQUNLUU53SUFFcEEzQ0ZOd09BQ1VFQUlBSXBBM2dnQVNrRGVJVTNBNGdKUVFBZ0Fpa0RnQUVnQVNrRGdBR0ZOd09RQ1VFQUlBSXBBNGdCSUFFcEE0Z0JoVGNEbUFsQkFDQUNLUU9RQVNBQktRT1FBWVUzQTZBSlFRQWdBaWtEbUFFZ0FTa0RtQUdGTndPb0NVRUFJQUlwQTZBQklBRXBBNkFCaFRjRHNBbEJBQ0FDS1FPb0FTQUJLUU9vQVlVM0E3Z0pRUUFnQWlrRHNBRWdBU2tEc0FHRk53UEFDVUVBSUFJcEE3Z0JJQUVwQTdnQmhUY0R5QWxCQUNBQ0tRUEFBU0FCS1FQQUFZVTNBOUFKUVFBZ0Fpa0R5QUVnQVNrRHlBR0ZOd1BZQ1VFQUlBSXBBOUFCSUFFcEE5QUJoVGNENEFsQkFDQUNLUVBZQVNBQktRUFlBWVUzQStnSlFRQWdBaWtENEFFZ0FTa0Q0QUdGTndQd0NVRUFJQUlwQStnQklBRXBBK2dCaFRjRCtBbEJBQ0FDS1FQd0FTQUJLUVB3QVlVM0E0QUtRUUFnQWlrRCtBRWdBU2tEK0FHRk53T0lDa0VBSUFJcEE0QUNJQUVwQTRBQ2hUY0RrQXBCQUNBQ0tRT0lBaUFCS1FPSUFvVTNBNWdLUVFBZ0Fpa0RrQUlnQVNrRGtBS0ZOd09nQ2tFQUlBSXBBNWdDSUFFcEE1Z0NoVGNEcUFwQkFDQUNLUU9nQWlBQktRT2dBb1UzQTdBS1FRQWdBaWtEcUFJZ0FTa0RxQUtGTndPNENrRUFJQUlwQTdBQ0lBRXBBN0FDaFRjRHdBcEJBQ0FDS1FPNEFpQUJLUU80QW9VM0E4Z0tRUUFnQWlrRHdBSWdBU2tEd0FLRk53UFFDa0VBSUFJcEE4Z0NJQUVwQThnQ2hUY0QyQXBCQUNBQ0tRUFFBaUFCS1FQUUFvVTNBK0FLUVFBZ0Fpa0QyQUlnQVNrRDJBS0ZOd1BvQ2tFQUlBSXBBK0FDSUFFcEErQUNoVGNEOEFwQkFDQUNLUVBvQWlBQktRUG9Bb1UzQS9nS1FRQWdBaWtEOEFJZ0FTa0Q4QUtGTndPQUMwRUFJQUlwQS9nQ0lBRXBBL2dDaFRjRGlBdEJBQ0FDS1FPQUF5QUJLUU9BQTRVM0E1QUxRUUFnQWlrRGlBTWdBU2tEaUFPRk53T1lDMEVBSUFJcEE1QURJQUVwQTVBRGhUY0RvQXRCQUNBQ0tRT1lBeUFCS1FPWUE0VTNBNmdMUVFBZ0Fpa0RvQU1nQVNrRG9BT0ZOd093QzBFQUlBSXBBNmdESUFFcEE2Z0RoVGNEdUF0QkFDQUNLUU93QXlBQktRT3dBNFUzQThBTFFRQWdBaWtEdUFNZ0FTa0R1QU9GTndQSUMwRUFJQUlwQThBRElBRXBBOEFEaFRjRDBBdEJBQ0FDS1FQSUF5QUJLUVBJQTRVM0E5Z0xRUUFnQWlrRDBBTWdBU2tEMEFPRk53UGdDMEVBSUFJcEE5Z0RJQUVwQTlnRGhUY0Q2QXRCQUNBQ0tRUGdBeUFCS1FQZ0E0VTNBL0FMUVFBZ0Fpa0Q2QU1nQVNrRDZBT0ZOd1A0QzBFQUlBSXBBL0FESUFFcEEvQURoVGNEZ0F4QkFDQUNLUVA0QXlBQktRUDRBNFUzQTRnTVFRQWdBaWtEZ0FRZ0FTa0RnQVNGTndPUURFRUFJQUlwQTRnRUlBRXBBNGdFaFRjRG1BeEJBQ0FDS1FPUUJDQUJLUU9RQklVM0E2QU1RUUFnQWlrRG1BUWdBU2tEbUFTRk53T29ERUVBSUFJcEE2QUVJQUVwQTZBRWhUY0RzQXhCQUNBQ0tRT29CQ0FCS1FPb0JJVTNBN2dNUVFBZ0Fpa0RzQVFnQVNrRHNBU0ZOd1BBREVFQUlBSXBBN2dFSUFFcEE3Z0VoVGNEeUF4QkFDQUNLUVBBQkNBQktRUEFCSVUzQTlBTVFRQWdBaWtEeUFRZ0FTa0R5QVNGTndQWURFRUFJQUlwQTlBRUlBRXBBOUFFaFRjRDRBeEJBQ0FDS1FQWUJDQUJLUVBZQklVM0ErZ01RUUFnQWlrRDRBUWdBU2tENEFTRk53UHdERUVBSUFJcEErZ0VJQUVwQStnRWhUY0QrQXhCQUNBQ0tRUHdCQ0FCS1FQd0JJVTNBNEFOUVFBZ0Fpa0QrQVFnQVNrRCtBU0ZOd09JRFVFQUlBSXBBNEFGSUFFcEE0QUZoVGNEa0ExQkFDQUNLUU9JQlNBQktRT0lCWVUzQTVnTlFRQWdBaWtEa0FVZ0FTa0RrQVdGTndPZ0RVRUFJQUlwQTVnRklBRXBBNWdGaFRjRHFBMUJBQ0FDS1FPZ0JTQUJLUU9nQllVM0E3QU5RUUFnQWlrRHFBVWdBU2tEcUFXRk53TzREVUVBSUFJcEE3QUZJQUVwQTdBRmhUY0R3QTFCQUNBQ0tRTzRCU0FCS1FPNEJZVTNBOGdOUVFBZ0Fpa0R3QVVnQVNrRHdBV0ZOd1BRRFVFQUlBSXBBOGdGSUFFcEE4Z0ZoVGNEMkExQkFDQUNLUVBRQlNBQktRUFFCWVUzQStBTlFRQWdBaWtEMkFVZ0FTa0QyQVdGTndQb0RVRUFJQUlwQStBRklBRXBBK0FGaFRjRDhBMUJBQ0FDS1FQb0JTQUJLUVBvQllVM0EvZ05RUUFnQWlrRDhBVWdBU2tEOEFXRk53T0FEa0VBSUFJcEEvZ0ZJQUVwQS9nRmhUY0RpQTVCQUNBQ0tRT0FCaUFCS1FPQUJvVTNBNUFPUVFBZ0Fpa0RpQVlnQVNrRGlBYUZOd09ZRGtFQUlBSXBBNUFHSUFFcEE1QUdoVGNEb0E1QkFDQUNLUU9ZQmlBQktRT1lCb1UzQTZnT1FRQWdBaWtEb0FZZ0FTa0RvQWFGTndPd0RrRUFJQUlwQTZnR0lBRXBBNmdHaFRjRHVBNUJBQ0FDS1FPd0JpQUJLUU93Qm9VM0E4QU9RUUFnQWlrRHVBWWdBU2tEdUFhRk53UElEa0VBSUFJcEE4QUdJQUVwQThBR2hUY0QwQTVCQUNBQ0tRUElCaUFCS1FQSUJvVTNBOWdPUVFBZ0Fpa0QwQVlnQVNrRDBBYUZOd1BnRGtFQUlBSXBBOWdHSUFFcEE5Z0doVGNENkE1QkFDQUNLUVBnQmlBQktRUGdCb1UzQS9BT1FRQWdBaWtENkFZZ0FTa0Q2QWFGTndQNERrRUFJQUlwQS9BR0lBRXBBL0FHaFRjRGdBOUJBQ0FDS1FQNEJpQUJLUVA0Qm9VM0E0Z1BRUUFnQWlrRGdBY2dBU2tEZ0FlRk53T1FEMEVBSUFJcEE0Z0hJQUVwQTRnSGhUY0RtQTlCQUNBQ0tRT1FCeUFCS1FPUUI0VTNBNkFQUVFBZ0Fpa0RtQWNnQVNrRG1BZUZOd09vRDBFQUlBSXBBNkFISUFFcEE2QUhoVGNEc0E5QkFDQUNLUU9vQnlBQktRT29CNFUzQTdnUFFRQWdBaWtEc0FjZ0FTa0RzQWVGTndQQUQwRUFJQUlwQTdnSElBRXBBN2dIaFRjRHlBOUJBQ0FDS1FQQUJ5QUJLUVBBQjRVM0E5QVBRUUFnQWlrRHlBY2dBU2tEeUFlRk53UFlEMEVBSUFJcEE5QUhJQUVwQTlBSGhUY0Q0QTlCQUNBQ0tRUFlCeUFCS1FQWUI0VTNBK2dQUVFBZ0Fpa0Q0QWNnQVNrRDRBZUZOd1B3RDBFQUlBSXBBK2dISUFFcEErZ0hoVGNEK0E5QkFDQUNLUVB3QnlBQktRUHdCNFUzQTRBUVFRQWdBaWtEK0FjZ0FTa0QrQWVGTndPSUVFR1FDRUdZQ0VHZ0NFR29DRUd3Q0VHNENFSEFDRUhJQ0VIUUNFSFlDRUhnQ0VIb0NFSHdDRUg0Q0VHQUNVR0lDUkFDUVpBSlFaZ0pRYUFKUWFnSlFiQUpRYmdKUWNBSlFjZ0pRZEFKUWRnSlFlQUpRZWdKUWZBSlFmZ0pRWUFLUVlnS0VBSkJrQXBCbUFwQm9BcEJxQXBCc0FwQnVBcEJ3QXBCeUFwQjBBcEIyQXBCNEFwQjZBcEI4QXBCK0FwQmdBdEJpQXNRQWtHUUMwR1lDMEdnQzBHb0MwR3dDMEc0QzBIQUMwSElDMEhRQzBIWUMwSGdDMEhvQzBId0MwSDRDMEdBREVHSURCQUNRWkFNUVpnTVFhQU1RYWdNUWJBTVFiZ01RY0FNUWNnTVFkQU1RZGdNUWVBTVFlZ01RZkFNUWZnTVFZQU5RWWdORUFKQmtBMUJtQTFCb0ExQnFBMUJzQTFCdUExQndBMUJ5QTFCMEExQjJBMUI0QTFCNkExQjhBMUIrQTFCZ0E1QmlBNFFBa0dRRGtHWURrR2dEa0dvRGtHd0RrRzREa0hBRGtISURrSFFEa0hZRGtIZ0RrSG9Ea0h3RGtINERrR0FEMEdJRHhBQ1FaQVBRWmdQUWFBUFFhZ1BRYkFQUWJnUFFjQVBRY2dQUWRBUFFkZ1BRZUFQUWVnUFFmQVBRZmdQUVlBUVFZZ1FFQUpCa0FoQm1BaEJrQWxCbUFsQmtBcEJtQXBCa0F0Qm1BdEJrQXhCbUF4QmtBMUJtQTFCa0E1Qm1BNUJrQTlCbUE4UUFrR2dDRUdvQ0VHZ0NVR29DVUdnQ2tHb0NrR2dDMEdvQzBHZ0RFR29ERUdnRFVHb0RVR2dEa0dvRGtHZ0QwR29EeEFDUWJBSVFiZ0lRYkFKUWJnSlFiQUtRYmdLUWJBTFFiZ0xRYkFNUWJnTVFiQU5RYmdOUWJBT1FiZ09RYkFQUWJnUEVBSkJ3QWhCeUFoQndBbEJ5QWxCd0FwQnlBcEJ3QXRCeUF0QndBeEJ5QXhCd0ExQnlBMUJ3QTVCeUE1QndBOUJ5QThRQWtIUUNFSFlDRUhRQ1VIWUNVSFFDa0hZQ2tIUUMwSFlDMEhRREVIWURFSFFEVUhZRFVIUURrSFlEa0hRRDBIWUR4QUNRZUFJUWVnSVFlQUpRZWdKUWVBS1FlZ0tRZUFMUWVnTFFlQU1RZWdNUWVBTlFlZ05RZUFPUWVnT1FlQVBRZWdQRUFKQjhBaEIrQWhCOEFsQitBbEI4QXBCK0FwQjhBdEIrQXRCOEF4QitBeEI4QTFCK0ExQjhBNUIrQTVCOEE5QitBOFFBa0dBQ1VHSUNVR0FDa0dJQ2tHQUMwR0lDMEdBREVHSURFR0FEVUdJRFVHQURrR0lEa0dBRDBHSUQwR0FFRUdJRUJBQ0FrQUNRQ0FEUlEwQUEwQWdBQ0FFYWlJRElBSWdCR29pQlNrREFDQUJJQVJxSWdZcEF3Q0ZJQVJCa0FocUtRTUFoU0FES1FNQWhUY0RBQ0FEUVFocUlnTWdCVUVJYWlrREFDQUdRUWhxS1FNQWhTQUVRWmdJYWlrREFJVWdBeWtEQUlVM0F3QWdCRUVRYWlJRVFZQUlSdzBBREFJTEMwRUFJUVFEUUNBQUlBUnFJZ01nQWlBRWFpSUZLUU1BSUFFZ0JHb2lCaWtEQUlVZ0JFR1FDR29wQXdDRk53TUFJQU5CQ0dvZ0JVRUlhaWtEQUNBR1FRaHFLUU1BaFNBRVFaZ0lhaWtEQUlVM0F3QWdCRUVRYWlJRVFZQUlSdzBBQ3dzTDdRY01CWDhCZmdSL0FuNENmd0YrQTM4QmZnWi9BWDREZndGK0FrQkJBQ2dDZ0FnaUFpQUJRUXAwYWlJREtBSUlJQUZIRFFBZ0F5Z0NEQ0VFSUFNb0FnQWhCVUVBSUFNb0FoUWlCcTAzQTdnUVFRQWdCSzBpQnpjRHNCQkJBQ0FGSUFFZ0JVRUNkRzRpQ0d3aUNVRUNkSzAzQTZnUUFrQUNRQUpBQWtBZ0JFVU5BRUYvSVFvZ0JVVU5BU0FJUVFOc0lRc2dDRUVDZENJRXJTRU1JQVd0SVEwZ0JrRUNSaUVPSUFaQmYycEJBa2toRDBJQUlSQURRRUVBSUJBM0E1QVFJQTRnRUZBaUVYRWhFaUFRcHlFVFFnQWhGRUVBSVFFRFFFRUFJQlEzQTZBUUlBWkJBVVlnRWlBVVFnSlVjWEloRlNBUUlCU0VVQ0lESUE5eElSWkJmeUFCUVFGcVFRTnhJQWhzUVg5cUlCRWJJUmNnQVNBVGNpRVlJQUVnQ0d3aEdTQURRUUYwSVJwQ0FDRWJBMEJCQUVJQU53UEFFRUVBSUJzM0E1Z1FJQm9oQVFKQUlCWkZEUUJCQUVJQk53UEFFRUdRR0VHUUVFR1FJRUVBRUFOQmtCaEJrQmhCa0NCQkFCQURRUUloQVFzQ1FDQUJJQWhQRFFBZ0JDQWJweUljYkNBWmFpQUJhaUVEQTBBZ0EwRUFJQVJCQUNBVVVDSWRHeUFCRzJwQmYyb2hIZ0pBQWtBZ0ZRMEFRUUFvQW9BSUlnSWdIa0VLZENJZWFpRUtEQUVMQWtBZ0FVSC9BSEVpQWcwQVFRQkJBQ2tEd0JCQ0FYdzNBOEFRUVpBWVFaQVFRWkFnUVFBUUEwR1FHRUdRR0VHUUlFRUFFQU1MSUI1QkNuUWhIaUFDUVFOMFFaQVlhaUVLUVFBb0FvQUlJUUlMSUFJZ0EwRUtkR29nQWlBZWFpQUNJQW9wQXdBaUgwSWdpS2NnQlhBZ0hDQVlHeUllSUFSc0lBRWdBVUVBSUJzZ0hxMVJJaDRiSWdvZ0hSc2dHV29nQ2lBTGFpQVJHeUFCUlNBZWNtc2lIU0FYYXEwZ0gwTC8vLy8vRDRNaUh5QWZma0lnaUNBZHJYNUNJSWg5SUF5Q3AycEJDblJxUVFFUUF5QURRUUZxSVFNZ0NDQUJRUUZxSWdGSERRQUxDeUFiUWdGOEloc2dEVklOQUFzZ0ZFSUJmQ0lVcHlFQklCUkNCRklOQUFzZ0VFSUJmQ0lRSUFkU0RRQUxDeUFKUVF4MFFZQjRhaUVaUVFBb0FvQUlJUUlnQlVGL2FpSUtSUTBDREFFTFFRQkNBemNEb0JCQkFDQUVRWDlxclRjRGtCQkJnSGdoR1FzZ0FpQVphaUVkSUFoQkRIUWhDRUVBSVI0RFFDQUlJQjVCQVdvaUhteEJnSGhxSVFSQkFDRUJBMEFnSFNBQmFpSURJQU1wQXdBZ0FpQUVJQUZxYWlrREFJVTNBd0FnQTBFSWFpSURJQU1wQXdBZ0FpQUVJQUZCQ0hKcWFpa0RBSVUzQXdBZ0FVRUlhaUVESUFGQkVHb2hBU0FEUWZnSFNRMEFDeUFlSUFwSERRQUxDeUFDSUJscUlSMUJlQ0VCQTBBZ0FpQUJhaUlEUVFocUlCMGdBV29pQkVFSWFpa0RBRGNEQUNBRFFSQnFJQVJCRUdvcEF3QTNBd0FnQTBFWWFpQUVRUmhxS1FNQU53TUFJQU5CSUdvZ0JFRWdhaWtEQURjREFDQUJRU0JxSWdGQitBZEpEUUFMQ3dzPVwiO1xuICAgIHZhciBoYXNoJGkgPSBcIjdhYjE0YzkxXCI7XG4gICAgdmFyIHdhc21Kc29uJGkgPSB7XG4gICAgXHRuYW1lOiBuYW1lJGksXG4gICAgXHRkYXRhOiBkYXRhJGksXG4gICAgXHRoYXNoOiBoYXNoJGlcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gZW5jb2RlUmVzdWx0KHNhbHQsIG9wdGlvbnMsIHJlcykge1xuICAgICAgICBjb25zdCBwYXJhbWV0ZXJzID0gW1xuICAgICAgICAgICAgYG09JHtvcHRpb25zLm1lbW9yeVNpemV9YCxcbiAgICAgICAgICAgIGB0PSR7b3B0aW9ucy5pdGVyYXRpb25zfWAsXG4gICAgICAgICAgICBgcD0ke29wdGlvbnMucGFyYWxsZWxpc219YCxcbiAgICAgICAgXS5qb2luKCcsJyk7XG4gICAgICAgIHJldHVybiBgJGFyZ29uMiR7b3B0aW9ucy5oYXNoVHlwZX0kdj0xOSQke3BhcmFtZXRlcnN9JCR7ZW5jb2RlQmFzZTY0KHNhbHQsIGZhbHNlKX0kJHtlbmNvZGVCYXNlNjQocmVzLCBmYWxzZSl9YDtcbiAgICB9XG4gICAgY29uc3QgdWludDMyVmlldyA9IG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoNCkpO1xuICAgIGZ1bmN0aW9uIGludDMyTEUoeCkge1xuICAgICAgICB1aW50MzJWaWV3LnNldEludDMyKDAsIHgsIHRydWUpO1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkodWludDMyVmlldy5idWZmZXIpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBoYXNoRnVuYyhibGFrZTUxMiwgYnVmLCBsZW4pIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGlmIChsZW4gPD0gNjQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBibGFrZSA9IHlpZWxkIGNyZWF0ZUJMQUtFMmIobGVuICogOCk7XG4gICAgICAgICAgICAgICAgYmxha2UudXBkYXRlKGludDMyTEUobGVuKSk7XG4gICAgICAgICAgICAgICAgYmxha2UudXBkYXRlKGJ1Zik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJsYWtlLmRpZ2VzdCgnYmluYXJ5Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCByID0gTWF0aC5jZWlsKGxlbiAvIDMyKSAtIDI7XG4gICAgICAgICAgICBjb25zdCByZXQgPSBuZXcgVWludDhBcnJheShsZW4pO1xuICAgICAgICAgICAgYmxha2U1MTIuaW5pdCgpO1xuICAgICAgICAgICAgYmxha2U1MTIudXBkYXRlKGludDMyTEUobGVuKSk7XG4gICAgICAgICAgICBibGFrZTUxMi51cGRhdGUoYnVmKTtcbiAgICAgICAgICAgIGxldCB2cCA9IGJsYWtlNTEyLmRpZ2VzdCgnYmluYXJ5Jyk7XG4gICAgICAgICAgICByZXQuc2V0KHZwLnN1YmFycmF5KDAsIDMyKSwgMCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHI7IGkrKykge1xuICAgICAgICAgICAgICAgIGJsYWtlNTEyLmluaXQoKTtcbiAgICAgICAgICAgICAgICBibGFrZTUxMi51cGRhdGUodnApO1xuICAgICAgICAgICAgICAgIHZwID0gYmxha2U1MTIuZGlnZXN0KCdiaW5hcnknKTtcbiAgICAgICAgICAgICAgICByZXQuc2V0KHZwLnN1YmFycmF5KDAsIDMyKSwgaSAqIDMyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHBhcnRpYWxCeXRlc05lZWRlZCA9IGxlbiAtIDMyICogcjtcbiAgICAgICAgICAgIGxldCBibGFrZVNtYWxsO1xuICAgICAgICAgICAgaWYgKHBhcnRpYWxCeXRlc05lZWRlZCA9PT0gNjQpIHtcbiAgICAgICAgICAgICAgICBibGFrZVNtYWxsID0gYmxha2U1MTI7XG4gICAgICAgICAgICAgICAgYmxha2VTbWFsbC5pbml0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBibGFrZVNtYWxsID0geWllbGQgY3JlYXRlQkxBS0UyYihwYXJ0aWFsQnl0ZXNOZWVkZWQgKiA4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJsYWtlU21hbGwudXBkYXRlKHZwKTtcbiAgICAgICAgICAgIHZwID0gYmxha2VTbWFsbC5kaWdlc3QoJ2JpbmFyeScpO1xuICAgICAgICAgICAgcmV0LnNldCh2cC5zdWJhcnJheSgwLCBwYXJ0aWFsQnl0ZXNOZWVkZWQpLCByICogMzIpO1xuICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldEhhc2hUeXBlKHR5cGUpIHtcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIGNhc2UgJ2knOlxuICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gMjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBhcmdvbjJJbnRlcm5hbChvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgcGFyYWxsZWxpc20sIGl0ZXJhdGlvbnMsIGhhc2hMZW5ndGggfSA9IG9wdGlvbnM7XG4gICAgICAgICAgICBjb25zdCBwYXNzd29yZCA9IGdldFVJbnQ4QnVmZmVyKG9wdGlvbnMucGFzc3dvcmQpO1xuICAgICAgICAgICAgY29uc3Qgc2FsdCA9IGdldFVJbnQ4QnVmZmVyKG9wdGlvbnMuc2FsdCk7XG4gICAgICAgICAgICBjb25zdCB2ZXJzaW9uID0gMHgxMztcbiAgICAgICAgICAgIGNvbnN0IGhhc2hUeXBlID0gZ2V0SGFzaFR5cGUob3B0aW9ucy5oYXNoVHlwZSk7XG4gICAgICAgICAgICBjb25zdCB7IG1lbW9yeVNpemUgfSA9IG9wdGlvbnM7IC8vIGluIEtCXG4gICAgICAgICAgICBjb25zdCBzZWNyZXQgPSBnZXRVSW50OEJ1ZmZlcigoX2EgPSBvcHRpb25zLnNlY3JldCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJycpO1xuICAgICAgICAgICAgY29uc3QgW2FyZ29uMkludGVyZmFjZSwgYmxha2U1MTJdID0geWllbGQgUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgICAgIFdBU01JbnRlcmZhY2Uod2FzbUpzb24kaSwgMTAyNCksXG4gICAgICAgICAgICAgICAgY3JlYXRlQkxBS0UyYig1MTIpLFxuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAvLyBsYXN0IGJsb2NrIGlzIGZvciBzdG9yaW5nIHRoZSBpbml0IHZlY3RvclxuICAgICAgICAgICAgYXJnb24ySW50ZXJmYWNlLnNldE1lbW9yeVNpemUobWVtb3J5U2l6ZSAqIDEwMjQgKyAxMDI0KTtcbiAgICAgICAgICAgIGNvbnN0IGluaXRWZWN0b3IgPSBuZXcgVWludDhBcnJheSgyNCk7XG4gICAgICAgICAgICBjb25zdCBpbml0VmVjdG9yVmlldyA9IG5ldyBEYXRhVmlldyhpbml0VmVjdG9yLmJ1ZmZlcik7XG4gICAgICAgICAgICBpbml0VmVjdG9yVmlldy5zZXRJbnQzMigwLCBwYXJhbGxlbGlzbSwgdHJ1ZSk7XG4gICAgICAgICAgICBpbml0VmVjdG9yVmlldy5zZXRJbnQzMig0LCBoYXNoTGVuZ3RoLCB0cnVlKTtcbiAgICAgICAgICAgIGluaXRWZWN0b3JWaWV3LnNldEludDMyKDgsIG1lbW9yeVNpemUsIHRydWUpO1xuICAgICAgICAgICAgaW5pdFZlY3RvclZpZXcuc2V0SW50MzIoMTIsIGl0ZXJhdGlvbnMsIHRydWUpO1xuICAgICAgICAgICAgaW5pdFZlY3RvclZpZXcuc2V0SW50MzIoMTYsIHZlcnNpb24sIHRydWUpO1xuICAgICAgICAgICAgaW5pdFZlY3RvclZpZXcuc2V0SW50MzIoMjAsIGhhc2hUeXBlLCB0cnVlKTtcbiAgICAgICAgICAgIGFyZ29uMkludGVyZmFjZS53cml0ZU1lbW9yeShpbml0VmVjdG9yLCBtZW1vcnlTaXplICogMTAyNCk7XG4gICAgICAgICAgICBibGFrZTUxMi5pbml0KCk7XG4gICAgICAgICAgICBibGFrZTUxMi51cGRhdGUoaW5pdFZlY3Rvcik7XG4gICAgICAgICAgICBibGFrZTUxMi51cGRhdGUoaW50MzJMRShwYXNzd29yZC5sZW5ndGgpKTtcbiAgICAgICAgICAgIGJsYWtlNTEyLnVwZGF0ZShwYXNzd29yZCk7XG4gICAgICAgICAgICBibGFrZTUxMi51cGRhdGUoaW50MzJMRShzYWx0Lmxlbmd0aCkpO1xuICAgICAgICAgICAgYmxha2U1MTIudXBkYXRlKHNhbHQpO1xuICAgICAgICAgICAgYmxha2U1MTIudXBkYXRlKGludDMyTEUoc2VjcmV0Lmxlbmd0aCkpO1xuICAgICAgICAgICAgYmxha2U1MTIudXBkYXRlKHNlY3JldCk7XG4gICAgICAgICAgICBibGFrZTUxMi51cGRhdGUoaW50MzJMRSgwKSk7IC8vIGFzc29jaWF0ZWREYXRhIGxlbmd0aCArIGFzc29jaWF0ZWREYXRhXG4gICAgICAgICAgICBjb25zdCBzZWdtZW50cyA9IE1hdGguZmxvb3IobWVtb3J5U2l6ZSAvIChwYXJhbGxlbGlzbSAqIDQpKTsgLy8gbGVuZ3RoIG9mIGVhY2ggbGFuZVxuICAgICAgICAgICAgY29uc3QgbGFuZXMgPSBzZWdtZW50cyAqIDQ7XG4gICAgICAgICAgICBjb25zdCBwYXJhbSA9IG5ldyBVaW50OEFycmF5KDcyKTtcbiAgICAgICAgICAgIGNvbnN0IEgwID0gYmxha2U1MTIuZGlnZXN0KCdiaW5hcnknKTtcbiAgICAgICAgICAgIHBhcmFtLnNldChIMCk7XG4gICAgICAgICAgICBmb3IgKGxldCBsYW5lID0gMDsgbGFuZSA8IHBhcmFsbGVsaXNtOyBsYW5lKyspIHtcbiAgICAgICAgICAgICAgICBwYXJhbS5zZXQoaW50MzJMRSgwKSwgNjQpO1xuICAgICAgICAgICAgICAgIHBhcmFtLnNldChpbnQzMkxFKGxhbmUpLCA2OCk7XG4gICAgICAgICAgICAgICAgbGV0IHBvc2l0aW9uID0gbGFuZSAqIGxhbmVzO1xuICAgICAgICAgICAgICAgIGxldCBjaHVuayA9IHlpZWxkIGhhc2hGdW5jKGJsYWtlNTEyLCBwYXJhbSwgMTAyNCk7XG4gICAgICAgICAgICAgICAgYXJnb24ySW50ZXJmYWNlLndyaXRlTWVtb3J5KGNodW5rLCBwb3NpdGlvbiAqIDEwMjQpO1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uICs9IDE7XG4gICAgICAgICAgICAgICAgcGFyYW0uc2V0KGludDMyTEUoMSksIDY0KTtcbiAgICAgICAgICAgICAgICBjaHVuayA9IHlpZWxkIGhhc2hGdW5jKGJsYWtlNTEyLCBwYXJhbSwgMTAyNCk7XG4gICAgICAgICAgICAgICAgYXJnb24ySW50ZXJmYWNlLndyaXRlTWVtb3J5KGNodW5rLCBwb3NpdGlvbiAqIDEwMjQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgQyA9IG5ldyBVaW50OEFycmF5KDEwMjQpO1xuICAgICAgICAgICAgd3JpdGVIZXhUb1VJbnQ4KEMsIGFyZ29uMkludGVyZmFjZS5jYWxjdWxhdGUobmV3IFVpbnQ4QXJyYXkoW10pLCBtZW1vcnlTaXplKSk7XG4gICAgICAgICAgICBjb25zdCByZXMgPSB5aWVsZCBoYXNoRnVuYyhibGFrZTUxMiwgQywgaGFzaExlbmd0aCk7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5vdXRwdXRUeXBlID09PSAnaGV4Jykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRpZ2VzdENoYXJzID0gbmV3IFVpbnQ4QXJyYXkoaGFzaExlbmd0aCAqIDIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBnZXREaWdlc3RIZXgoZGlnZXN0Q2hhcnMsIHJlcywgaGFzaExlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5vdXRwdXRUeXBlID09PSAnZW5jb2RlZCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZW5jb2RlUmVzdWx0KHNhbHQsIG9wdGlvbnMsIHJlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyByZXR1cm4gYmluYXJ5IGZvcm1hdFxuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IHZhbGlkYXRlT3B0aW9ucyQzID0gKG9wdGlvbnMpID0+IHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAoIW9wdGlvbnMgfHwgdHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgb3B0aW9ucyBwYXJhbWV0ZXIuIEl0IHJlcXVpcmVzIGFuIG9iamVjdC4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW9wdGlvbnMucGFzc3dvcmQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUGFzc3dvcmQgbXVzdCBiZSBzcGVjaWZpZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBvcHRpb25zLnBhc3N3b3JkID0gZ2V0VUludDhCdWZmZXIob3B0aW9ucy5wYXNzd29yZCk7XG4gICAgICAgIGlmIChvcHRpb25zLnBhc3N3b3JkLmxlbmd0aCA8IDEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUGFzc3dvcmQgbXVzdCBiZSBzcGVjaWZpZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW9wdGlvbnMuc2FsdCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTYWx0IG11c3QgYmUgc3BlY2lmaWVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgb3B0aW9ucy5zYWx0ID0gZ2V0VUludDhCdWZmZXIob3B0aW9ucy5zYWx0KTtcbiAgICAgICAgaWYgKG9wdGlvbnMuc2FsdC5sZW5ndGggPCA4KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NhbHQgc2hvdWxkIGJlIGF0IGxlYXN0IDggYnl0ZXMgbG9uZycpO1xuICAgICAgICB9XG4gICAgICAgIG9wdGlvbnMuc2VjcmV0ID0gZ2V0VUludDhCdWZmZXIoKF9hID0gb3B0aW9ucy5zZWNyZXQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICcnKTtcbiAgICAgICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKG9wdGlvbnMuaXRlcmF0aW9ucykgfHwgb3B0aW9ucy5pdGVyYXRpb25zIDwgMSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJdGVyYXRpb25zIHNob3VsZCBiZSBhIHBvc2l0aXZlIG51bWJlcicpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihvcHRpb25zLnBhcmFsbGVsaXNtKSB8fCBvcHRpb25zLnBhcmFsbGVsaXNtIDwgMSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQYXJhbGxlbGlzbSBzaG91bGQgYmUgYSBwb3NpdGl2ZSBudW1iZXInKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIob3B0aW9ucy5oYXNoTGVuZ3RoKSB8fCBvcHRpb25zLmhhc2hMZW5ndGggPCA0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0hhc2ggbGVuZ3RoIHNob3VsZCBiZSBhdCBsZWFzdCA0IGJ5dGVzLicpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihvcHRpb25zLm1lbW9yeVNpemUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01lbW9yeSBzaXplIHNob3VsZCBiZSBzcGVjaWZpZWQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMubWVtb3J5U2l6ZSA8IDggKiBvcHRpb25zLnBhcmFsbGVsaXNtKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01lbW9yeSBzaXplIHNob3VsZCBiZSBhdCBsZWFzdCA4ICogcGFyYWxsZWxpc20uJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMub3V0cHV0VHlwZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBvcHRpb25zLm91dHB1dFR5cGUgPSAnaGV4JztcbiAgICAgICAgfVxuICAgICAgICBpZiAoIVsnaGV4JywgJ2JpbmFyeScsICdlbmNvZGVkJ10uaW5jbHVkZXMob3B0aW9ucy5vdXRwdXRUeXBlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnN1cHBvcnRlZCBvdXRwdXQgdHlwZSAke29wdGlvbnMub3V0cHV0VHlwZX0uIFZhbGlkIHZhbHVlczogWydoZXgnLCAnYmluYXJ5JywgJ2VuY29kZWQnXWApO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGVzIGhhc2ggdXNpbmcgdGhlIGFyZ29uMmkgcGFzc3dvcmQtaGFzaGluZyBmdW5jdGlvblxuICAgICAqIEByZXR1cm5zIENvbXB1dGVkIGhhc2hcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcmdvbjJpKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhbGlkYXRlT3B0aW9ucyQzKG9wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIGFyZ29uMkludGVybmFsKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucyksIHsgaGFzaFR5cGU6ICdpJyB9KSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGVzIGhhc2ggdXNpbmcgdGhlIGFyZ29uMmlkIHBhc3N3b3JkLWhhc2hpbmcgZnVuY3Rpb25cbiAgICAgKiBAcmV0dXJucyBDb21wdXRlZCBoYXNoXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJnb24yaWQob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFsaWRhdGVPcHRpb25zJDMob3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gYXJnb24ySW50ZXJuYWwoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKSwgeyBoYXNoVHlwZTogJ2lkJyB9KSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGVzIGhhc2ggdXNpbmcgdGhlIGFyZ29uMmQgcGFzc3dvcmQtaGFzaGluZyBmdW5jdGlvblxuICAgICAqIEByZXR1cm5zIENvbXB1dGVkIGhhc2hcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcmdvbjJkKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhbGlkYXRlT3B0aW9ucyQzKG9wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIGFyZ29uMkludGVybmFsKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucyksIHsgaGFzaFR5cGU6ICdkJyB9KSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCBnZXRIYXNoUGFyYW1ldGVycyA9IChwYXNzd29yZCwgZW5jb2RlZCwgc2VjcmV0KSA9PiB7XG4gICAgICAgIGNvbnN0IHJlZ2V4ID0gL15cXCRhcmdvbjIoaWR8aXxkKVxcJHY9KFswLTldKylcXCQoKD86W210cF09WzAtOV0rLCl7Mn1bbXRwXT1bMC05XSspXFwkKFtBLVphLXowLTkrL10rKVxcJChbQS1aYS16MC05Ky9dKykkLztcbiAgICAgICAgY29uc3QgbWF0Y2ggPSBlbmNvZGVkLm1hdGNoKHJlZ2V4KTtcbiAgICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGhhc2gnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBbLCBoYXNoVHlwZSwgdmVyc2lvbiwgcGFyYW1ldGVycywgc2FsdCwgaGFzaF0gPSBtYXRjaDtcbiAgICAgICAgaWYgKHZlcnNpb24gIT09ICcxOScpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgdmVyc2lvbjogJHt2ZXJzaW9ufWApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcnNlZFBhcmFtZXRlcnMgPSB7fTtcbiAgICAgICAgY29uc3QgcGFyYW1NYXAgPSB7IG06ICdtZW1vcnlTaXplJywgcDogJ3BhcmFsbGVsaXNtJywgdDogJ2l0ZXJhdGlvbnMnIH07XG4gICAgICAgIHBhcmFtZXRlcnMuc3BsaXQoJywnKS5mb3JFYWNoKCh4KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBbbiwgdl0gPSB4LnNwbGl0KCc9Jyk7XG4gICAgICAgICAgICBwYXJzZWRQYXJhbWV0ZXJzW3BhcmFtTWFwW25dXSA9IHBhcnNlSW50KHYsIDEwKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHBhcnNlZFBhcmFtZXRlcnMpLCB7IHBhc3N3b3JkLFxuICAgICAgICAgICAgc2VjcmV0LCBoYXNoVHlwZTogaGFzaFR5cGUsIHNhbHQ6IGRlY29kZUJhc2U2NChzYWx0KSwgaGFzaExlbmd0aDogZ2V0RGVjb2RlQmFzZTY0TGVuZ3RoKGhhc2gpLCBvdXRwdXRUeXBlOiAnZW5jb2RlZCcgfSk7XG4gICAgfTtcbiAgICBjb25zdCB2YWxpZGF0ZVZlcmlmeU9wdGlvbnMkMSA9IChvcHRpb25zKSA9PiB7XG4gICAgICAgIGlmICghb3B0aW9ucyB8fCB0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBvcHRpb25zIHBhcmFtZXRlci4gSXQgcmVxdWlyZXMgYW4gb2JqZWN0LicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmhhc2ggPT09IHVuZGVmaW5lZCB8fCB0eXBlb2Ygb3B0aW9ucy5oYXNoICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdIYXNoIHNob3VsZCBiZSBzcGVjaWZpZWQnKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogVmVyaWZpZXMgcGFzc3dvcmQgdXNpbmcgdGhlIGFyZ29uMiBwYXNzd29yZC1oYXNoaW5nIGZ1bmN0aW9uXG4gICAgICogQHJldHVybnMgVHJ1ZSBpZiB0aGUgZW5jb2RlZCBoYXNoIG1hdGNoZXMgdGhlIHBhc3N3b3JkXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJnb24yVmVyaWZ5KG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhbGlkYXRlVmVyaWZ5T3B0aW9ucyQxKG9wdGlvbnMpO1xuICAgICAgICAgICAgY29uc3QgcGFyYW1zID0gZ2V0SGFzaFBhcmFtZXRlcnMob3B0aW9ucy5wYXNzd29yZCwgb3B0aW9ucy5oYXNoLCBvcHRpb25zLnNlY3JldCk7XG4gICAgICAgICAgICB2YWxpZGF0ZU9wdGlvbnMkMyhwYXJhbXMpO1xuICAgICAgICAgICAgY29uc3QgaGFzaFN0YXJ0ID0gb3B0aW9ucy5oYXNoLmxhc3RJbmRleE9mKCckJykgKyAxO1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0geWllbGQgYXJnb24ySW50ZXJuYWwocGFyYW1zKTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQuc3Vic3RyaW5nKGhhc2hTdGFydCkgPT09IG9wdGlvbnMuaGFzaC5zdWJzdHJpbmcoaGFzaFN0YXJ0KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdmFyIG5hbWUkaCA9IFwiYmxha2Uyc1wiO1xuICAgIHZhciBkYXRhJGggPSBcIkFHRnpiUUVBQUFBQkVRUmdBQUYvWUFKL2Z3QmdBWDhBWUFBQUF3a0lBQUVDQXdJQ0FBRUZCQUVCQWdJR0RnSi9BVUdnaWdVTGZ3QkJnQWdMQjNBSUJtMWxiVzl5ZVFJQURraGhjMmhmUjJWMFFuVm1abVZ5QUFBS1NHRnphRjlHYVc1aGJBQURDVWhoYzJoZlNXNXBkQUFFQzBoaGMyaGZWWEJrWVhSbEFBVU5TR0Z6YUY5SFpYUlRkR0YwWlFBR0RraGhjMmhmUTJGc1kzVnNZWFJsQUFjS1UxUkJWRVZmVTBsYVJRTUJDcjB5Q0FVQVFZQUpDNlVGQVFaL0FrQWdBVUVCU0EwQUFrQUNRQUpBUWNBQVFRQW9BdkNKQVNJQ2F5SURJQUZJRFFBZ0FTRUREQUVMUVFCQkFEWUM4SWtCQWtBZ0FrSEFBRVlOQUNBQ1FiQ0pBV29oQkFKQUFrQWdBMEVIY1NJRkRRQWdBQ0VHSUFNaEJ3d0JDeUFGSVFjZ0FDRUdBMEFnQkNBR0xRQUFPZ0FBSUFSQkFXb2hCQ0FHUVFGcUlRWWdCMEYvYWlJSERRQUxRY0FBSUFJZ0JXcHJJUWNMSUFKQlIycEJCMGtOQUFOQUlBUWdCaTBBQURvQUFDQUVJQVl0QUFFNkFBRWdCQ0FHTFFBQ09nQUNJQVFnQmkwQUF6b0FBeUFFSUFZdEFBUTZBQVFnQkNBR0xRQUZPZ0FGSUFRZ0JpMEFCam9BQmlBRUlBWXRBQWM2QUFjZ0JFRUlhaUVFSUFaQkNHb2hCaUFIUVhocUlnY05BQXNMUVFBaEJFRUFRUUFvQXFDSkFTSUdRY0FBYWpZQ29Ja0JRUUJCQUNnQ3BJa0JJQVpCdjM5TGFqWUNwSWtCUWJDSkFSQUNJQUFnQTJvaEFBSkFJQUVnQTJzaUEwSEJBRWdOQUNBQ0lBRnFJUVFEUUVFQVFRQW9BcUNKQVNJR1FjQUFhallDb0lrQlFRQkJBQ2dDcElrQklBWkJ2MzlMYWpZQ3BJa0JJQUFRQWlBQVFjQUFhaUVBSUFSQlFHb2lCRUdBQVVzTkFBc2dCRUZBYWlFRFFRQW9BdkNKQVNFQ0RBRUxRUUFvQXZDSkFTRUNJQU5GRFFFTElBTkJmMm9oQVNBQ1FiQ0pBV29oQkFKQUFrQWdBMEVIY1NJR0RRQWdBeUVIREFFTElBTkJlSEVoQndOQUlBUWdBQzBBQURvQUFDQUVRUUZxSVFRZ0FFRUJhaUVBSUFaQmYyb2lCZzBBQ3dzQ1FDQUJRUWRKRFFBRFFDQUVJQUF0QUFBNkFBQWdCQ0FBTFFBQk9nQUJJQVFnQUMwQUFqb0FBaUFFSUFBdEFBTTZBQU1nQkNBQUxRQUVPZ0FFSUFRZ0FDMEFCVG9BQlNBRUlBQXRBQVk2QUFZZ0JDQUFMUUFIT2dBSElBUkJDR29oQkNBQVFRaHFJUUFnQjBGNGFpSUhEUUFMQzBFQUtBTHdpUUVoQWlBRElRUUxRUUFnQWlBRWFqWUM4SWtCQ3d1WEp3b0JmZ0YvQW40Q2Z3RitCMzhEZmdaL0FYNFNmMEVBUVFBcEE1aUpBU0lCcHlJQ1FRQXBBNGlKQVNJRHAyb2dBQ2tERUNJRXB5SUZhaUlHUVFBcEE2aUpBVUtyczQvOGthT3o4TnNBaFNJSHAzTkJFSGNpQ0VIeTVydmpBMm9pQ1NBQ2MwRVVkeUlLSUFacUlBUkNJSWluSWdKcUlnc2dDSE5CR0hjaURDQUphaUlOSUFwelFSbDNJZzVCQUNrRGtJa0JJZ1JDSUlpbklnaEJBQ2tEZ0lrQklnOUNJSWluYWlBQUtRTUlJaENuSWdacUlnbEJBQ2tEb0lrQlF2K2t1WWpGa2RxQ20zK0ZJaEZDSUlpbmMwRVFkeUlTUVlYZG50dDdhaUlUSUFoelFSUjNJaFFnQ1dvZ0VFSWdpS2NpQ0dvaUZXb2dBQ2tES0NJUXB5SUphaUlXSUFTbkloY2dENmRxSUFBcEF3QWlHS2NpQ21vaUdTQVJwM05CRUhjaUdrSG56S2ZRQm1vaUd5QVhjMEVVZHlJY0lCbHFJQmhDSUlpbkloZHFJaDBnR25OQkdIY2lIbk5CRUhjaUh5QUJRaUNJcHlJYUlBTkNJSWluYWlBQUtRTVlJZ0duSWhscUlpQWdCMElnaUtkelFSQjNJaUZCdXVxL3FucHFJaUlnR25OQkZIY2lJeUFnYWlBQlFpQ0lweUlhYWlJZ0lDRnpRUmgzSWlFZ0ltb2lJbW9pSkNBT2MwRVVkeUlsSUJacUlCQkNJSWluSWc1cUloWWdIM05CR0hjaUh5QWthaUlrSUJVZ0VuTkJHSGNpRlNBVGFpSW1JQlJ6UVJsM0loTWdIV29nQUNrRElDSUJweUlTYWlJVUlDRnpRUkIzSWgwZ0RXb2lJU0FUYzBFVWR5SW5JQlJxSUFGQ0lJaW5JZzFxSWhRZ0hYTkJHSGNpSFNBaUlDTnpRUmwzSWhNZ0Myb2dBQ2tETUNJQnB5SUxhaUlpSUJWelFSQjNJaFVnSGlBYmFpSWJhaUllSUJOelFSUjNJaU1nSW1vZ0FVSWdpS2NpRTJvaUlpQVZjMEVZZHlJVklCNXFJaDRnSTNOQkdYY2lJeUFnSUJzZ0hITkJHWGNpRzJvZ0FDa0RPQ0lCcHlJQWFpSWNJQXh6UVJCM0lpQWdKbW9pSmlBYmMwRVVkeUliSUJ4cUlBRkNJSWluSWd4cUloeHFJQk5xSWloelFSQjNJaWxxSWlvZ0kzTkJGSGNpSXlBb2FpQVphaUlvSUI0Z0h5QWNJQ0J6UVJoM0lod2dKbW9pSUNBYmMwRVpkeUliSUJScUlBQnFJaFJ6UVJCM0loOXFJaDRnRzNOQkZIY2lHeUFVYWlBSmFpSVVJQjl6UVJoM0loOGdIbW9pSGlBYmMwRVpkeUliYWlBQ2FpSW1JQjBnSVdvaUhTQWNJQ1FnSlhOQkdYY2lJU0FpYWlBTmFpSWljMEVRZHlJY2FpSWtJQ0Z6UVJSM0lpRWdJbW9nREdvaUlpQWNjMEVZZHlJY2MwRVFkeUlsSUNBZ0ZTQWRJQ2R6UVJsM0loMGdGbW9nQldvaUZuTkJFSGNpRldvaUlDQWRjMEVVZHlJZElCWnFJQkpxSWhZZ0ZYTkJHSGNpRlNBZ2FpSWdhaUluSUJ0elFSUjNJaHNnSm1vZ0NHb2lKaUFsYzBFWWR5SWxJQ2RxSWljZ0tDQXBjMEVZZHlJb0lDcHFJaWtnSTNOQkdYY2lJeUFpYWlBT2FpSWlJQlZ6UVJCM0loVWdIbW9pSGlBamMwRVVkeUlqSUNKcUlCcHFJaUlnRlhOQkdIY2lGU0FnSUIxelFSbDNJaDBnRkdvZ0Yyb2lGQ0FvYzBFUWR5SWdJQndnSkdvaUhHb2lKQ0FkYzBFVWR5SWRJQlJxSUF0cUloUWdJSE5CR0hjaUlDQWthaUlrSUIxelFSbDNJaDBnSENBaGMwRVpkeUljSUJacUlBcHFJaFlnSDNOQkVIY2lIeUFwYWlJaElCeHpRUlIzSWh3Z0Ztb2dCbW9pRm1vZ0Myb2lLSE5CRUhjaUtXb2lLaUFkYzBFVWR5SWRJQ2hxSUFwcUlpZ2dLWE5CR0hjaUtTQXFhaUlxSUIxelFSbDNJaDBnRlNBZWFpSVZJQllnSDNOQkdIY2lGaUFuSUJ0elFSbDNJaHNnRkdvZ0Rtb2lGSE5CRUhjaUhtb2lIeUFiYzBFVWR5SWJJQlJxSUJKcUloUnFJQWxxSWljZ0ZpQWhhaUlXSUNBZ0ZTQWpjMEVaZHlJVklDWnFJQXhxSWlGelFSQjNJaUJxSWlNZ0ZYTkJGSGNpRlNBaGFpQVRhaUloSUNCelFSaDNJaUJ6UVJCM0lpWWdKQ0FsSUJZZ0hITkJHWGNpRmlBaWFpQUNhaUljYzBFUWR5SWlhaUlrSUJaelFSUjNJaFlnSEdvZ0Jtb2lIQ0FpYzBFWWR5SWlJQ1JxSWlScUlpVWdIWE5CRkhjaUhTQW5haUFBYWlJbklDWnpRUmgzSWlZZ0pXb2lKU0FoSUJRZ0huTkJHSGNpRkNBZmFpSWVJQnR6UVJsM0lodHFJQTFxSWg4Z0luTkJFSGNpSVNBcWFpSWlJQnR6UVJSM0loc2dIMm9nQldvaUh5QWhjMEVZZHlJaElDUWdGbk5CR1hjaUZpQW9haUFJYWlJa0lCUnpRUkIzSWhRZ0lDQWphaUlnYWlJaklCWnpRUlIzSWhZZ0pHb2dHV29pSkNBVWMwRVlkeUlVSUNOcUlpTWdGbk5CR1hjaUZpQWdJQlZ6UVJsM0loVWdIR29nR21vaUhDQXBjMEVRZHlJZ0lCNXFJaDRnRlhOQkZIY2lGU0FjYWlBWGFpSWNhaUFUYWlJb2MwRVFkeUlwYWlJcUlCWnpRUlIzSWhZZ0tHb2dDMm9pS0NBcGMwRVlkeUlwSUNwcUlpb2dGbk5CR1hjaUZpQWhJQ0pxSWlFZ0hDQWdjMEVZZHlJY0lDVWdIWE5CR1hjaUhTQWthaUFJYWlJZ2MwRVFkeUlpYWlJa0lCMXpRUlIzSWgwZ0lHb2dGMm9pSUdvZ0Ftb2lKU0FjSUI1cUlod2dGQ0FoSUJ0elFSbDNJaHNnSjJvZ0dtb2lIbk5CRUhjaUZHb2lJU0FiYzBFVWR5SWJJQjVxSUExcUloNGdGSE5CR0hjaUZITkJFSGNpSnlBaklDWWdIQ0FWYzBFWmR5SVZJQjlxSUE1cUloeHpRUkIzSWg5cUlpTWdGWE5CRkhjaUZTQWNhaUFBYWlJY0lCOXpRUmgzSWg4Z0kyb2lJMm9pSmlBV2MwRVVkeUlXSUNWcUlBbHFJaVVnSjNOQkdIY2lKeUFtYWlJbUlDQWdJbk5CR0hjaUlDQWthaUlpSUIxelFSbDNJaDBnSG1vZ0Jtb2lIaUFmYzBFUWR5SWZJQ3BxSWlRZ0hYTkJGSGNpSFNBZWFpQVphaUllSUI5elFSaDNJaDhnSXlBVmMwRVpkeUlWSUNocUlBVnFJaU1nSUhOQkVIY2lJQ0FVSUNGcUloUnFJaUVnRlhOQkZIY2lGU0FqYWlBS2FpSWpJQ0J6UVJoM0lpQWdJV29pSVNBVmMwRVpkeUlWSUJ3Z0ZDQWJjMEVaZHlJVWFpQU1haUliSUNselFSQjNJaHdnSW1vaUlpQVVjMEVVZHlJVUlCdHFJQkpxSWh0cUlBbHFJaWh6UVJCM0lpbHFJaW9nRlhOQkZIY2lGU0FvYWlBTWFpSW9JQ0VnSnlBYklCeHpRUmgzSWhzZ0ltb2lIQ0FVYzBFWmR5SVVJQjVxSUExcUloNXpRUkIzSWlKcUlpRWdGSE5CRkhjaUZDQWVhaUFLYWlJZUlDSnpRUmgzSWlJZ0lXb2lJU0FVYzBFWmR5SVVhaUFJYWlJbklCOGdKR29pSHlBYklDWWdGbk5CR1hjaUZpQWphaUFHYWlJamMwRVFkeUliYWlJa0lCWnpRUlIzSWhZZ0kyb2dCV29pSXlBYmMwRVlkeUliYzBFUWR5SW1JQndnSUNBZklCMXpRUmwzSWgwZ0pXb2dBbW9pSDNOQkVIY2lJR29pSENBZGMwRVVkeUlkSUI5cUlCcHFJaDhnSUhOQkdIY2lJQ0FjYWlJY2FpSWxJQlJ6UVJSM0loUWdKMm9nRTJvaUp5QW1jMEVZZHlJbUlDVnFJaVVnS0NBcGMwRVlkeUlvSUNwcUlpa2dGWE5CR1hjaUZTQWphaUFaYWlJaklDQnpRUkIzSWlBZ0lXb2lJU0FWYzBFVWR5SVZJQ05xSUJKcUlpTWdJSE5CR0hjaUlDQWNJQjF6UVJsM0lod2dIbW9nQUdvaUhTQW9jMEVRZHlJZUlCc2dKR29pRzJvaUpDQWNjMEVVZHlJY0lCMXFJQmRxSWgwZ0huTkJHSGNpSGlBa2FpSWtJQnh6UVJsM0lod2dHeUFXYzBFWmR5SVdJQjlxSUE1cUloc2dJbk5CRUhjaUh5QXBhaUlpSUJaelFSUjNJaFlnRzJvZ0Myb2lHMm9nR1dvaUtITkJFSGNpS1dvaUtpQWNjMEVVZHlJY0lDaHFJQWxxSWlnZ0tYTkJHSGNpS1NBcWFpSXFJQnh6UVJsM0lod2dJQ0FoYWlJZ0lCc2dIM05CR0hjaUd5QWxJQlJ6UVJsM0loUWdIV29nQm1vaUhYTkJFSGNpSDJvaUlTQVVjMEVVZHlJVUlCMXFJQXRxSWgxcUlBVnFJaVVnR3lBaWFpSWJJQjRnSUNBVmMwRVpkeUlWSUNkcUlCSnFJaUJ6UVJCM0loNXFJaUlnRlhOQkZIY2lGU0FnYWlBSWFpSWdJQjV6UVJoM0loNXpRUkIzSWljZ0pDQW1JQnNnRm5OQkdYY2lGaUFqYWlBS2FpSWJjMEVRZHlJamFpSWtJQlp6UVJSM0loWWdHMm9nRG1vaUd5QWpjMEVZZHlJaklDUnFJaVJxSWlZZ0hITkJGSGNpSENBbGFpQVRhaUlsSUNkelFSaDNJaWNnSm1vaUppQWdJQjBnSDNOQkdIY2lIU0FoYWlJZklCUnpRUmwzSWhScUlCZHFJaUFnSTNOQkVIY2lJU0FxYWlJaklCUnpRUlIzSWhRZ0lHb2dEV29pSUNBaGMwRVlkeUloSUNRZ0ZuTkJHWGNpRmlBb2FpQWFhaUlrSUIxelFSQjNJaDBnSGlBaWFpSWVhaUlpSUJaelFSUjNJaFlnSkdvZ0Ftb2lKQ0FkYzBFWWR5SWRJQ0pxSWlJZ0ZuTkJHWGNpRmlBZUlCVnpRUmwzSWhVZ0cyb2dER29pR3lBcGMwRVFkeUllSUI5cUloOGdGWE5CRkhjaUZTQWJhaUFBYWlJYmFpQUFhaUlvYzBFUWR5SXBhaUlxSUJaelFSUjNJaFlnS0dvZ0Uyb2lLQ0FwYzBFWWR5SXBJQ3BxSWlvZ0ZuTkJHWGNpRmlBaElDTnFJaUVnR3lBZWMwRVlkeUliSUNZZ0hITkJHWGNpSENBa2FpQVhhaUllYzBFUWR5SWphaUlrSUJ4elFSUjNJaHdnSG1vZ0RHb2lIbW9nR1dvaUppQWJJQjlxSWhzZ0hTQWhJQlJ6UVJsM0loUWdKV29nQzJvaUgzTkJFSGNpSFdvaUlTQVVjMEVVZHlJVUlCOXFJQUpxSWg4Z0hYTkJHSGNpSFhOQkVIY2lKU0FpSUNjZ0d5QVZjMEVaZHlJVklDQnFJQVZxSWh0elFSQjNJaUJxSWlJZ0ZYTkJGSGNpRlNBYmFpQUphaUliSUNCelFSaDNJaUFnSW1vaUltb2lKeUFXYzBFVWR5SVdJQ1pxSUFocUlpWWdKWE5CR0hjaUpTQW5haUluSUI0Z0kzTkJHSGNpSGlBa2FpSWpJQnh6UVJsM0lod2dIMm9nQ21vaUh5QWdjMEVRZHlJZ0lDcHFJaVFnSEhOQkZIY2lIQ0FmYWlBYWFpSWZJQ0J6UVJoM0lpQWdJaUFWYzBFWmR5SVZJQ2hxSUExcUlpSWdIbk5CRUhjaUhpQWRJQ0ZxSWgxcUlpRWdGWE5CRkhjaUZTQWlhaUFHYWlJaUlCNXpRUmgzSWg0Z0lXb2lJU0FWYzBFWmR5SVZJQnNnSFNBVWMwRVpkeUlVYWlBU2FpSWJJQ2x6UVJCM0loMGdJMm9pSXlBVWMwRVVkeUlVSUJ0cUlBNXFJaHRxSUFocUlpaHpRUkIzSWlscUlpb2dGWE5CRkhjaUZTQW9haUFOYWlJb0lDRWdKU0FiSUIxelFSaDNJaHNnSTJvaUhTQVVjMEVaZHlJVUlCOXFJQk5xSWg5elFSQjNJaU5xSWlFZ0ZITkJGSGNpRkNBZmFpQU9haUlmSUNOelFSaDNJaU1nSVdvaUlTQVVjMEVaZHlJVWFpQUdhaUlsSUNBZ0pHb2lJQ0FiSUNjZ0ZuTkJHWGNpRmlBaWFpQUxhaUlpYzBFUWR5SWJhaUlrSUJaelFSUjNJaFlnSW1vZ0Yyb2lJaUFiYzBFWWR5SWJjMEVRZHlJbklCMGdIaUFnSUJ4elFSbDNJaHdnSm1vZ0dtb2lJSE5CRUhjaUhtb2lIU0FjYzBFVWR5SWNJQ0JxSUFCcUlpQWdIbk5CR0hjaUhpQWRhaUlkYWlJbUlCUnpRUlIzSWhRZ0pXb2dDV29pSlNBbmMwRVlkeUluSUNacUlpWWdLQ0FwYzBFWWR5SW9JQ3BxSWlrZ0ZYTkJHWGNpRlNBaWFpQVNhaUlpSUI1elFSQjNJaDRnSVdvaUlTQVZjMEVVZHlJVklDSnFJQmxxSWlJZ0huTkJHSGNpSGlBZElCeHpRUmwzSWh3Z0gyb2dBbW9pSFNBb2MwRVFkeUlmSUJzZ0pHb2lHMm9pSkNBY2MwRVVkeUljSUIxcUlBcHFJaDBnSDNOQkdIY2lIeUFrYWlJa0lCeHpRUmwzSWh3Z0d5QVdjMEVaZHlJV0lDQnFJQXhxSWhzZ0kzTkJFSGNpSUNBcGFpSWpJQlp6UVJSM0loWWdHMm9nQldvaUcyb2dBR29pS0hOQkVIY2lLV29pS2lBY2MwRVVkeUljSUNocUlBMXFJaWdnS1hOQkdIY2lLU0FxYWlJcUlCeHpRUmwzSWh3Z0hpQWhhaUllSUJzZ0lITkJHSGNpR3lBbUlCUnpRUmwzSWhRZ0hXb2dHV29pSFhOQkVIY2lJR29pSVNBVWMwRVVkeUlVSUIxcUlBeHFJaDFxSUF0cUlpWWdHeUFqYWlJYklCOGdIaUFWYzBFWmR5SVZJQ1ZxSUFwcUloNXpRUkIzSWg5cUlpTWdGWE5CRkhjaUZTQWVhaUFTYWlJZUlCOXpRUmgzSWg5elFSQjNJaVVnSkNBbklCc2dGbk5CR1hjaUZpQWlhaUFPYWlJYmMwRVFkeUlpYWlJa0lCWnpRUlIzSWhZZ0cyb2dDR29pR3lBaWMwRVlkeUlpSUNScUlpUnFJaWNnSEhOQkZIY2lIQ0FtYWlBR2FpSW1JQ1Z6UVJoM0lpVWdKMm9pSnlBZUlCMGdJSE5CR0hjaUhTQWhhaUlnSUJSelFSbDNJaFJxSUFscUloNGdJbk5CRUhjaUlTQXFhaUlpSUJSelFSUjNJaFFnSG1vZ0Ftb2lIaUFoYzBFWWR5SWhJQ1FnRm5OQkdYY2lGaUFvYWlBVGFpSWtJQjF6UVJCM0loMGdIeUFqYWlJZmFpSWpJQlp6UVJSM0loWWdKR29nR21vaUpDQWRjMEVZZHlJZElDTnFJaU1nRm5OQkdYY2lGaUFmSUJWelFSbDNJaFVnRzJvZ0Yyb2lHeUFwYzBFUWR5SWZJQ0JxSWlBZ0ZYTkJGSGNpRlNBYmFpQUZhaUliYWlBYWFpSWFjMEVRZHlJb2FpSXBJQlp6UVJSM0loWWdHbW9nR1dvaUdTQW9jMEVZZHlJYUlDbHFJaWdnRm5OQkdYY2lGaUFoSUNKcUlpRWdHeUFmYzBFWWR5SWJJQ2NnSEhOQkdYY2lIQ0FrYWlBU2FpSVNjMEVRZHlJZmFpSWlJQnh6UVJSM0lod2dFbW9nQldvaUJXb2dEV29pRWlBYklDQnFJZzBnSFNBaElCUnpRUmwzSWhRZ0ptb2dDV29pQ1hOQkVIY2lHMm9pSFNBVWMwRVVkeUlVSUFscUlBWnFJZ1lnRzNOQkdIY2lDWE5CRUhjaUd5QWpJQ1VnRFNBVmMwRVpkeUlOSUI1cUlCZHFJaGR6UVJCM0loVnFJaDRnRFhOQkZIY2lEU0FYYWlBQ2FpSUNJQlZ6UVJoM0loY2dIbW9pRldvaUhpQVdjMEVVZHlJV0lCSnFJQUJxSWhLdFFpQ0dJQVVnSDNOQkdIY2lCU0FpYWlJQUlCeHpRUmwzSWh3Z0Jtb2dER29pQmlBWGMwRVFkeUlYSUNocUlnd2dISE5CRkhjaUhDQUdhaUFPYWlJR3JZUWdENFVnQWlBSklCMXFJZ2tnRkhOQkdYY2lEbW9nRTJvaUFpQWFjMEVRZHlJYUlBQnFJaE1nRG5OQkZIY2lEaUFDYWlBS2FpSUNJQnB6UVJoM0lnb2dFMm9pR3ExQ0lJWWdGU0FOYzBFWmR5SU5JQmxxSUFocUlnZ2dCWE5CRUhjaUJTQUphaUlKSUExelFSUjNJaGtnQ0dvZ0Myb2lDQ0FGYzBFWWR5SUZJQWxxSWdtdGhJVTNBNENKQVVFQUlBTWdBcTFDSUlZZ0NLMkVoU0FTSUJ0elFSaDNJZ0lnSG1vaUNLMUNJSVlnQmlBWGMwRVlkeUlHSUF4cUloZXRoSVUzQTRpSkFVRUFJQVFnRnlBY2MwRVpkNjFDSUlZZ0dpQU9jMEVaZDYyRWhTQUZyVUlnaGlBQ3JZU0ZOd09RaVFGQkFDQUpJQmx6UVJsM3JVSWdoaUFJSUJaelFSbDNyWVJCQUNrRG1Ja0JoU0FHclVJZ2hpQUtyWVNGTndPWWlRRUxuUUlCQkg4akFFRWdheUlBSkFBQ1FFRUFLQUtvaVFFTkFFRUFRUUFvQXFDSkFTSUJRUUFvQXZDSkFTSUNhaUlETmdLZ2lRRkJBRUVBS0FLa2lRRWdBeUFCU1dvMkFxU0pBUUpBUVFBdEFQaUpBVVVOQUVFQVFYODJBcXlKQVF0QkFFRi9OZ0tvaVFFQ1FDQUNRVDlLRFFCQkFDRUJBMEFnQWlBQmFrR3dpUUZxUVFBNkFBQWdBVUVCYWlJQlFjQUFRUUFvQXZDSkFTSUNhMGdOQUFzTFFiQ0pBUkFDSUFCQkFDa0RnSWtCTndNQUlBQkJBQ2tEaUlrQk53TUlJQUJCQUNrRGtJa0JOd01RSUFCQkFDa0RtSWtCTndNWVFRQW9BdlNKQVNJRFFRRklEUUJCQUNFQlFRQWhBZ05BSUFGQmdBbHFJQUFnQVdvdEFBQTZBQUFnQVVFQmFpRUJJQU1nQWtFQmFpSUNRZjhCY1VvTkFBc0xJQUJCSUdva0FBdTBBd0VFZnlNQVFjQUFheUlCSkFCQkFFR0JBanNCZ29vQlFRQWdBRUVRZGlJQ09nQ0JpZ0ZCQUNBQVFRTjJPZ0NBaWdGQkFDRURBa0FEUUNBRFFZQ0pBV3BCQURZQ0FDQURRZmdBUmcwQklBTkJoSWtCYWtFQU5nSUFJQU5CQ0dvaEF3d0FDd3RCQUNFRFFRQkJBQ2dDZ0lvQklnUkI1OHluMEFaek5nS0FpUUZCQUVFQUtBS0VpZ0ZCaGQyZTIzdHpOZ0tFaVFGQkFFRUFLQUtJaWdGQjh1YTc0d056TmdLSWlRRkJBRUVBS0FLTWlnRkJ1dXEvcW5wek5nS01pUUZCQUVFQUtBS1FpZ0ZCLzZTNWlBVnpOZ0tRaVFGQkFFRUFLQUtVaWdGQmpOR1YySGx6TmdLVWlRRkJBRUVBS0FLWWlnRkJxN09QL0FGek5nS1lpUUZCQUNBRVFmOEJjVFlDOUlrQlFRQkJBQ2dDbklvQlFabWFnOThGY3pZQ25Ja0JBa0FnQUVHQWdBUkpEUUFnQVVFNGFrSUFOd01BSUFGQk1HcENBRGNEQUNBQlFTaHFRZ0EzQXdBZ0FVRWdha0lBTndNQUlBRkJHR3BDQURjREFDQUJRUkJxUWdBM0F3QWdBVUlBTndNSUlBRkNBRGNEQUVFQUlRQURRQ0FCSUFOcUlBTkJnQWxxTFFBQU9nQUFJQU5CQVdvaEF5QUNJQUJCQVdvaUFFSC9BWEZMRFFBTElBRkJ3QUFRQVFzZ0FVSEFBR29rQUFzSkFFR0FDU0FBRUFFTEJnQkJnSWtCQ3c4QUlBRVFCRUdBQ1NBQUVBRVFBd3NMQ3dFQVFZQUlDd1I4QUFBQVwiO1xuICAgIHZhciBoYXNoJGggPSBcImM1Yzc0NmQ0XCI7XG4gICAgdmFyIHdhc21Kc29uJGggPSB7XG4gICAgXHRuYW1lOiBuYW1lJGgsXG4gICAgXHRkYXRhOiBkYXRhJGgsXG4gICAgXHRoYXNoOiBoYXNoJGhcbiAgICB9O1xuXG4gICAgY29uc3QgbXV0ZXgkaiA9IG5ldyBNdXRleCgpO1xuICAgIGxldCB3YXNtQ2FjaGUkaiA9IG51bGw7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGVCaXRzJDMoYml0cykge1xuICAgICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIoYml0cykgfHwgYml0cyA8IDggfHwgYml0cyA+IDI1NiB8fCBiaXRzICUgOCAhPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignSW52YWxpZCB2YXJpYW50ISBWYWxpZCB2YWx1ZXM6IDgsIDE2LCAuLi4sIDI1NicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRJbml0UGFyYW0ob3V0cHV0Qml0cywga2V5Qml0cykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYml0d2lzZVxuICAgICAgICByZXR1cm4gb3V0cHV0Qml0cyB8IChrZXlCaXRzIDw8IDE2KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlcyBCTEFLRTJzIGhhc2hcbiAgICAgKiBAcGFyYW0gZGF0YSBJbnB1dCBkYXRhIChzdHJpbmcsIEJ1ZmZlciBvciBUeXBlZEFycmF5KVxuICAgICAqIEBwYXJhbSBiaXRzIE51bWJlciBvZiBvdXRwdXQgYml0cywgd2hpY2ggaGFzIHRvIGJlIGEgbnVtYmVyXG4gICAgICogICAgICAgICAgICAgZGl2aXNpYmxlIGJ5IDgsIGJldHdlZW4gOCBhbmQgMjU2LiBEZWZhdWx0cyB0byAyNTYuXG4gICAgICogQHBhcmFtIGtleSBPcHRpb25hbCBrZXkgKHN0cmluZywgQnVmZmVyIG9yIFR5cGVkQXJyYXkpLiBNYXhpbXVtIGxlbmd0aCBpcyAzMiBieXRlcy5cbiAgICAgKiBAcmV0dXJucyBDb21wdXRlZCBoYXNoIGFzIGEgaGV4YWRlY2ltYWwgc3RyaW5nXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmxha2UycyhkYXRhLCBiaXRzID0gMjU2LCBrZXkgPSBudWxsKSB7XG4gICAgICAgIGlmICh2YWxpZGF0ZUJpdHMkMyhiaXRzKSkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHZhbGlkYXRlQml0cyQzKGJpdHMpKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQga2V5QnVmZmVyID0gbnVsbDtcbiAgICAgICAgbGV0IGluaXRQYXJhbSA9IGJpdHM7XG4gICAgICAgIGlmIChrZXkgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGtleUJ1ZmZlciA9IGdldFVJbnQ4QnVmZmVyKGtleSk7XG4gICAgICAgICAgICBpZiAoa2V5QnVmZmVyLmxlbmd0aCA+IDMyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignTWF4IGtleSBsZW5ndGggaXMgMzIgYnl0ZXMnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbml0UGFyYW0gPSBnZXRJbml0UGFyYW0oYml0cywga2V5QnVmZmVyLmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaGFzaExlbmd0aCA9IGJpdHMgLyA4O1xuICAgICAgICBpZiAod2FzbUNhY2hlJGogPT09IG51bGwgfHwgd2FzbUNhY2hlJGouaGFzaExlbmd0aCAhPT0gaGFzaExlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2tlZENyZWF0ZShtdXRleCRqLCB3YXNtSnNvbiRoLCBoYXNoTGVuZ3RoKVxuICAgICAgICAgICAgICAgIC50aGVuKCh3YXNtKSA9PiB7XG4gICAgICAgICAgICAgICAgd2FzbUNhY2hlJGogPSB3YXNtO1xuICAgICAgICAgICAgICAgIGlmIChpbml0UGFyYW0gPiA1MTIpIHtcbiAgICAgICAgICAgICAgICAgICAgd2FzbUNhY2hlJGoud3JpdGVNZW1vcnkoa2V5QnVmZmVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdhc21DYWNoZSRqLmNhbGN1bGF0ZShkYXRhLCBpbml0UGFyYW0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChpbml0UGFyYW0gPiA1MTIpIHtcbiAgICAgICAgICAgICAgICB3YXNtQ2FjaGUkai53cml0ZU1lbW9yeShrZXlCdWZmZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgaGFzaCA9IHdhc21DYWNoZSRqLmNhbGN1bGF0ZShkYXRhLCBpbml0UGFyYW0pO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShoYXNoKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IEJMQUtFMnMgaGFzaCBpbnN0YW5jZVxuICAgICAqIEBwYXJhbSBiaXRzIE51bWJlciBvZiBvdXRwdXQgYml0cywgd2hpY2ggaGFzIHRvIGJlIGEgbnVtYmVyXG4gICAgICogICAgICAgICAgICAgZGl2aXNpYmxlIGJ5IDgsIGJldHdlZW4gOCBhbmQgMjU2LiBEZWZhdWx0cyB0byAyNTYuXG4gICAgICogQHBhcmFtIGtleSBPcHRpb25hbCBrZXkgKHN0cmluZywgQnVmZmVyIG9yIFR5cGVkQXJyYXkpLiBNYXhpbXVtIGxlbmd0aCBpcyAzMiBieXRlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVCTEFLRTJzKGJpdHMgPSAyNTYsIGtleSA9IG51bGwpIHtcbiAgICAgICAgaWYgKHZhbGlkYXRlQml0cyQzKGJpdHMpKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QodmFsaWRhdGVCaXRzJDMoYml0cykpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBrZXlCdWZmZXIgPSBudWxsO1xuICAgICAgICBsZXQgaW5pdFBhcmFtID0gYml0cztcbiAgICAgICAgaWYgKGtleSAhPT0gbnVsbCkge1xuICAgICAgICAgICAga2V5QnVmZmVyID0gZ2V0VUludDhCdWZmZXIoa2V5KTtcbiAgICAgICAgICAgIGlmIChrZXlCdWZmZXIubGVuZ3RoID4gMzIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdNYXgga2V5IGxlbmd0aCBpcyAzMiBieXRlcycpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGluaXRQYXJhbSA9IGdldEluaXRQYXJhbShiaXRzLCBrZXlCdWZmZXIubGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvdXRwdXRTaXplID0gYml0cyAvIDg7XG4gICAgICAgIHJldHVybiBXQVNNSW50ZXJmYWNlKHdhc21Kc29uJGgsIG91dHB1dFNpemUpLnRoZW4oKHdhc20pID0+IHtcbiAgICAgICAgICAgIGlmIChpbml0UGFyYW0gPiA1MTIpIHtcbiAgICAgICAgICAgICAgICB3YXNtLndyaXRlTWVtb3J5KGtleUJ1ZmZlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3YXNtLmluaXQoaW5pdFBhcmFtKTtcbiAgICAgICAgICAgIGNvbnN0IG9iaiA9IHtcbiAgICAgICAgICAgICAgICBpbml0OiBpbml0UGFyYW0gPiA1MTJcbiAgICAgICAgICAgICAgICAgICAgPyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3YXNtLndyaXRlTWVtb3J5KGtleUJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB3YXNtLmluaXQoaW5pdFBhcmFtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3YXNtLmluaXQoaW5pdFBhcmFtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdXBkYXRlOiAoZGF0YSkgPT4geyB3YXNtLnVwZGF0ZShkYXRhKTsgcmV0dXJuIG9iajsgfSxcbiAgICAgICAgICAgICAgICBkaWdlc3Q6IChvdXRwdXRUeXBlKSA9PiB3YXNtLmRpZ2VzdChvdXRwdXRUeXBlKSxcbiAgICAgICAgICAgICAgICBzYXZlOiAoKSA9PiB3YXNtLnNhdmUoKSxcbiAgICAgICAgICAgICAgICBsb2FkOiAoZGF0YSkgPT4geyB3YXNtLmxvYWQoZGF0YSk7IHJldHVybiBvYmo7IH0sXG4gICAgICAgICAgICAgICAgYmxvY2tTaXplOiA2NCxcbiAgICAgICAgICAgICAgICBkaWdlc3RTaXplOiBvdXRwdXRTaXplLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBuYW1lJGcgPSBcImJsYWtlM1wiO1xuICAgIHZhciBkYXRhJGcgPSBcIkFHRnpiUUVBQUFBQk1RZGdBQUYvWUFsL2YzOStmMzkvZjM4QVlBWi9mMzkvZm44QVlBRi9BR0FEZjM5L0FHQUJmZ0JnQlg5L2ZuOS9BWDhERGcwQUFRSURCQVVHQXdNREF3QUVCUVFCQVFJQ0JnNENmd0ZCZ0pnRkMzOEFRWUFJQ3dkd0NBWnRaVzF2Y25rQ0FBNUlZWE5vWDBkbGRFSjFabVpsY2dBQUNVaGhjMmhmU1c1cGRBQUlDMGhoYzJoZlZYQmtZWFJsQUFrS1NHRnphRjlHYVc1aGJBQUtEVWhoYzJoZlIyVjBVM1JoZEdVQUN3NUlZWE5vWDBOaGJHTjFiR0YwWlFBTUNsTlVRVlJGWDFOSldrVURBUXFjV3cwRkFFR0FDUXVqQXdRQ2Z3RitBWDhFZmlNQVFlQUFheUlKSkFBQ1FDQUJSUTBBSUFjZ0JYSWhDaUFFUVFCSHJTRUxJQWRCQUNBQ1FRRkdHeUFHY2lBRmNpRU1BMEFnQUNnQ0FDRUhJQWxCQUNrRGdJa0JOd01BSUFsQkFDa0RpSWtCTndNSUlBbEJBQ2tEa0lrQk53TVFJQWxCQUNrRG1Ja0JOd01ZSUFsQklHb2dDU0FIUWNBQUlBTWdEQkFDSUFrZ0NTa0RRQ0FKS1FNZ2hTSU5Od01BSUFrZ0NTa0RTQ0FKS1FNb2hTSU9Od01JSUFrZ0NTa0RVQ0FKS1FNd2hTSVBOd01RSUFrZ0NTa0RXQ0FKS1FNNGhTSVFOd01ZSUFkQndBQnFJUWNnQWlFRUFrQURRQ0FGSVFZQ1FBSkFJQVJCZjJvaUJBNENBd0FCQ3lBS0lRWUxJQWxCSUdvZ0NTQUhRY0FBSUFNZ0JoQUNJQWtnQ1NrRFFDQUpLUU1naFNJTk53TUFJQWtnQ1NrRFNDQUpLUU1vaFNJT053TUlJQWtnQ1NrRFVDQUpLUU13aFNJUE53TVFJQWtnQ1NrRFdDQUpLUU00aFNJUU53TVlJQWRCd0FCcUlRY01BQXNMSUFnZ0VEY0RHQ0FJSUE4M0F4QWdDQ0FPTndNSUlBZ2dEVGNEQUNBSVFTQnFJUWdnQUVFRWFpRUFJQU1nQzN3aEF5QUJRWDlxSWdFTkFBc0xJQWxCNEFCcUpBQUxoQndDREg0ZmZ5QUNLUU1nSVFZZ0Fpa0RPQ0VISUFJcEF6QWhDQ0FDS1FNQUlRa2dBaWtES0NFS0lBSXBBeEFoQ3lBQ0tRTUlJUXdnQWlrREdDRU5JQUFnQVNrREFDSU9Od01BSUFBZ0FTa0RDQ0lQTndNSUlBQWdBU2tERUNJUU53TVFJQUFnRDBJZ2lLY2dEYWNpQW1vZ0FTa0RHQ0lSUWlDSXB5SVNhaUlUSUExQ0lJaW5JZ0ZxSUJNZ0JYTkJFSFFnRTBFUWRuSWlGRUc2NnIrcWVtb2lGU0FTYzBFVWR5SVdhaUlYSUE2bklBbW5JaE5xSUJDbkloSnFJaGdnQ1VJZ2lLY2lCV29nR0NBRXAzTkJFSGNpR0VIbnpLZlFCbW9pR1NBU2MwRVVkeUlTYWlJYUlCaHpRUmgzSWhzZ0dXb2lIQ0FTYzBFWmR5SWRhaUFIcHlJU2FpSWVJQWRDSUlpbkloaHFJQjRnRDZjZ0M2Y2lHV29nRWFjaUgyb2lJQ0FMUWlDSXB5SWhhaUFnSUFOelFSQjBJQ0JCRUhaeUlpQkI4dWE3NHdOcUlpSWdIM05CRkhjaUgyb2lJeUFnYzBFWWR5SWtjMEVRZHlJZUlBNUNJSWluSUF5bklpQnFJQkJDSUlpbklpVnFJaVlnREVJZ2lLY2lBMm9nSmlBRVFpQ0lwM05CRUhjaUprR0YzWjdiZTJvaUp5QWxjMEVVZHlJbGFpSW9JQ1p6UVJoM0lpWWdKMm9pSjJvaUtTQWRjMEVVZHlJZGFpSXFJQmxxSUJjZ0ZITkJHSGNpS3lBVmFpSXNJQlp6UVJsM0loWWdJMm9nQ0tjaUZHb2lGeUFJUWlDSXB5SVZhaUFYSUNaelFSQjNJaGNnSEdvaUhDQVdjMEVVZHlJV2FpSWpJQmR6UVJoM0lpWWdIR29pTFNBV2MwRVpkeUl1YWlJY0lCVnFJQ2NnSlhOQkdYY2lKU0FhYWlBR3B5SVdhaUlhSUFaQ0lJaW5JaGRxSUJvZ0szTkJFSGNpR2lBa0lDSnFJaUpxSWlRZ0pYTkJGSGNpSldvaUp5QWFjMEVZZHlJcklCeHpRUkIzSWk4Z0lpQWZjMEVaZHlJZklDaHFJQXFuSWhwcUlpSWdDa0lnaUtjaUhHb2dJaUFiYzBFUWR5SWJJQ3hxSWlJZ0gzTkJGSGNpSDJvaUtDQWJjMEVZZHlJYklDSnFJaUpxSWl3Z0xuTkJGSGNpTG1vaU1DQW5JQ0JxSUNvZ0huTkJHSGNpSGlBcGFpSW5JQjF6UVJsM0loMXFJaWtnQW1vZ0d5QXBjMEVRZHlJYklDMXFJaWtnSFhOQkZIY2lIV29pS2lBYmMwRVlkeUliSUNscUlpa2dIWE5CR1hjaUhXb2dHR29pTFNBV2FpQXRJQ01nQVdvZ0lpQWZjMEVaZHlJZmFpSWlJQk5xSUI0Z0luTkJFSGNpSGlBcklDUnFJaUpxSWlNZ0gzTkJGSGNpSDJvaUpDQWVjMEVZZHlJZWMwRVFkeUlySUNnZ0Eyb2dJaUFsYzBFWmR5SWlhaUlsSUJwcUlDWWdKWE5CRUhjaUpTQW5haUltSUNKelFSUjNJaUpxSWljZ0pYTkJHSGNpSlNBbWFpSW1haUlvSUIxelFSUjNJaDFxSWkwZ0FXb2dNQ0F2YzBFWWR5SXZJQ3hxSWl3Z0xuTkJHWGNpTGlBa2FpQVhhaUlrSUJKcUlDUWdKWE5CRUhjaUpDQXBhaUlsSUM1elFSUjNJaWxxSWk0Z0pITkJHSGNpSkNBbGFpSWxJQ2x6UVJsM0lpbHFJakFnRW1vZ0ppQWljMEVaZHlJaUlDcHFJQVZxSWlZZ0hHb2dKaUF2YzBFUWR5SW1JQjRnSTJvaUhtb2lJeUFpYzBFVWR5SWlhaUlxSUNaelFSaDNJaVlnTUhOQkVIY2lMeUFlSUI5elFSbDNJaDRnSjJvZ0ZHb2lIeUFoYWlBZklCdHpRUkIzSWhzZ0xHb2lIeUFlYzBFVWR5SWVhaUluSUJ0elFSaDNJaHNnSDJvaUgyb2lMQ0FwYzBFVWR5SXBhaUl3SUNvZ0Eyb2dMU0FyYzBFWWR5SXFJQ2hxSWlnZ0hYTkJHWGNpSFdvaUt5QVphaUFiSUN0elFSQjNJaHNnSldvaUpTQWRjMEVVZHlJZGFpSXJJQnR6UVJoM0loc2dKV29pSlNBZGMwRVpkeUlkYWlBV2FpSXRJQVZxSUMwZ0xpQVZhaUFmSUI1elFSbDNJaDVxSWg4Z0lHb2dLaUFmYzBFUWR5SWZJQ1lnSTJvaUkyb2lKaUFlYzBFVWR5SWVhaUlxSUI5elFSaDNJaDl6UVJCM0lpMGdKeUFhYWlBaklDSnpRUmwzSWlKcUlpTWdGR29nSkNBamMwRVFkeUlqSUNocUlpUWdJbk5CRkhjaUltb2lKeUFqYzBFWWR5SWpJQ1JxSWlScUlpZ2dIWE5CRkhjaUhXb2lMaUFWYWlBd0lDOXpRUmgzSWk4Z0xHb2lMQ0FwYzBFWmR5SXBJQ3BxSUJ4cUlpb2dHR29nS2lBamMwRVFkeUlqSUNWcUlpVWdLWE5CRkhjaUtXb2lLaUFqYzBFWWR5SWpJQ1ZxSWlVZ0tYTkJHWGNpS1dvaU1DQVlhaUFrSUNKelFSbDNJaUlnSzJvZ0Ftb2lKQ0FoYWlBa0lDOXpRUkIzSWlRZ0h5QW1haUlmYWlJbUlDSnpRUlIzSWlKcUlpc2dKSE5CR0hjaUpDQXdjMEVRZHlJdklCOGdIbk5CR1hjaUhpQW5haUFYYWlJZklCTnFJQjhnRzNOQkVIY2lHeUFzYWlJZklCNXpRUlIzSWg1cUlpY2dHM05CR0hjaUd5QWZhaUlmYWlJc0lDbHpRUlIzSWlscUlqQWdLeUFhYWlBdUlDMXpRUmgzSWlzZ0tHb2lLQ0FkYzBFWmR5SWRhaUl0SUFGcUlCc2dMWE5CRUhjaUd5QWxhaUlsSUIxelFSUjNJaDFxSWkwZ0czTkJHSGNpR3lBbGFpSWxJQjF6UVJsM0loMXFJQVZxSWk0Z0Ftb2dMaUFxSUJKcUlCOGdIbk5CR1hjaUhtb2lIeUFEYWlBcklCOXpRUkIzSWg4Z0pDQW1haUlrYWlJbUlCNXpRUlIzSWg1cUlpb2dIM05CR0hjaUgzTkJFSGNpS3lBbklCUnFJQ1FnSW5OQkdYY2lJbW9pSkNBWGFpQWpJQ1J6UVJCM0lpTWdLR29pSkNBaWMwRVVkeUlpYWlJbklDTnpRUmgzSWlNZ0pHb2lKR29pS0NBZGMwRVVkeUlkYWlJdUlCSnFJREFnTDNOQkdIY2lMeUFzYWlJc0lDbHpRUmwzSWlrZ0ttb2dJV29pS2lBV2FpQXFJQ056UVJCM0lpTWdKV29pSlNBcGMwRVVkeUlwYWlJcUlDTnpRUmgzSWlNZ0pXb2lKU0FwYzBFWmR5SXBhaUl3SUJacUlDUWdJbk5CR1hjaUlpQXRhaUFaYWlJa0lCTnFJQ1FnTDNOQkVIY2lKQ0FmSUNacUloOXFJaVlnSW5OQkZIY2lJbW9pTFNBa2MwRVlkeUlrSURCelFSQjNJaThnSHlBZWMwRVpkeUllSUNkcUlCeHFJaDhnSUdvZ0h5QWJjMEVRZHlJYklDeHFJaDhnSG5OQkZIY2lIbW9pSnlBYmMwRVlkeUliSUI5cUloOXFJaXdnS1hOQkZIY2lLV29pTUNBdmMwRVlkeUl2SUN4cUlpd2dLWE5CR1hjaUtTQXFJQmhxSUI4Z0huTkJHWGNpSG1vaUh5QWFhaUF1SUN0elFSaDNJaW9nSDNOQkVIY2lIeUFrSUNacUlpUnFJaVlnSG5OQkZIY2lIbW9pSzJvZ0Uyb2lMaUFGYWlBdUlDY2dGMm9nSkNBaWMwRVpkeUlpYWlJa0lCeHFJQ01nSkhOQkVIY2lJeUFxSUNocUlpUnFJaWNnSW5OQkZIY2lJbW9pS0NBamMwRVlkeUlqYzBFUWR5SXFJQzBnRkdvZ0pDQWRjMEVaZHlJZGFpSWtJQlZxSUJzZ0pITkJFSGNpR3lBbGFpSWtJQjF6UVJSM0loMXFJaVVnRzNOQkdIY2lHeUFrYWlJa2FpSXRJQ2x6UVJSM0lpbHFJaTRnRm1vZ0t5QWZjMEVZZHlJZklDWnFJaVlnSG5OQkdYY2lIaUFvYWlBaGFpSW9JQU5xSUNnZ0czTkJFSGNpR3lBc2FpSW9JQjV6UVJSM0loNXFJaXNnRzNOQkdIY2lHeUFvYWlJb0lCNXpRUmwzSWg1cUlpd2dGR29nTUNBa0lCMXpRUmwzSWgxcUlBSnFJaVFnR1dvZ0pDQWZjMEVRZHlJZklDTWdKMm9pSTJvaUpDQWRjMEVVZHlJZGFpSW5JQjl6UVJoM0loOGdMSE5CRUhjaUxDQWpJQ0p6UVJsM0lpSWdKV29nQVdvaUl5QWdhaUFqSUM5elFSQjNJaU1nSm1vaUpTQWljMEVVZHlJaWFpSW1JQ056UVJoM0lpTWdKV29pSldvaUx5QWVjMEVVZHlJZWFpSXdJQ3h6UVJoM0lpd2dMMm9pTHlBZWMwRVpkeUllSUNzZ0hHb2dKU0FpYzBFWmR5SWlhaUlsSUNGcUlDNGdLbk5CR0hjaUtpQWxjMEVRZHlJbElCOGdKR29pSDJvaUpDQWljMEVVZHlJaWFpSXJhaUFUYWlJdUlCcHFJQzRnSmlBWGFpQWZJQjF6UVJsM0loMXFJaDhnRW1vZ0d5QWZjMEVRZHlJYklDb2dMV29pSDJvaUppQWRjMEVVZHlJZGFpSXFJQnR6UVJoM0lodHpRUkIzSWkwZ0p5QVlhaUFmSUNselFSbDNJaDlxSWljZ0JXb2dJeUFuYzBFUWR5SWpJQ2hxSWljZ0gzTkJGSGNpSDJvaUtDQWpjMEVZZHlJaklDZHFJaWRxSWlrZ0huTkJGSGNpSG1vaUxpQWhhaUFySUNWelFSaDNJaUVnSkdvaUpDQWljMEVaZHlJaUlDcHFJQlZxSWlVZ0Eyb2dKU0FqYzBFUWR5SWpJQzlxSWlVZ0luTkJGSGNpSW1vaUtpQWpjMEVZZHlJaklDVnFJaVVnSW5OQkdYY2lJbW9pS3lBVGFpQW5JQjl6UVJsM0loTWdNR29nSUdvaUh5QUNhaUFmSUNGelFSQjNJaUVnR3lBbWFpSWJhaUlmSUJOelFSUjNJaE5xSWlZZ0lYTkJHSGNpSVNBcmMwRVFkeUluSUNnZ0d5QWRjMEVaZHlJYmFpQVphaUlkSUFGcUlCMGdMSE5CRUhjaUhTQWthaUlrSUJ0elFSUjNJaHRxSWlnZ0hYTkJHSGNpSFNBa2FpSWthaUlySUNKelFSUjNJaUpxSWl3Z0ozTkJHSGNpSnlBcmFpSXJJQ0p6UVJsM0lpSWdLaUFjYWlBa0lCdHpRUmwzSWh4cUloc2dHR29nTGlBdGMwRVlkeUlZSUJ0elFSQjNJaHNnSVNBZmFpSWhhaUlmSUJ4elFSUjNJaHhxSWlScUlCSnFJaElnR21vZ0VpQW9JQlpxSUNFZ0UzTkJHWGNpRTJvaUlTQUNhaUFqSUNGelFSQjNJZ0lnR0NBcGFpSVlhaUloSUJOelFSUjNJaE5xSWhZZ0FuTkJHSGNpQW5OQkVIY2lFaUFtSUFWcUlCZ2dIbk5CR1hjaUJXb2lHQ0FYYWlBZElCaHpRUkIzSWhnZ0pXb2lGeUFGYzBFVWR5SUZhaUlhSUJoelFSaDNJaGdnRjJvaUYyb2lIU0FpYzBFVWR5SWVhaUlpTmdJQUlBQWdGeUFGYzBFWmR5SUZJQ3hxSUNCcUlpQWdGR29nSUNBa0lCdHpRUmgzSWhSelFSQjNJaUFnQWlBaGFpSUNhaUloSUFWelFSUjNJZ1ZxSWhjZ0lITkJHSGNpSURZQ01DQUFJQllnRkNBZmFpSVVJQnh6UVJsM0loeHFJQUZxSWdFZ0ZXb2dBU0FZYzBFUWR5SUJJQ3RxSWhnZ0hITkJGSGNpRldvaUZpQUJjMEVZZHlJQklCaHFJaGdnRlhOQkdYYzJBaEFnQUNBWE5nSUVJQUFnQWlBVGMwRVpkeUlDSUJwcUlBTnFJaE1nR1dvZ0V5QW5jMEVRZHlJVElCUnFJaGtnQW5OQkZIY2lBbW9pQXlBVGMwRVlkeUlUTmdJMElBQWdJaUFTYzBFWWR5SVNJQjFxSWhRZ0huTkJHWGMyQWhRZ0FDQVRJQmxxSWhNMkFpQWdBQ0FZTmdJa0lBQWdBellDQ0NBQUlBRTJBamdnQUNBZ0lDRnFJZ0VnQlhOQkdYYzJBaGdnQUNBVU5nSW9JQUFnRmpZQ0RDQUFJQkkyQWp3Z0FDQVRJQUp6UVJsM05nSWNJQUFnQVRZQ0xBdWxFZ3NEZndSK0FuOEJmZ0YvQkg0RGZ3RitBbjhCZmdSL0l3QkIwQUpySWdFa0FBSkFJQUJGRFFBQ1FBSkFRUUF0QUltS0FVRUdkRUVBTFFDSWlnRnFJZ0lOQUVHQUNTRUREQUVMUWFDSkFVR0FDVUdBQ0NBQ2F5SUNJQUFnQWlBQVNSc2lBaEFFSUFBZ0Ftc2lBRVVOQVNBQlFhQUJha0VBS1FQUWlRRTNBd0FnQVVHb0FXcEJBQ2tEMklrQk53TUFJQUZCQUNrRG9Ja0JJZ1EzQTNBZ0FVRUFLUU9vaVFFaUJUY0RlQ0FCUVFBcEE3Q0pBU0lHTndPQUFTQUJRUUFwQTdpSkFTSUhOd09JQVNBQlFRQXBBOGlKQVRjRG1BRkJBQzBBaW9vQklRaEJBQzBBaVlvQklRbEJBQ2tEd0lrQklRcEJBQzBBaUlvQklRc2dBVUd3QVdwQkFDa0Q0SWtCTndNQUlBRkJ1QUZxUVFBcEEraUpBVGNEQUNBQlFjQUJha0VBS1FQd2lRRTNBd0FnQVVISUFXcEJBQ2tEK0lrQk53TUFJQUZCMEFGcVFRQXBBNENLQVRjREFDQUJJQXM2QU5nQklBRWdDamNEa0FFZ0FTQUlJQWxGY2tFQ2NpSUlPZ0RaQVNBQklBYzNBL2dCSUFFZ0JqY0Q4QUVnQVNBRk53UG9BU0FCSUFRM0ErQUJJQUVnQVVIZ0FXb2dBVUdZQVdvZ0N5QUtJQWhCL3dGeEVBSWdBU2tESUNFRUlBRXBBd0FoQlNBQktRTW9JUVlnQVNrRENDRUhJQUVwQXpBaERDQUJLUU1RSVEwZ0FTa0RPQ0VPSUFFcEF4Z2hEeUFLRUFWQkFFSUFOd09BaWdGQkFFSUFOd1A0aVFGQkFFSUFOd1B3aVFGQkFFSUFOd1BvaVFGQkFFSUFOd1BnaVFGQkFFSUFOd1BZaVFGQkFFSUFOd1BRaVFGQkFFSUFOd1BJaVFGQkFFRUFLUU9BaVFFM0E2Q0pBVUVBUVFBcEE0aUpBVGNEcUlrQlFRQkJBQ2tEa0lrQk53T3dpUUZCQUVFQUtRT1lpUUUzQTdpSkFVRUFRUUF0QUpDS0FTSUxRUUZxT2dDUWlnRkJBRUVBS1FQQWlRRkNBWHczQThDSkFTQUxRUVYwSWd0QnFZb0JhaUFPSUErRk53TUFJQXRCb1lvQmFpQU1JQTJGTndNQUlBdEJtWW9CYWlBR0lBZUZOd01BSUF0QmtZb0JhaUFFSUFXRk53TUFRUUJCQURzQmlJb0JJQUpCZ0FscUlRTUxBa0FnQUVHQkNFa05BQ0FCUWRRQ2FpRVFRUUFwQThDSkFTRUVJQUZCS0dvaEVRTkFJQVJDQ29ZaENrSUJJQUJCQVhLdGVVSS9oWWFuSVFJRFFDQUNJaEpCQVhZaEFpQUtJQkpCZjJxdGcwSUFVZzBBQ3lBU1FRcDJyU0VUQWtBQ1FDQVNRWUFJU3cwQUlBRkJBRHNCMkFFZ0FVSUFOd1BRQVNBQlFnQTNBOGdCSUFGQ0FEY0R3QUVnQVVJQU53TzRBU0FCUWdBM0E3QUJJQUZDQURjRHFBRWdBVUlBTndPZ0FTQUJRZ0EzQTVnQklBRkJBQ2tEZ0lrQk53TndJQUZCQUNrRGlJa0JOd040SUFGQkFDa0RrSWtCTndPQUFTQUJRUUF0QUlxS0FUb0EyZ0VnQVVFQUtRT1lpUUUzQTRnQklBRWdCRGNEa0FFZ0FVSHdBR29nQXlBU0VBUWdBU0FCS1FOd0lnUTNBd0FnQVNBQktRTjRJZ1UzQXdnZ0FTQUJLUU9BQVNJR053TVFJQUVnQVNrRGlBRWlCemNER0NBQklBRXBBNWdCTndNb0lBRWdBU2tEb0FFM0F6QWdBU0FCS1FPb0FUY0RPQ0FCTFFEYUFTRUNJQUV0QU5rQklRc2dBU2tEa0FFaENpQUJJQUV0QU5nQklnZzZBR2dnQVNBS053TWdJQUVnQVNrRHNBRTNBMEFnQVNBQktRTzRBVGNEU0NBQklBRXBBOEFCTndOUUlBRWdBU2tEeUFFM0ExZ2dBU0FCS1FQUUFUY0RZQ0FCSUFJZ0MwVnlRUUp5SWdJNkFHa2dBU0FITndPNEFpQUJJQVkzQTdBQ0lBRWdCVGNEcUFJZ0FTQUVOd09nQWlBQlFlQUJhaUFCUWFBQ2FpQVJJQWdnQ2lBQ1FmOEJjUkFDSUFFcEE0QUNJUVFnQVNrRDRBRWhCU0FCS1FPSUFpRUdJQUVwQStnQklRY2dBU2tEa0FJaERDQUJLUVB3QVNFTklBRXBBNWdDSVE0Z0FTa0QrQUVoRHlBS0VBVkJBRUVBTFFDUWlnRWlBa0VCYWpvQWtJb0JJQUpCQlhRaUFrR3BpZ0ZxSUE0Z0Q0VTNBd0FnQWtHaGlnRnFJQXdnRFlVM0F3QWdBa0daaWdGcUlBWWdCNFUzQXdBZ0FrR1JpZ0ZxSUFRZ0JZVTNBd0FNQVFzQ1FBSkFJQU1nRWlBRVFRQXRBSXFLQVNJQ0lBRVFCaUlVUVFKTERRQWdBU2tER0NFS0lBRXBBeEFoQkNBQktRTUlJUVVnQVNrREFDRUdEQUVMSUFKQkJISWhGVUVBS1FPWWlRRWhEVUVBS1FPUWlRRWhEa0VBS1FPSWlRRWhEMEVBS1FPQWlRRWhGZ05BSUJSQmZtb2lGMEVCZGlJWVFRRnFJaGxCQTNFaENFRUFJUWtDUUNBWFFRWkpEUUFnR1VGOGNTRWFRUUFoQ1NBQklRSWdFQ0VMQTBBZ0N5QUNRY0FCYWpZQ0FDQUxRWHhxSUFKQmdBRnFOZ0lBSUF0QmVHb2dBa0hBQUdvMkFnQWdDMEYwYWlBQ05nSUFJQUpCZ0FKcUlRSWdDMEVRYWlFTElCb2dDVUVFYWlJSlJ3MEFDd3NDUUNBSVJRMEFJQUVnQ1VFR2RHb2hBaUFCUWNnQ2FpQUpRUUowYWlFTEEwQWdDeUFDTmdJQUlBSkJ3QUJxSVFJZ0MwRUVhaUVMSUFoQmYyb2lDQTBBQ3dzZ0FVSElBbW9oQ3lBQlFhQUNhaUVDSUJraENBTkFJQXNvQWdBaENTQUJJQTAzQS9nQklBRWdEamNEOEFFZ0FTQVBOd1BvQVNBQklCWTNBK0FCSUFGQjhBQnFJQUZCNEFGcUlBbEJ3QUJDQUNBVkVBSWdBU2tEa0FFaENpQUJLUU53SVFRZ0FTa0RtQUVoQlNBQktRTjRJUVlnQVNrRG9BRWhCeUFCS1FPQUFTRU1JQUpCR0dvZ0FTa0RxQUVnQVNrRGlBR0ZOd01BSUFKQkVHb2dCeUFNaFRjREFDQUNRUWhxSUFVZ0JvVTNBd0FnQWlBS0lBU0ZOd01BSUFKQklHb2hBaUFMUVFScUlRc2dDRUYvYWlJSURRQUxBa0FDUUNBWFFYNXhRUUpxSUJSSkRRQWdHU0VVREFFTElBRkJvQUpxSUJsQkJYUnFJZ0lnQVNBWlFRWjBhaUlMS1FNQU53TUFJQUlnQ3lrRENEY0RDQ0FDSUFzcEF4QTNBeEFnQWlBTEtRTVlOd01ZSUJoQkFtb2hGQXNnQVNBQktRT2dBaUlHTndNQUlBRWdBU2tEcUFJaUJUY0RDQ0FCSUFFcEE3QUNJZ1EzQXhBZ0FTQUJLUU80QWlJS053TVlJQlJCQWtzTkFBc0xJQUVwQXlBaEJ5QUJLUU1vSVF3Z0FTa0RNQ0VOSUFFcEF6Z2hEa0VBS1FQQWlRRVFCVUVBUVFBdEFKQ0tBU0lDUVFGcU9nQ1FpZ0VnQWtFRmRDSUNRYW1LQVdvZ0NqY0RBQ0FDUWFHS0FXb2dCRGNEQUNBQ1FabUtBV29nQlRjREFDQUNRWkdLQVdvZ0JqY0RBRUVBS1FQQWlRRWdFMElCaUh3UUJVRUFRUUF0QUpDS0FTSUNRUUZxT2dDUWlnRWdBa0VGZENJQ1FhbUtBV29nRGpjREFDQUNRYUdLQVdvZ0RUY0RBQ0FDUVptS0FXb2dERGNEQUNBQ1FaR0tBV29nQnpjREFBdEJBRUVBS1FQQWlRRWdFM3dpQkRjRHdJa0JJQU1nRW1vaEF5QUFJQkpySWdCQmdBaExEUUFMSUFCRkRRRUxRYUNKQVNBRElBQVFCRUVBS1FQQWlRRVFCUXNnQVVIUUFtb2tBQXVHQndJSmZ3RitJd0JCd0FCcklnTWtBQUpBQWtBZ0FDMEFhQ0lFUlEwQUFrQkJ3QUFnQkdzaUJTQUNJQVVnQWtrYklnWkZEUUFnQmtFRGNTRUhRUUFoQlFKQUlBWkJCRWtOQUNBQUlBUnFJUWdnQmtGOGNTRUpRUUFoQlFOQUlBZ2dCV29pQ2tFb2FpQUJJQVZxSWdzdEFBQTZBQUFnQ2tFcGFpQUxRUUZxTFFBQU9nQUFJQXBCS21vZ0MwRUNhaTBBQURvQUFDQUtRU3RxSUF0QkEyb3RBQUE2QUFBZ0NTQUZRUVJxSWdWSERRQUxDd0pBSUFkRkRRQWdBU0FGYWlFS0lBVWdCR29nQUdwQktHb2hCUU5BSUFVZ0NpMEFBRG9BQUNBS1FRRnFJUW9nQlVFQmFpRUZJQWRCZjJvaUJ3MEFDd3NnQUMwQWFDRUVDeUFBSUFRZ0Jtb2lCem9BYUNBQklBWnFJUUVDUUNBQ0lBWnJJZ0lOQUVFQUlRSU1BZ3NnQXlBQUlBQkJLR3BCd0FBZ0FDa0RJQ0FBTFFCcUlBQkI2UUJxSWdVdEFBQWlDa1Z5RUFJZ0FDQURLUU1nSUFNcEF3Q0ZOd01BSUFBZ0F5a0RLQ0FES1FNSWhUY0RDQ0FBSUFNcEF6QWdBeWtERUlVM0F4QWdBQ0FES1FNNElBTXBBeGlGTndNWUlBQkJBRG9BYUNBRklBcEJBV282QUFBZ0FFSGdBR3BDQURjREFDQUFRZGdBYWtJQU53TUFJQUJCMEFCcVFnQTNBd0FnQUVISUFHcENBRGNEQUNBQVFjQUFha0lBTndNQUlBQkJPR3BDQURjREFDQUFRVEJxUWdBM0F3QWdBRUlBTndNb0MwRUFJUWNnQWtIQkFFa05BQ0FBUWVrQWFpSUtMUUFBSVFVZ0FDMEFhaUVMSUFBcEF5QWhEQU5BSUFNZ0FDQUJRY0FBSUF3Z0N5QUZRZjhCY1VWeVFmOEJjUkFDSUFBZ0F5a0RJQ0FES1FNQWhUY0RBQ0FBSUFNcEF5Z2dBeWtEQ0lVM0F3Z2dBQ0FES1FNd0lBTXBBeENGTndNUUlBQWdBeWtET0NBREtRTVloVGNER0NBS0lBVkJBV29pQlRvQUFDQUJRY0FBYWlFQklBSkJRR29pQWtIQUFFc05BQXNMQWtCQndBQWdCMEgvQVhFaUJtc2lCU0FDSUFVZ0Fra2JJZ2xGRFFBZ0NVRURjU0VMUVFBaEJRSkFJQWxCQkVrTkFDQUFJQVpxSVFjZ0NVSDhBSEVoQ0VFQUlRVURRQ0FISUFWcUlnSkJLR29nQVNBRmFpSUtMUUFBT2dBQUlBSkJLV29nQ2tFQmFpMEFBRG9BQUNBQ1FTcHFJQXBCQW1vdEFBQTZBQUFnQWtFcmFpQUtRUU5xTFFBQU9nQUFJQWdnQlVFRWFpSUZSdzBBQ3dzQ1FDQUxSUTBBSUFFZ0JXb2hBU0FGSUFacUlBQnFRU2hxSVFVRFFDQUZJQUV0QUFBNkFBQWdBVUVCYWlFQklBVkJBV29oQlNBTFFYOXFJZ3NOQUFzTElBQXRBR2doQndzZ0FDQUhJQWxxT2dCb0lBTkJ3QUJxSkFBTDNnTUVCWDhEZmdWL0JuNGpBRUhRQVdzaUFTUUFBa0FnQUh1bklnSkJBQzBBa0lvQklnTlBEUUJCQUMwQWlvb0JRUVJ5SVFRZ0FVRW9haUVGUVFBcEE1aUpBU0VBUVFBcEE1Q0pBU0VHUVFBcEE0aUpBU0VIUVFBcEE0Q0pBU0VJSUFNaENRTkFJQUVnQURjREdDQUJJQVkzQXhBZ0FTQUhOd01JSUFFZ0NEY0RBQ0FCSUFOQkJYUWlBMEhSaVFGcUlnb3BBd0EzQXlnZ0FTQURRZG1KQVdvaUN5a0RBRGNETUNBQklBTkI0WWtCYWlJTUtRTUFOd000SUFFZ0EwSHBpUUZxSWcwcEF3QTNBMEFnQVNBRFFmR0pBV29wQXdBM0EwZ2dBU0FEUWZtSkFXb3BBd0EzQTFBZ0FTQURRWUdLQVdvcEF3QTNBMWdnQTBHSmlnRnFLUU1BSVE0Z0FVSEFBRG9BYUNBQklBNDNBMkFnQVVJQU53TWdJQUVnQkRvQWFTQUJJQUEzQTRnQklBRWdCamNEZ0FFZ0FTQUhOd040SUFFZ0NEY0RjQ0FCUVpBQmFpQUJRZkFBYWlBRlFjQUFRZ0FnQkVIL0FYRVFBaUFCS1FPd0FTRU9JQUVwQTVBQklROGdBU2tEdUFFaEVDQUJLUU9ZQVNFUklBRXBBOEFCSVJJZ0FTa0RvQUVoRXlBTklBRXBBOGdCSUFFcEE2Z0JoVGNEQUNBTUlCSWdFNFUzQXdBZ0N5QVFJQkdGTndNQUlBb2dEaUFQaFRjREFDQUpRWDlxSWdsQi93RnhJZ01nQWtzTkFBdEJBQ0FKT2dDUWlnRUxJQUZCMEFGcUpBQUx3d2tDQ244RmZpTUFRZUFDYXlJRkpBQUNRQUpBSUFGQmdBaExEUUFnQlNBQU5nTDhBU0FGUWZ3QmFpQUJRWUFJUmlJR1FSQWdBa0VCSUFOQkFVRUNJQVFRQVNBR1FRcDBJZ2NnQVU4TkFTQUZRZUFBYWlJR1FnQTNBd0FnQlVIWUFHb2lDRUlBTndNQUlBVkIwQUJxSWdsQ0FEY0RBQ0FGUWNnQWFpSUtRZ0EzQXdBZ0JVSEFBR29pQzBJQU53TUFJQVZCT0dvaURFSUFOd01BSUFWQk1Hb2lEVUlBTndNQUlBVWdBem9BYWlBRlFnQTNBeWdnQlVFQU93Rm9JQVZCQUNrRGdJa0JOd01BSUFWQkFDa0RpSWtCTndNSUlBVkJBQ2tEa0lrQk53TVFJQVZCQUNrRG1Ja0JOd01ZSUFVZ0FVR0FDRVlpRHEwZ0FudzNBeUFnQlNBQUlBZHFRUUFnQVNBT0d4QUVJQVZCaUFGcVFUQnFJQTBwQXdBM0F3QWdCVUdJQVdwQk9Hb2dEQ2tEQURjREFDQUZJQVVwQXdBaUR6Y0RpQUVnQlNBRktRTUlJaEEzQTVBQklBVWdCU2tERUNJUk53T1lBU0FGSUFVcEF4Z2lFamNEb0FFZ0JTQUZLUU1vTndPd0FTQUZMUUJxSVFBZ0JTMEFhU0VISUFVcEF5QWhBaUFGTFFCb0lRRWdCVUdJQVdwQndBQnFJQXNwQXdBM0F3QWdCVUdJQVdwQnlBQnFJQW9wQXdBM0F3QWdCVUdJQVdwQjBBQnFJQWtwQXdBM0F3QWdCVUdJQVdwQjJBQnFJQWdwQXdBM0F3QWdCVUdJQVdwQjRBQnFJQVlwQXdBM0F3QWdCU0FCT2dEd0FTQUZJQUkzQTZnQklBVWdBQ0FIUlhKQkFuSWlBRG9BOFFFZ0JTQVNOd09ZQWlBRklCRTNBNUFDSUFVZ0VEY0RpQUlnQlNBUE53T0FBaUFGUWFBQ2FpQUZRWUFDYWlBRlFiQUJhaUFCSUFJZ0FFSC9BWEVRQWlBRktRUEFBaUVDSUFVcEE2QUNJUThnQlNrRHlBSWhFQ0FGS1FPb0FpRVJJQVVwQTlBQ0lSSWdCU2tEc0FJaEV5QUVJQTVCQlhScUlnRWdCU2tEMkFJZ0JTa0R1QUtGTndNWUlBRWdFaUFUaFRjREVDQUJJQkFnRVlVM0F3Z2dBU0FDSUErRk53TUFRUUpCQVNBT0d5RUdEQUVMSUFCQ0FTQUJRWDlxUVFwMlFRRnlyWGxDUDRXR0lnK25RUXAwSWc0Z0FpQURJQVVRQmlFSElBQWdEbW9nQVNBT2F5QVBRdi8vL3dHRElBSjhJQU1nQlVIQUFFRWdJQTVCZ0FoTEcyb1FCaUVCQWtBZ0IwRUJSdzBBSUFRZ0JTa0RBRGNEQUNBRUlBVXBBd2czQXdnZ0JDQUZLUU1RTndNUUlBUWdCU2tER0RjREdDQUVJQVVwQXlBM0F5QWdCQ0FGS1FNb053TW9JQVFnQlNrRE1EY0RNQ0FFSUFVcEF6ZzNBemhCQWlFR0RBRUxRUUFoQmtFQUlRQUNRQ0FCSUFkcUlnbEJBa2tOQUNBSlFYNXFJZ3BCQVhaQkFXb2lCa0VEY1NFT1FRQWhCd0pBSUFwQkJra05BQ0FHUVh4eElRZ2dCVUdVQVdvaEFVRUFJUWNnQlNFQUEwQWdBU0FBUWNBQmFqWUNBQ0FCUVh4cUlBQkJnQUZxTmdJQUlBRkJlR29nQUVIQUFHbzJBZ0FnQVVGMGFpQUFOZ0lBSUFCQmdBSnFJUUFnQVVFUWFpRUJJQWdnQjBFRWFpSUhSdzBBQ3dzZ0NrRitjU0VJQWtBZ0RrVU5BQ0FGSUFkQkJuUnFJUUVnQlVHSUFXb2dCMEVDZEdvaEFBTkFJQUFnQVRZQ0FDQUJRY0FBYWlFQklBQkJCR29oQUNBT1FYOXFJZzROQUFzTElBaEJBbW9oQUFzZ0JVR0lBV29nQmtFQlFnQkJBQ0FEUVFSeVFRQkJBQ0FFRUFFZ0FDQUpUdzBBSUFRZ0JrRUZkR29pQVNBRklBWkJCblJxSWdBcEF3QTNBd0FnQVNBQUtRTUlOd01JSUFFZ0FDa0RFRGNERUNBQklBQXBBeGczQXhnZ0JrRUJhaUVHQ3lBRlFlQUNhaVFBSUFZTHJSQUlBbjhFZmdGL0FYNEVmd1IrQkg4RWZpTUFRZkFCYXlJQkpBQUNRQ0FBUlEwQUFrQkJBQzBBa0lvQklnSU5BQ0FCUVRCcVFRQXBBOUNKQVRjREFDQUJRVGhxUVFBcEE5aUpBVGNEQUNBQlFRQXBBNkNKQVNJRE53TUFJQUZCQUNrRHFJa0JJZ1EzQXdnZ0FVRUFLUU93aVFFaUJUY0RFQ0FCUVFBcEE3aUpBU0lHTndNWUlBRkJBQ2tEeUlrQk53TW9RUUF0QUlxS0FTRUNRUUF0QUltS0FTRUhRUUFwQThDSkFTRUlRUUF0QUlpS0FTRUpJQUZCd0FCcVFRQXBBK0NKQVRjREFDQUJRY2dBYWtFQUtRUG9pUUUzQXdBZ0FVSFFBR3BCQUNrRDhJa0JOd01BSUFGQjJBQnFRUUFwQS9pSkFUY0RBQ0FCUWVBQWFrRUFLUU9BaWdFM0F3QWdBU0FKT2dCb0lBRWdDRGNESUNBQklBSWdCMFZ5SWdKQkFuSTZBR2tnQVVFb2FpRUtRZ0FoQ0VHQUNTRUxJQUpCQ25KQi93RnhJUXdEUUNBQlFiQUJhaUFCSUFvZ0NVSC9BWEVnQ0NBTUVBSWdBU0FCS1FQUUFTSU5JQUVwQTdBQmhUY0RjQ0FCSUFFcEE5Z0JJZzRnQVNrRHVBR0ZOd040SUFFZ0FTa0Q0QUVpRHlBQktRUEFBWVUzQTRBQklBRWdBU2tENkFFaUVDQUdoVGNEcUFFZ0FTQVBJQVdGTndPZ0FTQUJJQTRnQklVM0E1Z0JJQUVnRFNBRGhUY0RrQUVnQVNBUUlBRXBBOGdCaFRjRGlBRWdBRUhBQUNBQVFjQUFTUnNpRVVGL2FpRVNBa0FDUUNBUlFRZHhJaE1OQUNBQlFmQUFhaUVDSUFzaEJ5QVJJUlFNQVFzZ0VVSDRBSEVoRkNBQlFmQUFhaUVDSUFzaEJ3TkFJQWNnQWkwQUFEb0FBQ0FIUVFGcUlRY2dBa0VCYWlFQ0lCTkJmMm9pRXcwQUN3c0NRQ0FTUVFkSkRRQURRQ0FISUFJcEFBQTNBQUFnQjBFSWFpRUhJQUpCQ0dvaEFpQVVRWGhxSWhRTkFBc0xJQWhDQVh3aENDQUxJQkZxSVFzZ0FDQVJheUlBRFFBTUFnc0xBa0FDUUFKQVFRQXRBSW1LQVNJSFFRWjBRUUJCQUMwQWlJb0JJaEZyUmcwQUlBRWdFVG9BYUNBQlFRQXBBNENLQVRjRFlDQUJRUUFwQS9pSkFUY0RXQ0FCUVFBcEEvQ0pBVGNEVUNBQlFRQXBBK2lKQVRjRFNDQUJRUUFwQStDSkFUY0RRQ0FCUVFBcEE5aUpBVGNET0NBQlFRQXBBOUNKQVRjRE1DQUJRUUFwQThpSkFUY0RLQ0FCUVFBcEE4Q0pBU0lJTndNZ0lBRkJBQ2tEdUlrQklnTTNBeGdnQVVFQUtRT3dpUUVpQkRjREVDQUJRUUFwQTZpSkFTSUZOd01JSUFGQkFDa0RvSWtCSWdZM0F3QWdBVUVBTFFDS2lnRWlFeUFIUlhKQkFuSWlDem9BYVNBVFFRUnlJUk5CQUNrRG1Ja0JJUTFCQUNrRGtJa0JJUTVCQUNrRGlJa0JJUTlCQUNrRGdJa0JJUkFNQVF0QndBQWhFU0FCUWNBQU9nQm9RZ0FoQ0NBQlFnQTNBeUFnQVVFQUtRT1lpUUVpRFRjREdDQUJRUUFwQTVDSkFTSU9Od01RSUFGQkFDa0RpSWtCSWc4M0F3Z2dBVUVBS1FPQWlRRWlFRGNEQUNBQlFRQXRBSXFLQVVFRWNpSVRPZ0JwSUFFZ0FrRithaUlDUVFWMElnZEJ5WW9CYWlrREFEY0RZQ0FCSUFkQndZb0JhaWtEQURjRFdDQUJJQWRCdVlvQmFpa0RBRGNEVUNBQklBZEJzWW9CYWlrREFEY0RTQ0FCSUFkQnFZb0JhaWtEQURjRFFDQUJJQWRCb1lvQmFpa0RBRGNET0NBQklBZEJtWW9CYWlrREFEY0RNQ0FCSUFkQmtZb0JhaWtEQURjREtDQVRJUXNnRUNFR0lBOGhCU0FPSVFRZ0RTRURJQUpGRFFFTElBSkJmMm9pQjBFRmRDSVVRWkdLQVdvcEF3QWhGU0FVUVptS0FXb3BBd0FoRmlBVVFhR0tBV29wQXdBaEZ5QVVRYW1LQVdvcEF3QWhHQ0FCSUFNM0E0Z0JJQUVnQkRjRGdBRWdBU0FGTndONElBRWdCamNEY0NBQlFiQUJhaUFCUWZBQWFpQUJRU2hxSWhRZ0VTQUlJQXRCL3dGeEVBSWdBU0FUT2dCcElBRkJ3QUE2QUdnZ0FTQVlOd05BSUFFZ0Z6Y0RPQ0FCSUJZM0F6QWdBU0FWTndNb0lBRkNBRGNESUNBQklBMDNBeGdnQVNBT053TVFJQUVnRHpjRENDQUJJQkEzQXdBZ0FTQUJLUVBvQVNBQktRUElBWVUzQTJBZ0FTQUJLUVBnQVNBQktRUEFBWVUzQTFnZ0FTQUJLUVBZQVNBQktRTzRBWVUzQTFBZ0FTQUJLUVBRQVNBQktRT3dBWVUzQTBnZ0IwVU5BQ0FDUVFWMFFlbUpBV29oQWlBVFFmOEJjU0VSQTBBZ0FrRm9haWtEQUNFSUlBSkJjR29wQXdBaEF5QUNRWGhxS1FNQUlRUWdBaWtEQUNFRklBRWdEVGNEaUFFZ0FTQU9Od09BQVNBQklBODNBM2dnQVNBUU53TndJQUZCc0FGcUlBRkI4QUJxSUJSQndBQkNBQ0FSRUFJZ0FTQVRPZ0JwSUFGQndBQTZBR2dnQVNBRk53TkFJQUVnQkRjRE9DQUJJQU0zQXpBZ0FTQUlOd01vSUFGQ0FEY0RJQ0FCSUEwM0F4Z2dBU0FPTndNUUlBRWdEemNEQ0NBQklCQTNBd0FnQVNBQktRUG9BU0FCS1FQSUFZVTNBMkFnQVNBQktRUGdBU0FCS1FQQUFZVTNBMWdnQVNBQktRUFlBU0FCS1FPNEFZVTNBMUFnQVNBQktRUFFBU0FCS1FPd0FZVTNBMGdnQWtGZ2FpRUNJQWRCZjJvaUJ3MEFDd3NnQVVFb2FpRUpRZ0FoQ0VHQUNTRUxJQk5CQ0hKQi93RnhJUW9EUUNBQlFiQUJhaUFCSUFsQndBQWdDQ0FLRUFJZ0FTQUJLUVBRQVNJRElBRXBBN0FCaFRjRGNDQUJJQUVwQTlnQklnUWdBU2tEdUFHRk53TjRJQUVnQVNrRDRBRWlCU0FCS1FQQUFZVTNBNEFCSUFFZ0RTQUJLUVBvQVNJR2hUY0RxQUVnQVNBT0lBV0ZOd09nQVNBQklBOGdCSVUzQTVnQklBRWdFQ0FEaFRjRGtBRWdBU0FHSUFFcEE4Z0JoVGNEaUFFZ0FFSEFBQ0FBUWNBQVNSc2lFVUYvYWlFU0FrQUNRQ0FSUVFkeEloTU5BQ0FCUWZBQWFpRUNJQXNoQnlBUklSUU1BUXNnRVVINEFIRWhGQ0FCUWZBQWFpRUNJQXNoQndOQUlBY2dBaTBBQURvQUFDQUhRUUZxSVFjZ0FrRUJhaUVDSUJOQmYyb2lFdzBBQ3dzQ1FDQVNRUWRKRFFBRFFDQUhJQUlwQUFBM0FBQWdCMEVJYWlFSElBSkJDR29oQWlBVVFYaHFJaFFOQUFzTElBaENBWHdoQ0NBTElCRnFJUXNnQUNBUmF5SUFEUUFMQ3lBQlFmQUJhaVFBQzZNQ0FRUitBa0FDUUNBQVFTQkdEUUJDcTdPUC9KR2pzL0RiQUNFQlF2K2t1WWpGa2RxQ20zOGhBa0x5NXJ2am82ZjlwNlYvSVFOQzU4eW4wTmJRNjdPN2Z5RUVRUUFoQUF3QkMwRUFLUU9ZQ1NFQlFRQXBBNUFKSVFKQkFDa0RpQWtoQTBFQUtRT0FDU0VFUVJBaEFBdEJBQ0FBT2dDS2lnRkJBRUlBTndPQWlnRkJBRUlBTndQNGlRRkJBRUlBTndQd2lRRkJBRUlBTndQb2lRRkJBRUlBTndQZ2lRRkJBRUlBTndQWWlRRkJBRUlBTndQUWlRRkJBRUlBTndQSWlRRkJBRUlBTndQQWlRRkJBQ0FCTndPNGlRRkJBQ0FDTndPd2lRRkJBQ0FETndPb2lRRkJBQ0FFTndPZ2lRRkJBQ0FCTndPWWlRRkJBQ0FDTndPUWlRRkJBQ0FETndPSWlRRkJBQ0FFTndPQWlRRkJBRUVBT2dDUWlnRkJBRUVBT3dHSWlnRUxCZ0FnQUJBREN3WUFJQUFRQndzR0FFR0FpUUVMcXdJQkJINENRQUpBSUFGQklFWU5BRUtyczQvOGthT3o4TnNBSVFOQy82UzVpTVdSMm9LYmZ5RUVRdkxtdStPanAvMm5wWDhoQlVMbnpLZlExdERyczd0L0lRWkJBQ0VCREFFTFFRQXBBNWdKSVFOQkFDa0RrQWtoQkVFQUtRT0lDU0VGUVFBcEE0QUpJUVpCRUNFQkMwRUFJQUU2QUlxS0FVRUFRZ0EzQTRDS0FVRUFRZ0EzQS9pSkFVRUFRZ0EzQS9DSkFVRUFRZ0EzQStpSkFVRUFRZ0EzQStDSkFVRUFRZ0EzQTlpSkFVRUFRZ0EzQTlDSkFVRUFRZ0EzQThpSkFVRUFRZ0EzQThDSkFVRUFJQU0zQTdpSkFVRUFJQVEzQTdDSkFVRUFJQVUzQTZpSkFVRUFJQVkzQTZDSkFVRUFJQU0zQTVpSkFVRUFJQVEzQTVDSkFVRUFJQVUzQTRpSkFVRUFJQVkzQTRDSkFVRUFRUUE2QUpDS0FVRUFRUUE3QVlpS0FTQUFFQU1nQWhBSEN3c0xBUUJCZ0FnTEJIZ0hBQUE9XCI7XG4gICAgdmFyIGhhc2gkZyA9IFwiNTQwZThiOGVcIjtcbiAgICB2YXIgd2FzbUpzb24kZyA9IHtcbiAgICBcdG5hbWU6IG5hbWUkZyxcbiAgICBcdGRhdGE6IGRhdGEkZyxcbiAgICBcdGhhc2g6IGhhc2gkZ1xuICAgIH07XG5cbiAgICBjb25zdCBtdXRleCRpID0gbmV3IE11dGV4KCk7XG4gICAgbGV0IHdhc21DYWNoZSRpID0gbnVsbDtcbiAgICBmdW5jdGlvbiB2YWxpZGF0ZUJpdHMkMihiaXRzKSB7XG4gICAgICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihiaXRzKSB8fCBiaXRzIDwgOCB8fCBiaXRzICUgOCAhPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignSW52YWxpZCB2YXJpYW50ISBWYWxpZCB2YWx1ZXM6IDgsIDE2LCAuLi4nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlcyBCTEFLRTMgaGFzaFxuICAgICAqIEBwYXJhbSBkYXRhIElucHV0IGRhdGEgKHN0cmluZywgQnVmZmVyIG9yIFR5cGVkQXJyYXkpXG4gICAgICogQHBhcmFtIGJpdHMgTnVtYmVyIG9mIG91dHB1dCBiaXRzLCB3aGljaCBoYXMgdG8gYmUgYSBudW1iZXJcbiAgICAgKiAgICAgICAgICAgICBkaXZpc2libGUgYnkgOC4gRGVmYXVsdHMgdG8gMjU2LlxuICAgICAqIEBwYXJhbSBrZXkgT3B0aW9uYWwga2V5IChzdHJpbmcsIEJ1ZmZlciBvciBUeXBlZEFycmF5KS4gTGVuZ3RoIHNob3VsZCBiZSAzMiBieXRlcy5cbiAgICAgKiBAcmV0dXJucyBDb21wdXRlZCBoYXNoIGFzIGEgaGV4YWRlY2ltYWwgc3RyaW5nXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmxha2UzKGRhdGEsIGJpdHMgPSAyNTYsIGtleSA9IG51bGwpIHtcbiAgICAgICAgaWYgKHZhbGlkYXRlQml0cyQyKGJpdHMpKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QodmFsaWRhdGVCaXRzJDIoYml0cykpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBrZXlCdWZmZXIgPSBudWxsO1xuICAgICAgICBsZXQgaW5pdFBhcmFtID0gMDsgLy8ga2V5IGlzIGVtcHR5IGJ5IGRlZmF1bHRcbiAgICAgICAgaWYgKGtleSAhPT0gbnVsbCkge1xuICAgICAgICAgICAga2V5QnVmZmVyID0gZ2V0VUludDhCdWZmZXIoa2V5KTtcbiAgICAgICAgICAgIGlmIChrZXlCdWZmZXIubGVuZ3RoICE9PSAzMikge1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ0tleSBsZW5ndGggbXVzdCBiZSBleGFjdGx5IDMyIGJ5dGVzJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW5pdFBhcmFtID0gMzI7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaGFzaExlbmd0aCA9IGJpdHMgLyA4O1xuICAgICAgICBjb25zdCBkaWdlc3RQYXJhbSA9IGhhc2hMZW5ndGg7XG4gICAgICAgIGlmICh3YXNtQ2FjaGUkaSA9PT0gbnVsbCB8fCB3YXNtQ2FjaGUkaS5oYXNoTGVuZ3RoICE9PSBoYXNoTGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9ja2VkQ3JlYXRlKG11dGV4JGksIHdhc21Kc29uJGcsIGhhc2hMZW5ndGgpXG4gICAgICAgICAgICAgICAgLnRoZW4oKHdhc20pID0+IHtcbiAgICAgICAgICAgICAgICB3YXNtQ2FjaGUkaSA9IHdhc207XG4gICAgICAgICAgICAgICAgaWYgKGluaXRQYXJhbSA9PT0gMzIpIHtcbiAgICAgICAgICAgICAgICAgICAgd2FzbUNhY2hlJGkud3JpdGVNZW1vcnkoa2V5QnVmZmVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdhc21DYWNoZSRpLmNhbGN1bGF0ZShkYXRhLCBpbml0UGFyYW0sIGRpZ2VzdFBhcmFtKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoaW5pdFBhcmFtID09PSAzMikge1xuICAgICAgICAgICAgICAgIHdhc21DYWNoZSRpLndyaXRlTWVtb3J5KGtleUJ1ZmZlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBoYXNoID0gd2FzbUNhY2hlJGkuY2FsY3VsYXRlKGRhdGEsIGluaXRQYXJhbSwgZGlnZXN0UGFyYW0pO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShoYXNoKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IEJMQUtFMyBoYXNoIGluc3RhbmNlXG4gICAgICogQHBhcmFtIGJpdHMgTnVtYmVyIG9mIG91dHB1dCBiaXRzLCB3aGljaCBoYXMgdG8gYmUgYSBudW1iZXJcbiAgICAgKiAgICAgICAgICAgICBkaXZpc2libGUgYnkgOC4gRGVmYXVsdHMgdG8gMjU2LlxuICAgICAqIEBwYXJhbSBrZXkgT3B0aW9uYWwga2V5IChzdHJpbmcsIEJ1ZmZlciBvciBUeXBlZEFycmF5KS4gTGVuZ3RoIHNob3VsZCBiZSAzMiBieXRlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVCTEFLRTMoYml0cyA9IDI1Niwga2V5ID0gbnVsbCkge1xuICAgICAgICBpZiAodmFsaWRhdGVCaXRzJDIoYml0cykpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCh2YWxpZGF0ZUJpdHMkMihiaXRzKSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGtleUJ1ZmZlciA9IG51bGw7XG4gICAgICAgIGxldCBpbml0UGFyYW0gPSAwOyAvLyBrZXkgaXMgZW1wdHkgYnkgZGVmYXVsdFxuICAgICAgICBpZiAoa2V5ICE9PSBudWxsKSB7XG4gICAgICAgICAgICBrZXlCdWZmZXIgPSBnZXRVSW50OEJ1ZmZlcihrZXkpO1xuICAgICAgICAgICAgaWYgKGtleUJ1ZmZlci5sZW5ndGggIT09IDMyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignS2V5IGxlbmd0aCBtdXN0IGJlIGV4YWN0bHkgMzIgYnl0ZXMnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbml0UGFyYW0gPSAzMjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvdXRwdXRTaXplID0gYml0cyAvIDg7XG4gICAgICAgIGNvbnN0IGRpZ2VzdFBhcmFtID0gb3V0cHV0U2l6ZTtcbiAgICAgICAgcmV0dXJuIFdBU01JbnRlcmZhY2Uod2FzbUpzb24kZywgb3V0cHV0U2l6ZSkudGhlbigod2FzbSkgPT4ge1xuICAgICAgICAgICAgaWYgKGluaXRQYXJhbSA9PT0gMzIpIHtcbiAgICAgICAgICAgICAgICB3YXNtLndyaXRlTWVtb3J5KGtleUJ1ZmZlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3YXNtLmluaXQoaW5pdFBhcmFtKTtcbiAgICAgICAgICAgIGNvbnN0IG9iaiA9IHtcbiAgICAgICAgICAgICAgICBpbml0OiBpbml0UGFyYW0gPT09IDMyXG4gICAgICAgICAgICAgICAgICAgID8gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2FzbS53cml0ZU1lbW9yeShrZXlCdWZmZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2FzbS5pbml0KGluaXRQYXJhbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIDogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2FzbS5pbml0KGluaXRQYXJhbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHVwZGF0ZTogKGRhdGEpID0+IHsgd2FzbS51cGRhdGUoZGF0YSk7IHJldHVybiBvYmo7IH0sXG4gICAgICAgICAgICAgICAgZGlnZXN0OiAob3V0cHV0VHlwZSkgPT4gd2FzbS5kaWdlc3Qob3V0cHV0VHlwZSwgZGlnZXN0UGFyYW0pLFxuICAgICAgICAgICAgICAgIHNhdmU6ICgpID0+IHdhc20uc2F2ZSgpLFxuICAgICAgICAgICAgICAgIGxvYWQ6IChkYXRhKSA9PiB7IHdhc20ubG9hZChkYXRhKTsgcmV0dXJuIG9iajsgfSxcbiAgICAgICAgICAgICAgICBibG9ja1NpemU6IDY0LFxuICAgICAgICAgICAgICAgIGRpZ2VzdFNpemU6IG91dHB1dFNpemUsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdmFyIG5hbWUkZiA9IFwiY3JjMzJcIjtcbiAgICB2YXIgZGF0YSRmID0gXCJBR0Z6YlFFQUFBQUJFUVJnQUFGL1lBRi9BR0FBQUdBQ2YzOEFBd2dIQUFFQkFRSUFBd1VFQVFFQ0FnWU9BbjhCUVpESkJRdC9BRUdBQ0FzSGNBZ0diV1Z0YjNKNUFnQU9TR0Z6YUY5SFpYUkNkV1ptWlhJQUFBbElZWE5vWDBsdWFYUUFBZ3RJWVhOb1gxVndaR0YwWlFBRENraGhjMmhmUm1sdVlXd0FCQTFJWVhOb1gwZGxkRk4wWVhSbEFBVU9TR0Z6YUY5RFlXeGpkV3hoZEdVQUJncFRWRUZVUlY5VFNWcEZBd0VLa2dnSEJRQkJnQWtMd3dNQkEzOUJnSWtCSVFGQkFDRUNBMEFnQVVFQVFRQkJBRUVBUVFCQkFFRUFRUUFnQWtFQmNXc2dBSEVnQWtFQmRuTWlBMEVCY1dzZ0FIRWdBMEVCZG5NaUEwRUJjV3NnQUhFZ0EwRUJkbk1pQTBFQmNXc2dBSEVnQTBFQmRuTWlBMEVCY1dzZ0FIRWdBMEVCZG5NaUEwRUJjV3NnQUhFZ0EwRUJkbk1pQTBFQmNXc2dBSEVnQTBFQmRuTWlBMEVCY1dzZ0FIRWdBMEVCZG5NMkFnQWdBVUVFYWlFQklBSkJBV29pQWtHQUFrY05BQXRCQUNFQUEwQWdBRUdFa1FGcUlBQkJoSWtCYWlnQ0FDSUNRZjhCY1VFQ2RFR0FpUUZxS0FJQUlBSkJDSFp6SWdJMkFnQWdBRUdFbVFGcUlBSkIvd0Z4UVFKMFFZQ0pBV29vQWdBZ0FrRUlkbk1pQWpZQ0FDQUFRWVNoQVdvZ0FrSC9BWEZCQW5SQmdJa0JhaWdDQUNBQ1FRaDJjeUlDTmdJQUlBQkJoS2tCYWlBQ1FmOEJjVUVDZEVHQWlRRnFLQUlBSUFKQkNIWnpJZ0kyQWdBZ0FFR0VzUUZxSUFKQi93RnhRUUowUVlDSkFXb29BZ0FnQWtFSWRuTWlBallDQUNBQVFZUzVBV29nQWtIL0FYRkJBblJCZ0lrQmFpZ0NBQ0FDUVFoMmN5SUNOZ0lBSUFCQmhNRUJhaUFDUWY4QmNVRUNkRUdBaVFGcUtBSUFJQUpCQ0haek5nSUFJQUJCQkdvaUFFSDhCMGNOQUFzTEp3QUNRRUVBS0FLQXlRRWdBRVlOQUNBQUVBRkJBQ0FBTmdLQXlRRUxRUUJCQURZQ2hNa0JDNGdEQVFOL1FRQW9Bb1RKQVVGL2N5RUJRWUFKSVFJQ1FDQUFRUWhKRFFCQmdBa2hBZ05BSUFKQkJHb29BZ0FpQTBFT2RrSDhCM0ZCZ0pFQmFpZ0NBQ0FEUVJaMlFmd0hjVUdBaVFGcUtBSUFjeUFEUVFaMlFmd0hjVUdBbVFGcUtBSUFjeUFEUWY4QmNVRUNkRUdBb1FGcUtBSUFjeUFDS0FJQUlBRnpJZ0ZCRm5aQi9BZHhRWUNwQVdvb0FnQnpJQUZCRG5aQi9BZHhRWUN4QVdvb0FnQnpJQUZCQm5aQi9BZHhRWUM1QVdvb0FnQnpJQUZCL3dGeFFRSjBRWURCQVdvb0FnQnpJUUVnQWtFSWFpRUNJQUJCZUdvaUFFRUhTdzBBQ3dzQ1FDQUFSUTBBQWtBQ1FDQUFRUUZ4RFFBZ0FDRUREQUVMSUFGQi93RnhJQUl0QUFCelFRSjBRWUNKQVdvb0FnQWdBVUVJZG5NaEFTQUNRUUZxSVFJZ0FFRi9haUVEQ3lBQVFRRkdEUUFEUUNBQlFmOEJjU0FDTFFBQWMwRUNkRUdBaVFGcUtBSUFJQUZCQ0haeklnRkIvd0Z4SUFKQkFXb3RBQUJ6UVFKMFFZQ0pBV29vQWdBZ0FVRUlkbk1oQVNBQ1FRSnFJUUlnQTBGK2FpSUREUUFMQzBFQUlBRkJmM00yQW9USkFRc3lBUUYvUVFCQkFDZ0NoTWtCSWdCQkdIUWdBRUdBL2dOeFFRaDBjaUFBUVFoMlFZRCtBM0VnQUVFWWRuSnlOZ0tBQ1FzR0FFR0V5UUVMV1FBQ1FFRUFLQUtBeVFFZ0FVWU5BQ0FCRUFGQkFDQUJOZ0tBeVFFTFFRQkJBRFlDaE1rQklBQVFBMEVBUVFBb0FvVEpBU0lCUVJoMElBRkJnUDREY1VFSWRISWdBVUVJZGtHQS9nTnhJQUZCR0haeWNqWUNnQWtMQ3dzQkFFR0FDQXNFQkFBQUFBPT1cIjtcbiAgICB2YXIgaGFzaCRmID0gXCJkMmViYTU4N1wiO1xuICAgIHZhciB3YXNtSnNvbiRmID0ge1xuICAgIFx0bmFtZTogbmFtZSRmLFxuICAgIFx0ZGF0YTogZGF0YSRmLFxuICAgIFx0aGFzaDogaGFzaCRmXG4gICAgfTtcblxuICAgIGNvbnN0IG11dGV4JGggPSBuZXcgTXV0ZXgoKTtcbiAgICBsZXQgd2FzbUNhY2hlJGggPSBudWxsO1xuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZXMgQ1JDLTMyIGhhc2hcbiAgICAgKiBAcGFyYW0gZGF0YSBJbnB1dCBkYXRhIChzdHJpbmcsIEJ1ZmZlciBvciBUeXBlZEFycmF5KVxuICAgICAqIEByZXR1cm5zIENvbXB1dGVkIGhhc2ggYXMgYSBoZXhhZGVjaW1hbCBzdHJpbmdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmMzMihkYXRhKSB7XG4gICAgICAgIGlmICh3YXNtQ2FjaGUkaCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2tlZENyZWF0ZShtdXRleCRoLCB3YXNtSnNvbiRmLCA0KVxuICAgICAgICAgICAgICAgIC50aGVuKCh3YXNtKSA9PiB7XG4gICAgICAgICAgICAgICAgd2FzbUNhY2hlJGggPSB3YXNtO1xuICAgICAgICAgICAgICAgIHJldHVybiB3YXNtQ2FjaGUkaC5jYWxjdWxhdGUoZGF0YSwgMHhFREI4ODMyMCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgaGFzaCA9IHdhc21DYWNoZSRoLmNhbGN1bGF0ZShkYXRhLCAweEVEQjg4MzIwKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoaGFzaCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBDUkMtMzIgaGFzaCBpbnN0YW5jZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUNSQzMyKCkge1xuICAgICAgICByZXR1cm4gV0FTTUludGVyZmFjZSh3YXNtSnNvbiRmLCA0KS50aGVuKCh3YXNtKSA9PiB7XG4gICAgICAgICAgICB3YXNtLmluaXQoMHhFREI4ODMyMCk7XG4gICAgICAgICAgICBjb25zdCBvYmogPSB7XG4gICAgICAgICAgICAgICAgaW5pdDogKCkgPT4geyB3YXNtLmluaXQoMHhFREI4ODMyMCk7IHJldHVybiBvYmo7IH0sXG4gICAgICAgICAgICAgICAgdXBkYXRlOiAoZGF0YSkgPT4geyB3YXNtLnVwZGF0ZShkYXRhKTsgcmV0dXJuIG9iajsgfSxcbiAgICAgICAgICAgICAgICBkaWdlc3Q6IChvdXRwdXRUeXBlKSA9PiB3YXNtLmRpZ2VzdChvdXRwdXRUeXBlKSxcbiAgICAgICAgICAgICAgICBzYXZlOiAoKSA9PiB3YXNtLnNhdmUoKSxcbiAgICAgICAgICAgICAgICBsb2FkOiAoZGF0YSkgPT4geyB3YXNtLmxvYWQoZGF0YSk7IHJldHVybiBvYmo7IH0sXG4gICAgICAgICAgICAgICAgYmxvY2tTaXplOiA0LFxuICAgICAgICAgICAgICAgIGRpZ2VzdFNpemU6IDQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgbXV0ZXgkZyA9IG5ldyBNdXRleCgpO1xuICAgIGxldCB3YXNtQ2FjaGUkZyA9IG51bGw7XG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlcyBDUkMtMzJDIGhhc2hcbiAgICAgKiBAcGFyYW0gZGF0YSBJbnB1dCBkYXRhIChzdHJpbmcsIEJ1ZmZlciBvciBUeXBlZEFycmF5KVxuICAgICAqIEByZXR1cm5zIENvbXB1dGVkIGhhc2ggYXMgYSBoZXhhZGVjaW1hbCBzdHJpbmdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmMzMmMoZGF0YSkge1xuICAgICAgICBpZiAod2FzbUNhY2hlJGcgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NrZWRDcmVhdGUobXV0ZXgkZywgd2FzbUpzb24kZiwgNClcbiAgICAgICAgICAgICAgICAudGhlbigod2FzbSkgPT4ge1xuICAgICAgICAgICAgICAgIHdhc21DYWNoZSRnID0gd2FzbTtcbiAgICAgICAgICAgICAgICByZXR1cm4gd2FzbUNhY2hlJGcuY2FsY3VsYXRlKGRhdGEsIDB4ODJGNjNCNzgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGhhc2ggPSB3YXNtQ2FjaGUkZy5jYWxjdWxhdGUoZGF0YSwgMHg4MkY2M0I3OCk7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGhhc2gpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgQ1JDLTMyQyBoYXNoIGluc3RhbmNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ1JDMzJDKCkge1xuICAgICAgICByZXR1cm4gV0FTTUludGVyZmFjZSh3YXNtSnNvbiRmLCA0KS50aGVuKCh3YXNtKSA9PiB7XG4gICAgICAgICAgICB3YXNtLmluaXQoMHg4MkY2M0I3OCk7XG4gICAgICAgICAgICBjb25zdCBvYmogPSB7XG4gICAgICAgICAgICAgICAgaW5pdDogKCkgPT4geyB3YXNtLmluaXQoMHg4MkY2M0I3OCk7IHJldHVybiBvYmo7IH0sXG4gICAgICAgICAgICAgICAgdXBkYXRlOiAoZGF0YSkgPT4geyB3YXNtLnVwZGF0ZShkYXRhKTsgcmV0dXJuIG9iajsgfSxcbiAgICAgICAgICAgICAgICBkaWdlc3Q6IChvdXRwdXRUeXBlKSA9PiB3YXNtLmRpZ2VzdChvdXRwdXRUeXBlKSxcbiAgICAgICAgICAgICAgICBzYXZlOiAoKSA9PiB3YXNtLnNhdmUoKSxcbiAgICAgICAgICAgICAgICBsb2FkOiAoZGF0YSkgPT4geyB3YXNtLmxvYWQoZGF0YSk7IHJldHVybiBvYmo7IH0sXG4gICAgICAgICAgICAgICAgYmxvY2tTaXplOiA0LFxuICAgICAgICAgICAgICAgIGRpZ2VzdFNpemU6IDQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdmFyIG5hbWUkZSA9IFwibWQ0XCI7XG4gICAgdmFyIGRhdGEkZSA9IFwiQUdGemJRRUFBQUFCRWdSZ0FBRi9ZQUFBWUFGL0FHQUNmMzhCZndNSUJ3QUJBZ01CQUFJRkJBRUJBZ0lHRGdKL0FVR2dpZ1VMZndCQmdBZ0xCM0FJQm0xbGJXOXllUUlBRGtoaGMyaGZSMlYwUW5WbVptVnlBQUFKU0dGemFGOUpibWwwQUFFTFNHRnphRjlWY0dSaGRHVUFBZ3BJWVhOb1gwWnBibUZzQUFRTlNHRnphRjlIWlhSVGRHRjBaUUFGRGtoaGMyaGZRMkZzWTNWc1lYUmxBQVlLVTFSQlZFVmZVMGxhUlFNQkN1NFVCd1VBUVlBSkN5MEFRUUJDL3JucnhlbU9sWmtRTndLUWlRRkJBRUtCeHBTNmx2SHE1bTgzQW9pSkFVRUFRZ0EzQW9DSkFRdStCUUVIZjBFQVFRQW9Bb0NKQVNJQklBQnFRZi8vLy84QmNTSUNOZ0tBaVFGQkFFRUFLQUtFaVFFZ0FpQUJTV29nQUVFZGRtbzJBb1NKQVFKQUFrQUNRQUpBQWtBQ1FDQUJRVDl4SWdNTkFFR0FDU0VFREFFTFFjQUFJQU5ySWdVZ0FFc05BU0FGUVFOeElRWkJBQ0VCQWtBZ0EwRS9jMEVEU1EwQUlBTkJnSWtCYWlFRUlBVkIvQUJ4SVFkQkFDRUJBMEFnQkNBQmFpSUNRUmhxSUFGQmdBbHFMUUFBT2dBQUlBSkJHV29nQVVHQkNXb3RBQUE2QUFBZ0FrRWFhaUFCUVlJSmFpMEFBRG9BQUNBQ1FSdHFJQUZCZ3dscUxRQUFPZ0FBSUFjZ0FVRUVhaUlCUncwQUN3c0NRQ0FHUlEwQUlBTkJtSWtCYWlFQ0EwQWdBaUFCYWlBQlFZQUphaTBBQURvQUFDQUJRUUZxSVFFZ0JrRi9haUlHRFFBTEMwR1lpUUZCd0FBUUF4b2dBQ0FGYXlFQUlBVkJnQWxxSVFRTElBQkJ3QUJQRFFFZ0FDRUNEQUlMSUFCRkRRSWdBRUVEY1NFR1FRQWhBUUpBSUFCQkJFa05BQ0FEUVlDSkFXb2hCQ0FBUVh4eElRQkJBQ0VCQTBBZ0JDQUJhaUlDUVJocUlBRkJnQWxxTFFBQU9nQUFJQUpCR1dvZ0FVR0JDV290QUFBNkFBQWdBa0VhYWlBQlFZSUphaTBBQURvQUFDQUNRUnRxSUFGQmd3bHFMUUFBT2dBQUlBQWdBVUVFYWlJQlJ3MEFDd3NnQmtVTkFpQURRWmlKQVdvaEFnTkFJQUlnQVdvZ0FVR0FDV290QUFBNkFBQWdBVUVCYWlFQklBWkJmMm9pQmcwQURBTUxDeUFBUVQ5eElRSWdCQ0FBUVVCeEVBTWhCQXNnQWtVTkFDQUNRUU54SVFaQkFDRUJBa0FnQWtFRVNRMEFJQUpCUEhFaEFFRUFJUUVEUUNBQlFaaUpBV29nQkNBQmFpSUNMUUFBT2dBQUlBRkJtWWtCYWlBQ1FRRnFMUUFBT2dBQUlBRkJtb2tCYWlBQ1FRSnFMUUFBT2dBQUlBRkJtNGtCYWlBQ1FRTnFMUUFBT2dBQUlBQWdBVUVFYWlJQlJ3MEFDd3NnQmtVTkFBTkFJQUZCbUlrQmFpQUVJQUZxTFFBQU9nQUFJQUZCQVdvaEFTQUdRWDlxSWdZTkFBc0xDK3NLQVJkL1FRQW9BcFNKQVNFQ1FRQW9BcENKQVNFRFFRQW9Bb3lKQVNFRVFRQW9Bb2lKQVNFRkEwQWdBQ2dDSENJR0lBQW9BaFFpQnlBQUtBSVlJZ2dnQUNnQ0VDSUpJQUFvQWl3aUNpQUFLQUlvSWdzZ0FDZ0NKQ0lNSUFBb0FpQWlEU0FMSUFnZ0FDZ0NDQ0lPSUFOcUlBQW9BZ1FpRHlBQ2FpQUVJQU1nQW5OeElBSnpJQVZxSUFBb0FnQWlFR3BCQTNjaUVTQUVJQU56Y1NBRGMycEJCM2NpRWlBUklBUnpjU0FFYzJwQkMzY2lFMm9nRWlBSGFpQUpJQkZxSUFBb0Fnd2lGQ0FFYWlBVElCSWdFWE54SUJGemFrRVRkeUlSSUJNZ0VuTnhJQkp6YWtFRGR5SVNJQkVnRTNOeElCTnpha0VIZHlJVElCSWdFWE54SUJGemFrRUxkeUlWYWlBVElBeHFJQklnRFdvZ0VTQUdhaUFWSUJNZ0VuTnhJQkp6YWtFVGR5SVJJQlVnRTNOeElCTnpha0VEZHlJU0lCRWdGWE54SUJWemFrRUhkeUlUSUJJZ0VYTnhJQkZ6YWtFTGR5SVZJQUFvQWpnaUZtb2dFeUFBS0FJMEloZHFJQklnQUNnQ01DSVlhaUFSSUFwcUlCVWdFeUFTYzNFZ0VuTnFRUk4zSWhJZ0ZTQVRjM0VnRTNOcVFRTjNJaE1nRWlBVmMzRWdGWE5xUVFkM0loVWdFeUFTYzNFZ0VuTnFRUXQzSWhGcUlBa2dGV29nRUNBVGFpQVNJQUFvQWp3aUNXb2dFU0FWSUJOemNTQVRjMnBCRTNjaUVpQVJJQlZ5Y1NBUklCVnhjbXBCbWZPSjFBVnFRUU4zSWhNZ0VpQVJjbkVnRWlBUmNYSnFRWm56aWRRRmFrRUZkeUlSSUJNZ0VuSnhJQk1nRW5GeWFrR1o4NG5VQldwQkNYY2lGV29nQnlBUmFpQVBJQk5xSUJnZ0Vtb2dGU0FSSUJOeWNTQVJJQk54Y21wQm1mT0oxQVZxUVExM0loSWdGU0FSY25FZ0ZTQVJjWEpxUVpuemlkUUZha0VEZHlJUklCSWdGWEp4SUJJZ0ZYRnlha0daODRuVUJXcEJCWGNpRXlBUklCSnljU0FSSUJKeGNtcEJtZk9KMUFWcVFRbDNJaFZxSUFnZ0Uyb2dEaUFSYWlBWElCSnFJQlVnRXlBUmNuRWdFeUFSY1hKcVFabnppZFFGYWtFTmR5SVJJQlVnRTNKeElCVWdFM0Z5YWtHWjg0blVCV3BCQTNjaUVpQVJJQlZ5Y1NBUklCVnhjbXBCbWZPSjFBVnFRUVYzSWhNZ0VpQVJjbkVnRWlBUmNYSnFRWm56aWRRRmFrRUpkeUlWYWlBR0lCTnFJQlFnRW1vZ0ZpQVJhaUFWSUJNZ0VuSnhJQk1nRW5GeWFrR1o4NG5VQldwQkRYY2lFU0FWSUJOeWNTQVZJQk54Y21wQm1mT0oxQVZxUVFOM0loSWdFU0FWY25FZ0VTQVZjWEpxUVpuemlkUUZha0VGZHlJVElCSWdFWEp4SUJJZ0VYRnlha0daODRuVUJXcEJDWGNpRldvZ0VDQVNhaUFKSUJGcUlCVWdFeUFTY25FZ0V5QVNjWEpxUVpuemlkUUZha0VOZHlJR0lCVnpJaElnRTNOcVFhSFg1L1lHYWtFRGR5SVJJQVp6SUEwZ0Uyb2dFaUFSYzJwQm9kZm45Z1pxUVFsM0loSnpha0doMStmMkJtcEJDM2NpRTJvZ0RpQVJhaUFUSUJKeklCZ2dCbW9nRWlBUmN5QVRjMnBCb2RmbjlnWnFRUTkzSWhGemFrR2gxK2YyQm1wQkEzY2lGU0FSY3lBTElCSnFJQkVnRTNNZ0ZYTnFRYUhYNS9ZR2FrRUpkeUlTYzJwQm9kZm45Z1pxUVF0M0loTnFJQThnRldvZ0V5QVNjeUFXSUJGcUlCSWdGWE1nRTNOcVFhSFg1L1lHYWtFUGR5SVJjMnBCb2RmbjlnWnFRUU4zSWhVZ0VYTWdEQ0FTYWlBUklCTnpJQlZ6YWtHaDErZjJCbXBCQ1hjaUVuTnFRYUhYNS9ZR2FrRUxkeUlUYWlBVUlCVnFJQk1nRW5NZ0Z5QVJhaUFTSUJWeklCTnpha0doMStmMkJtcEJEM2NpRVhOcVFhSFg1L1lHYWtFRGR5SVZJQkZ6SUFvZ0Vtb2dFU0FUY3lBVmMycEJvZGZuOWdacVFRbDNJaEp6YWtHaDErZjJCbXBCQzNjaUV5QURhaUVESUFrZ0VXb2dFaUFWY3lBVGMycEJvZGZuOWdacVFROTNJQVJxSVFRZ0VpQUNhaUVDSUJVZ0JXb2hCU0FBUWNBQWFpRUFJQUZCUUdvaUFRMEFDMEVBSUFJMkFwU0pBVUVBSUFNMkFwQ0pBVUVBSUFRMkFveUpBVUVBSUFVMkFvaUpBU0FBQzg4REFRUi9RUUFvQW9DSkFVRS9jU0lBUVppSkFXcEJnQUU2QUFBZ0FFRUJhaUVCQWtBQ1FBSkFBa0FnQUVFL2N5SUNRUWRMRFFBZ0FrVU5BU0FCUVppSkFXcEJBRG9BQUNBQ1FRRkdEUUVnQUVHYWlRRnFRUUE2QUFBZ0FrRUNSZzBCSUFCQm00a0Jha0VBT2dBQUlBSkJBMFlOQVNBQVFaeUpBV3BCQURvQUFDQUNRUVJHRFFFZ0FFR2RpUUZxUVFBNkFBQWdBa0VGUmcwQklBQkJub2tCYWtFQU9nQUFJQUpCQmtZTkFTQUFRWitKQVdwQkFEb0FBQXdCQ3lBQ1FRaEdEUUpCTmlBQWF5RURBa0FnQWtFRGNTSUFEUUFnQXlFQ0RBSUxRUUFnQUdzaEFrRUFJUUFEUUNBQVFjK0pBV3BCQURvQUFDQUNJQUJCZjJvaUFFY05BQXNnQXlBQWFpRUNEQUVMUVppSkFVSEFBQkFER2tFQUlRRkJOeUVEUVRjaEFnc2dBMEVEU1EwQUlBRkJnSWtCYWlFQVFYOGhBUU5BSUFBZ0FtcEJGV3BCQURZQUFDQUFRWHhxSVFBZ0FpQUJRUVJxSWdGSERRQUxDMEVBUVFBb0FvU0pBVFlDMUlrQlFRQkJBQ2dDZ0lrQklnQkJGWFk2QU5PSkFVRUFJQUJCRFhZNkFOS0pBVUVBSUFCQkJYWTZBTkdKQVVFQUlBQkJBM1FpQURvQTBJa0JRUUFnQURZQ2dJa0JRWmlKQVVIQUFCQURHa0VBUVFBcEFvaUpBVGNEZ0FsQkFFRUFLUUtRaVFFM0E0Z0pDd1lBUVlDSkFRc3pBRUVBUXY2NTY4WHBqcFdaRURjQ2tJa0JRUUJDZ2NhVXVwYng2dVp2TndLSWlRRkJBRUlBTndLQWlRRWdBQkFDRUFRTEN3c0JBRUdBQ0FzRW1BQUFBQT09XCI7XG4gICAgdmFyIGhhc2gkZSA9IFwiNzQ5MDljMjRcIjtcbiAgICB2YXIgd2FzbUpzb24kZSA9IHtcbiAgICBcdG5hbWU6IG5hbWUkZSxcbiAgICBcdGRhdGE6IGRhdGEkZSxcbiAgICBcdGhhc2g6IGhhc2gkZVxuICAgIH07XG5cbiAgICBjb25zdCBtdXRleCRmID0gbmV3IE11dGV4KCk7XG4gICAgbGV0IHdhc21DYWNoZSRmID0gbnVsbDtcbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGVzIE1ENCBoYXNoXG4gICAgICogQHBhcmFtIGRhdGEgSW5wdXQgZGF0YSAoc3RyaW5nLCBCdWZmZXIgb3IgVHlwZWRBcnJheSlcbiAgICAgKiBAcmV0dXJucyBDb21wdXRlZCBoYXNoIGFzIGEgaGV4YWRlY2ltYWwgc3RyaW5nXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWQ0KGRhdGEpIHtcbiAgICAgICAgaWYgKHdhc21DYWNoZSRmID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9ja2VkQ3JlYXRlKG11dGV4JGYsIHdhc21Kc29uJGUsIDE2KVxuICAgICAgICAgICAgICAgIC50aGVuKCh3YXNtKSA9PiB7XG4gICAgICAgICAgICAgICAgd2FzbUNhY2hlJGYgPSB3YXNtO1xuICAgICAgICAgICAgICAgIHJldHVybiB3YXNtQ2FjaGUkZi5jYWxjdWxhdGUoZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgaGFzaCA9IHdhc21DYWNoZSRmLmNhbGN1bGF0ZShkYXRhKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoaGFzaCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBNRDQgaGFzaCBpbnN0YW5jZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZU1ENCgpIHtcbiAgICAgICAgcmV0dXJuIFdBU01JbnRlcmZhY2Uod2FzbUpzb24kZSwgMTYpLnRoZW4oKHdhc20pID0+IHtcbiAgICAgICAgICAgIHdhc20uaW5pdCgpO1xuICAgICAgICAgICAgY29uc3Qgb2JqID0ge1xuICAgICAgICAgICAgICAgIGluaXQ6ICgpID0+IHsgd2FzbS5pbml0KCk7IHJldHVybiBvYmo7IH0sXG4gICAgICAgICAgICAgICAgdXBkYXRlOiAoZGF0YSkgPT4geyB3YXNtLnVwZGF0ZShkYXRhKTsgcmV0dXJuIG9iajsgfSxcbiAgICAgICAgICAgICAgICBkaWdlc3Q6IChvdXRwdXRUeXBlKSA9PiB3YXNtLmRpZ2VzdChvdXRwdXRUeXBlKSxcbiAgICAgICAgICAgICAgICBzYXZlOiAoKSA9PiB3YXNtLnNhdmUoKSxcbiAgICAgICAgICAgICAgICBsb2FkOiAoZGF0YSkgPT4geyB3YXNtLmxvYWQoZGF0YSk7IHJldHVybiBvYmo7IH0sXG4gICAgICAgICAgICAgICAgYmxvY2tTaXplOiA2NCxcbiAgICAgICAgICAgICAgICBkaWdlc3RTaXplOiAxNixcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgbmFtZSRkID0gXCJtZDVcIjtcbiAgICB2YXIgZGF0YSRkID0gXCJBR0Z6YlFFQUFBQUJFZ1JnQUFGL1lBQUFZQUYvQUdBQ2YzOEJmd01JQndBQkFnTUJBQUlGQkFFQkFnSUdEZ0ovQVVHZ2lnVUxmd0JCZ0FnTEIzQUlCbTFsYlc5eWVRSUFEa2hoYzJoZlIyVjBRblZtWm1WeUFBQUpTR0Z6YUY5SmJtbDBBQUVMU0dGemFGOVZjR1JoZEdVQUFncElZWE5vWDBacGJtRnNBQVFOU0dGemFGOUhaWFJUZEdGMFpRQUZEa2hoYzJoZlEyRnNZM1ZzWVhSbEFBWUtVMVJCVkVWZlUwbGFSUU1CQ29vYUJ3VUFRWUFKQ3kwQVFRQkMvcm5yeGVtT2xaa1FOd0tRaVFGQkFFS0J4cFM2bHZIcTVtODNBb2lKQVVFQVFnQTNBb0NKQVF1K0JRRUhmMEVBUVFBb0FvQ0pBU0lCSUFCcVFmLy8vLzhCY1NJQ05nS0FpUUZCQUVFQUtBS0VpUUVnQWlBQlNXb2dBRUVkZG1vMkFvU0pBUUpBQWtBQ1FBSkFBa0FDUUNBQlFUOXhJZ01OQUVHQUNTRUVEQUVMUWNBQUlBTnJJZ1VnQUVzTkFTQUZRUU54SVFaQkFDRUJBa0FnQTBFL2MwRURTUTBBSUFOQmdJa0JhaUVFSUFWQi9BQnhJUWRCQUNFQkEwQWdCQ0FCYWlJQ1FSaHFJQUZCZ0FscUxRQUFPZ0FBSUFKQkdXb2dBVUdCQ1dvdEFBQTZBQUFnQWtFYWFpQUJRWUlKYWkwQUFEb0FBQ0FDUVJ0cUlBRkJnd2xxTFFBQU9nQUFJQWNnQVVFRWFpSUJSdzBBQ3dzQ1FDQUdSUTBBSUFOQm1Ja0JhaUVDQTBBZ0FpQUJhaUFCUVlBSmFpMEFBRG9BQUNBQlFRRnFJUUVnQmtGL2FpSUdEUUFMQzBHWWlRRkJ3QUFRQXhvZ0FDQUZheUVBSUFWQmdBbHFJUVFMSUFCQndBQlBEUUVnQUNFQ0RBSUxJQUJGRFFJZ0FFRURjU0VHUVFBaEFRSkFJQUJCQkVrTkFDQURRWUNKQVdvaEJDQUFRWHh4SVFCQkFDRUJBMEFnQkNBQmFpSUNRUmhxSUFGQmdBbHFMUUFBT2dBQUlBSkJHV29nQVVHQkNXb3RBQUE2QUFBZ0FrRWFhaUFCUVlJSmFpMEFBRG9BQUNBQ1FSdHFJQUZCZ3dscUxRQUFPZ0FBSUFBZ0FVRUVhaUlCUncwQUN3c2dCa1VOQWlBRFFaaUpBV29oQWdOQUlBSWdBV29nQVVHQUNXb3RBQUE2QUFBZ0FVRUJhaUVCSUFaQmYyb2lCZzBBREFNTEN5QUFRVDl4SVFJZ0JDQUFRVUJ4RUFNaEJBc2dBa1VOQUNBQ1FRTnhJUVpCQUNFQkFrQWdBa0VFU1EwQUlBSkJQSEVoQUVFQUlRRURRQ0FCUVppSkFXb2dCQ0FCYWlJQ0xRQUFPZ0FBSUFGQm1Za0JhaUFDUVFGcUxRQUFPZ0FBSUFGQm1va0JhaUFDUVFKcUxRQUFPZ0FBSUFGQm00a0JhaUFDUVFOcUxRQUFPZ0FBSUFBZ0FVRUVhaUlCUncwQUN3c2dCa1VOQUFOQUlBRkJtSWtCYWlBRUlBRnFMUUFBT2dBQUlBRkJBV29oQVNBR1FYOXFJZ1lOQUFzTEM0Y1FBUmwvUVFBb0FwU0pBU0VDUVFBb0FwQ0pBU0VEUVFBb0FveUpBU0VFUVFBb0FvaUpBU0VGQTBBZ0FDZ0NDQ0lHSUFBb0FoZ2lCeUFBS0FJb0lnZ2dBQ2dDT0NJSklBQW9BandpQ2lBQUtBSU1JZ3NnQUNnQ0hDSU1JQUFvQWl3aURTQU1JQXNnQ2lBTklBa2dDQ0FISUFNZ0Jtb2dBaUFBS0FJRUlnNXFJQVVnQkNBQ0lBTnpjU0FDYzJvZ0FDZ0NBQ0lQYWtINHlLcTdmV3BCQjNjZ0JHb2lFQ0FFSUFOemNTQURjMnBCMXU2ZXhuNXFRUXgzSUJCcUloRWdFQ0FFYzNFZ0JITnFRZHZoZ2FFQ2FrRVJkeUFSYWlJU2FpQUFLQUlVSWhNZ0VXb2dBQ2dDRUNJVUlCQnFJQVFnQzJvZ0VpQVJJQkJ6Y1NBUWMycEI3cDMzalh4cVFSWjNJQkpxSWhBZ0VpQVJjM0VnRVhOcVFhK2Y4S3QvYWtFSGR5QVFhaUlSSUJBZ0VuTnhJQkp6YWtHcWpKKzhCR3BCREhjZ0VXb2lFaUFSSUJCemNTQVFjMnBCazR6QndYcHFRUkYzSUJKcUloVnFJQUFvQWlRaUZpQVNhaUFBS0FJZ0loY2dFV29nRENBUWFpQVZJQklnRVhOeElCRnpha0dCcXBwcWFrRVdkeUFWYWlJUUlCVWdFbk54SUJKemFrSFlzWUxNQm1wQkIzY2dFR29pRVNBUUlCVnpjU0FWYzJwQnIrK1QybmhxUVF4M0lCRnFJaElnRVNBUWMzRWdFSE5xUWJHM2ZXcEJFWGNnRW1vaUZXb2dBQ2dDTkNJWUlCSnFJQUFvQWpBaUdTQVJhaUFOSUJCcUlCVWdFaUFSYzNFZ0VYTnFRYjZ2ODhwNGFrRVdkeUFWYWlJUUlCVWdFbk54SUJKemFrR2lvc0RjQm1wQkIzY2dFR29pRVNBUUlCVnpjU0FWYzJwQmsrUGhiR3BCREhjZ0VXb2lGU0FSSUJCemNTQVFjMnBCam9mbHMzcHFRUkYzSUJWcUloSnFJQWNnRldvZ0RpQVJhaUFLSUJCcUlCSWdGU0FSYzNFZ0VYTnFRYUdRME0wRWFrRVdkeUFTYWlJUUlCSnpJQlZ4SUJKemFrSGl5dml3ZjJwQkJYY2dFR29pRVNBUWN5QVNjU0FRYzJwQndPYUNnbnhxUVFsM0lCRnFJaElnRVhNZ0VIRWdFWE5xUWRHMCtiSUNha0VPZHlBU2FpSVZhaUFJSUJKcUlCTWdFV29nRHlBUWFpQVZJQkp6SUJGeElCSnpha0dxajl2TmZtcEJGSGNnRldvaUVDQVZjeUFTY1NBVmMycEIzYUM4c1gxcVFRVjNJQkJxSWhFZ0VITWdGWEVnRUhOcVFkT29rQkpxUVFsM0lCRnFJaElnRVhNZ0VIRWdFWE5xUVlITmg4Vjlha0VPZHlBU2FpSVZhaUFKSUJKcUlCWWdFV29nRkNBUWFpQVZJQkp6SUJGeElCSnpha0hJOTgrK2ZtcEJGSGNnRldvaUVDQVZjeUFTY1NBVmMycEI1cHVIandKcVFRVjNJQkJxSWhFZ0VITWdGWEVnRUhOcVFkYVAzSmw4YWtFSmR5QVJhaUlTSUJGeklCQnhJQkZ6YWtHSG05U21mMnBCRG5jZ0Vtb2lGV29nQmlBU2FpQVlJQkZxSUJjZ0VHb2dGU0FTY3lBUmNTQVNjMnBCN2Fub3FnUnFRUlIzSUJWcUloQWdGWE1nRW5FZ0ZYTnFRWVhTajg5NmFrRUZkeUFRYWlJUklCQnpJQlZ4SUJCemFrSDR4NzVuYWtFSmR5QVJhaUlTSUJGeklCQnhJQkZ6YWtIWmhieTdCbXBCRG5jZ0Vtb2lGV29nRnlBU2FpQVRJQkZxSUJrZ0VHb2dGU0FTY3lBUmNTQVNjMnBCaXBtcDZYaHFRUlIzSUJWcUloQWdGWE1pRlNBU2MycEJ3dkpvYWtFRWR5QVFhaUlSSUJWemFrR0I3Y2U3ZUdwQkMzY2dFV29pRWlBUmN5SWFJQkJ6YWtHaXd2WHNCbXBCRUhjZ0Vtb2lGV29nRkNBU2FpQU9JQkZxSUFrZ0VHb2dGU0FhYzJwQmpQQ1ViMnBCRjNjZ0ZXb2lFQ0FWY3lJVklCSnpha0hFMVB1bGVtcEJCSGNnRUdvaUVTQVZjMnBCcVovNzNnUnFRUXQzSUJGcUloSWdFWE1pQ1NBUWMycEI0SmJ0dFg5cVFSQjNJQkpxSWhWcUlBOGdFbW9nR0NBUmFpQUlJQkJxSUJVZ0NYTnFRZkQ0L3ZWN2FrRVhkeUFWYWlJUUlCVnpJaFVnRW5OcVFjYjk3Y1FDYWtFRWR5QVFhaUlSSUJWemFrSDZ6NFRWZm1wQkMzY2dFV29pRWlBUmN5SUlJQkJ6YWtHRjRieW5mV3BCRUhjZ0Vtb2lGV29nR1NBU2FpQVdJQkZxSUFjZ0VHb2dGU0FJYzJwQmhicWdKR3BCRjNjZ0ZXb2lFU0FWY3lJUUlCSnpha0c1b05QT2ZXcEJCSGNnRVdvaUVpQVFjMnBCNWJQdXRuNXFRUXQzSUJKcUloVWdFbk1pQnlBUmMycEIrUG1KL1FGcVFSQjNJQlZxSWhCcUlBd2dGV29nRHlBU2FpQUdJQkZxSUJBZ0IzTnFRZVdzc2FWOGFrRVhkeUFRYWlJUklCVkJmM055SUJCemFrSEV4S1NoZjJwQkJuY2dFV29pRWlBUVFYOXpjaUFSYzJwQmwvK3JtUVJxUVFwM0lCSnFJaEFnRVVGL2MzSWdFbk5xUWFmSDBOeDZha0VQZHlBUWFpSVZhaUFMSUJCcUlCa2dFbW9nRXlBUmFpQVZJQkpCZjNOeUlCQnpha0c1d001a2FrRVZkeUFWYWlJUklCQkJmM055SUJWemFrSERzKzJxQm1wQkJuY2dFV29pRUNBVlFYOXpjaUFSYzJwQmtwbXorSGhxUVFwM0lCQnFJaElnRVVGL2MzSWdFSE5xUWYzb3YzOXFRUTkzSUJKcUloVnFJQW9nRW1vZ0Z5QVFhaUFPSUJGcUlCVWdFRUYvYzNJZ0VuTnFRZEc3a2F4NGFrRVZkeUFWYWlJUUlCSkJmM055SUJWemFrSFAvS0g5Qm1wQkJuY2dFR29pRVNBVlFYOXpjaUFRYzJwQjRNMnpjV3BCQ25jZ0VXb2lFaUFRUVg5emNpQVJjMnBCbElhRm1IcHFRUTkzSUJKcUloVnFJQTBnRW1vZ0ZDQVJhaUFZSUJCcUlCVWdFVUYvYzNJZ0VuTnFRYUdqb1BBRWFrRVZkeUFWYWlJUUlCSkJmM055SUJWemFrR0MvYzI2ZjJwQkJuY2dFR29pRVNBVlFYOXpjaUFRYzJwQnRlVHI2WHRxUVFwM0lCRnFJaElnRUVGL2MzSWdFWE5xUWJ1bDM5WUNha0VQZHlBU2FpSVZJQVJxSUJZZ0VHb2dGU0FSUVg5emNpQVNjMnBCa2FlYjNINXFRUlYzYWlFRUlCVWdBMm9oQXlBU0lBSnFJUUlnRVNBRmFpRUZJQUJCd0FCcUlRQWdBVUZBYWlJQkRRQUxRUUFnQWpZQ2xJa0JRUUFnQXpZQ2tJa0JRUUFnQkRZQ2pJa0JRUUFnQlRZQ2lJa0JJQUFMendNQkJIOUJBQ2dDZ0lrQlFUOXhJZ0JCbUlrQmFrR0FBVG9BQUNBQVFRRnFJUUVDUUFKQUFrQUNRQ0FBUVQ5eklnSkJCMHNOQUNBQ1JRMEJJQUZCbUlrQmFrRUFPZ0FBSUFKQkFVWU5BU0FBUVpxSkFXcEJBRG9BQUNBQ1FRSkdEUUVnQUVHYmlRRnFRUUE2QUFBZ0FrRURSZzBCSUFCQm5Ja0Jha0VBT2dBQUlBSkJCRVlOQVNBQVFaMkpBV3BCQURvQUFDQUNRUVZHRFFFZ0FFR2VpUUZxUVFBNkFBQWdBa0VHUmcwQklBQkJuNGtCYWtFQU9nQUFEQUVMSUFKQkNFWU5Ba0UySUFCcklRTUNRQ0FDUVFOeElnQU5BQ0FESVFJTUFndEJBQ0FBYXlFQ1FRQWhBQU5BSUFCQno0a0Jha0VBT2dBQUlBSWdBRUYvYWlJQVJ3MEFDeUFESUFCcUlRSU1BUXRCbUlrQlFjQUFFQU1hUVFBaEFVRTNJUU5CTnlFQ0N5QURRUU5KRFFBZ0FVR0FpUUZxSVFCQmZ5RUJBMEFnQUNBQ2FrRVZha0VBTmdBQUlBQkJmR29oQUNBQ0lBRkJCR29pQVVjTkFBc0xRUUJCQUNnQ2hJa0JOZ0xVaVFGQkFFRUFLQUtBaVFFaUFFRVZkam9BMDRrQlFRQWdBRUVOZGpvQTBva0JRUUFnQUVFRmRqb0EwWWtCUVFBZ0FFRURkQ0lBT2dEUWlRRkJBQ0FBTmdLQWlRRkJtSWtCUWNBQUVBTWFRUUJCQUNrQ2lJa0JOd09BQ1VFQVFRQXBBcENKQVRjRGlBa0xCZ0JCZ0lrQkN6TUFRUUJDL3JucnhlbU9sWmtRTndLUWlRRkJBRUtCeHBTNmx2SHE1bTgzQW9pSkFVRUFRZ0EzQW9DSkFTQUFFQUlRQkFzTEN3RUFRWUFJQ3dTWUFBQUFcIjtcbiAgICB2YXIgaGFzaCRkID0gXCI0MmZhNGQyOVwiO1xuICAgIHZhciB3YXNtSnNvbiRkID0ge1xuICAgIFx0bmFtZTogbmFtZSRkLFxuICAgIFx0ZGF0YTogZGF0YSRkLFxuICAgIFx0aGFzaDogaGFzaCRkXG4gICAgfTtcblxuICAgIGNvbnN0IG11dGV4JGUgPSBuZXcgTXV0ZXgoKTtcbiAgICBsZXQgd2FzbUNhY2hlJGUgPSBudWxsO1xuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZXMgTUQ1IGhhc2hcbiAgICAgKiBAcGFyYW0gZGF0YSBJbnB1dCBkYXRhIChzdHJpbmcsIEJ1ZmZlciBvciBUeXBlZEFycmF5KVxuICAgICAqIEByZXR1cm5zIENvbXB1dGVkIGhhc2ggYXMgYSBoZXhhZGVjaW1hbCBzdHJpbmdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZDUoZGF0YSkge1xuICAgICAgICBpZiAod2FzbUNhY2hlJGUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NrZWRDcmVhdGUobXV0ZXgkZSwgd2FzbUpzb24kZCwgMTYpXG4gICAgICAgICAgICAgICAgLnRoZW4oKHdhc20pID0+IHtcbiAgICAgICAgICAgICAgICB3YXNtQ2FjaGUkZSA9IHdhc207XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdhc21DYWNoZSRlLmNhbGN1bGF0ZShkYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBoYXNoID0gd2FzbUNhY2hlJGUuY2FsY3VsYXRlKGRhdGEpO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShoYXNoKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IE1ENSBoYXNoIGluc3RhbmNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlTUQ1KCkge1xuICAgICAgICByZXR1cm4gV0FTTUludGVyZmFjZSh3YXNtSnNvbiRkLCAxNikudGhlbigod2FzbSkgPT4ge1xuICAgICAgICAgICAgd2FzbS5pbml0KCk7XG4gICAgICAgICAgICBjb25zdCBvYmogPSB7XG4gICAgICAgICAgICAgICAgaW5pdDogKCkgPT4geyB3YXNtLmluaXQoKTsgcmV0dXJuIG9iajsgfSxcbiAgICAgICAgICAgICAgICB1cGRhdGU6IChkYXRhKSA9PiB7IHdhc20udXBkYXRlKGRhdGEpOyByZXR1cm4gb2JqOyB9LFxuICAgICAgICAgICAgICAgIGRpZ2VzdDogKG91dHB1dFR5cGUpID0+IHdhc20uZGlnZXN0KG91dHB1dFR5cGUpLFxuICAgICAgICAgICAgICAgIHNhdmU6ICgpID0+IHdhc20uc2F2ZSgpLFxuICAgICAgICAgICAgICAgIGxvYWQ6IChkYXRhKSA9PiB7IHdhc20ubG9hZChkYXRhKTsgcmV0dXJuIG9iajsgfSxcbiAgICAgICAgICAgICAgICBibG9ja1NpemU6IDY0LFxuICAgICAgICAgICAgICAgIGRpZ2VzdFNpemU6IDE2LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBuYW1lJGMgPSBcInNoYTFcIjtcbiAgICB2YXIgZGF0YSRjID0gXCJBR0Z6YlFFQUFBQUJFUVJnQUFGL1lBRi9BR0FBQUdBQ2YzOEFBd2tJQUFFQ0F3RUNBQUVGQkFFQkFnSUdEZ0ovQVVIZ2lRVUxmd0JCZ0FnTEIzQUlCbTFsYlc5eWVRSUFEa2hoYzJoZlIyVjBRblZtWm1WeUFBQUpTR0Z6YUY5SmJtbDBBQUlMU0dGemFGOVZjR1JoZEdVQUJBcElZWE5vWDBacGJtRnNBQVVOU0dGemFGOUhaWFJUZEdGMFpRQUdEa2hoYzJoZlEyRnNZM1ZzWVhSbEFBY0tVMVJCVkVWZlUwbGFSUU1CQ3BvcUNBVUFRWUFKQzY4aUNnRitBbjhCZmdGL0FYNERmd0YrQVg4QmZrZC9RUUFnQUNrREVDSUJRaUNJcHlJQ1FSaDBJQUpCZ1A0RGNVRUlkSElnQVVJb2lLZEJnUDREY1NBQlFqaUlwM0p5SWdNZ0FDa0RDQ0lFUWlDSXB5SUNRUmgwSUFKQmdQNERjVUVJZEhJZ0JFSW9pS2RCZ1A0RGNTQUVRamlJcDNKeUlnVnpJQUFwQXlnaUJrSWdpS2NpQWtFWWRDQUNRWUQrQTNGQkNIUnlJQVpDS0lpblFZRCtBM0VnQmtJNGlLZHljaUlIY3lBRXB5SUNRUmgwSUFKQmdQNERjVUVJZEhJZ0FrRUlka0dBL2dOeElBSkJHSFp5Y2lJSUlBQXBBd0FpQktjaUFrRVlkQ0FDUVlEK0EzRkJDSFJ5SUFKQkNIWkJnUDREY1NBQ1FSaDJjbklpQ1hNZ0FDa0RJQ0lLcHlJQ1FSaDBJQUpCZ1A0RGNVRUlkSElnQWtFSWRrR0EvZ054SUFKQkdIWnljaUlMY3lBQUtRTXdJZ3hDSUlpbklnSkJHSFFnQWtHQS9nTnhRUWgwY2lBTVFpaUlwMEdBL2dOeElBeENPSWluY25JaUFuTkJBWGNpRFhOQkFYY2lEaUFGSUFSQ0lJaW5JZzlCR0hRZ0QwR0EvZ054UVFoMGNpQUVRaWlJcDBHQS9nTnhJQVJDT0lpbmNuSWlFSE1nQ2tJZ2lLY2lEMEVZZENBUFFZRCtBM0ZCQ0hSeUlBcENLSWluUVlEK0EzRWdDa0k0aUtkeWNpSVJjeUFBS1FNNElnU25JZzlCR0hRZ0QwR0EvZ054UVFoMGNpQVBRUWgyUVlEK0EzRWdEMEVZZG5KeUlnOXpRUUYzSWhKeklBY2dFWE1nRW5NZ0N5QUFLUU1ZSWdxbklnQkJHSFFnQUVHQS9nTnhRUWgwY2lBQVFRaDJRWUQrQTNFZ0FFRVlkbkp5SWhOeklBOXpJQTV6UVFGM0lnQnpRUUYzSWhSeklBMGdEM01nQUhNZ0FpQUhjeUFPY3lBR3B5SVZRUmgwSUJWQmdQNERjVUVJZEhJZ0ZVRUlka0dBL2dOeElCVkJHSFp5Y2lJV0lBdHpJQTF6SUFwQ0lJaW5JaFZCR0hRZ0ZVR0EvZ054UVFoMGNpQUtRaWlJcDBHQS9nTnhJQXBDT0lpbmNuSWlGeUFEY3lBQ2N5QUJweUlWUVJoMElCVkJnUDREY1VFSWRISWdGVUVJZGtHQS9nTnhJQlZCR0haeWNpSVlJQWh6SUJaeklBUkNJSWluSWhWQkdIUWdGVUdBL2dOeFFRaDBjaUFFUWlpSXAwR0EvZ054SUFSQ09JaW5jbklpRlhOQkFYY2lHWE5CQVhjaUduTkJBWGNpRzNOQkFYY2lISE5CQVhjaUhYTkJBWGNpSGlBU0lCVnpJQkVnRjNNZ0ZYTWdFeUFZY3lBTXB5SWZRUmgwSUI5QmdQNERjVUVJZEhJZ0gwRUlka0dBL2dOeElCOUJHSFp5Y2lJZ2N5QVNjMEVCZHlJZmMwRUJkeUloY3lBUElDQnpJQjl6SUJSelFRRjNJaUp6UVFGM0lpTnpJQlFnSVhNZ0kzTWdBQ0FmY3lBaWN5QWVjMEVCZHlJa2MwRUJkeUlsY3lBZElDSnpJQ1J6SUJ3Z0ZITWdIbk1nR3lBQWN5QWRjeUFhSUE1eklCeHpJQmtnRFhNZ0czTWdGU0FDY3lBYWN5QWdJQlp6SUJseklDRnpRUUYzSWlaelFRRjNJaWR6UVFGM0lpaHpRUUYzSWlselFRRjNJaXB6UVFGM0lpdHpRUUYzSWl4elFRRjNJaTBnSXlBbmN5QWhJQnB6SUNkeklCOGdHWE1nSm5NZ0kzTkJBWGNpTG5OQkFYY2lMM01nSWlBbWN5QXVjeUFsYzBFQmR5SXdjMEVCZHlJeGN5QWxJQzl6SURGeklDUWdMbk1nTUhNZ0xYTkJBWGNpTW5OQkFYY2lNM01nTENBd2N5QXljeUFySUNWeklDMXpJQ29nSkhNZ0xITWdLU0FlY3lBcmN5QW9JQjF6SUNweklDY2dISE1nS1hNZ0ppQWJjeUFvY3lBdmMwRUJkeUkwYzBFQmR5STFjMEVCZHlJMmMwRUJkeUkzYzBFQmR5STRjMEVCZHlJNWMwRUJkeUk2YzBFQmR5STdJREVnTlhNZ0x5QXBjeUExY3lBdUlDaHpJRFJ6SURGelFRRjNJanh6UVFGM0lqMXpJREFnTkhNZ1BITWdNM05CQVhjaVBuTkJBWGNpUDNNZ015QTljeUEvY3lBeUlEeHpJRDV6SUR0elFRRjNJa0J6UVFGM0lrRnpJRG9nUG5NZ1FITWdPU0F6Y3lBN2N5QTRJREp6SURweklEY2dMWE1nT1hNZ05pQXNjeUE0Y3lBMUlDdHpJRGR6SURRZ0tuTWdObk1nUFhOQkFYY2lRbk5CQVhjaVEzTkJBWGNpUkhOQkFYY2lSWE5CQVhjaVJuTkJBWGNpUjNOQkFYY2lTSE5CQVhjaVNTQStJRUp6SUR3Z05uTWdRbk1nUDNOQkFYY2lTbk1nUVhOQkFYY2lTeUE5SURkeklFTnpJRXB6UVFGM0lrd2dSQ0E1SURJZ01TQTBJQ2tnSFNBVUlCOGdGU0FXUVFBb0FvQ0pBU0pOUVFWM1FRQW9BcENKQVNKT2FpQUpha0VBS0FLTWlRRWlUMEVBS0FLSWlRRWlDWE5CQUNnQ2hJa0JJbEJ4SUU5emFrR1o4NG5VQldvaVVVRWVkeUpTSUFOcUlGQkJIbmNpQXlBRmFpQlBJQU1nQ1hNZ1RYRWdDWE5xSUJCcUlGRkJCWGRxUVpuemlkUUZhaUlRSUZJZ1RVRWVkeUlGYzNFZ0JYTnFJQWtnQ0dvZ1VTQURJQVZ6Y1NBRGMyb2dFRUVGZDJwQm1mT0oxQVZxSWxGQkJYZHFRWm56aWRRRmFpSlRJRkZCSG5jaUF5QVFRUjUzSWdoemNTQUljMm9nQlNBWWFpQlJJQWdnVW5OeElGSnphaUJUUVFWM2FrR1o4NG5VQldvaUJVRUZkMnBCbWZPSjFBVnFJaGhCSG5jaVVtb2dVMEVlZHlJV0lBdHFJQWdnRTJvZ0JTQVdJQU56Y1NBRGMyb2dHRUVGZDJwQm1mT0oxQVZxSWdnZ1VpQUZRUjUzSWd0emNTQUxjMm9nQXlBWGFpQVlJQXNnRm5OeElCWnphaUFJUVFWM2FrR1o4NG5VQldvaUJVRUZkMnBCbWZPSjFBVnFJaE1nQlVFZWR5SVdJQWhCSG5jaUEzTnhJQU56YWlBTElCRnFJQVVnQXlCU2MzRWdVbk5xSUJOQkJYZHFRWm56aWRRRmFpSVJRUVYzYWtHWjg0blVCV29pVWtFZWR5SUxhaUFDSUJOQkhuY2lGV29nQnlBRGFpQVJJQlVnRm5OeElCWnphaUJTUVFWM2FrR1o4NG5VQldvaUJ5QUxJQkZCSG5jaUFuTnhJQUp6YWlBZ0lCWnFJRklnQWlBVmMzRWdGWE5xSUFkQkJYZHFRWm56aWRRRmFpSVJRUVYzYWtHWjg0blVCV29pRmlBUlFSNTNJaFVnQjBFZWR5SUhjM0VnQjNOcUlBOGdBbW9nRVNBSElBdHpjU0FMYzJvZ0ZrRUZkMnBCbWZPSjFBVnFJZ3RCQlhkcVFabnppZFFGYWlJUlFSNTNJZ0pxSUJJZ0ZXb2dFU0FMUVI1M0lnOGdGa0VlZHlJU2MzRWdFbk5xSUEwZ0Iyb2dDeUFTSUJWemNTQVZjMm9nRVVFRmQycEJtZk9KMUFWcUlnMUJCWGRxUVpuemlkUUZhaUlWUVI1M0loOGdEVUVlZHlJSGN5QVpJQkpxSUEwZ0FpQVBjM0VnRDNOcUlCVkJCWGRxUVpuemlkUUZhaUlOYzJvZ0RpQVBhaUFWSUFjZ0FuTnhJQUp6YWlBTlFRVjNha0daODRuVUJXb2lBa0VGZDJwQm9kZm45Z1pxSWc1QkhuY2lEMm9nQUNBZmFpQUNRUjUzSWdBZ0RVRWVkeUlOY3lBT2Myb2dHaUFIYWlBTklCOXpJQUp6YWlBT1FRVjNha0doMStmMkJtb2lBa0VGZDJwQm9kZm45Z1pxSWc1QkhuY2lFaUFDUVI1M0loUnpJQ0VnRFdvZ0R5QUFjeUFDYzJvZ0RrRUZkMnBCb2RmbjlnWnFJZ0p6YWlBYklBQnFJQlFnRDNNZ0RuTnFJQUpCQlhkcVFhSFg1L1lHYWlJQVFRVjNha0doMStmMkJtb2lEVUVlZHlJT2FpQWNJQkpxSUFCQkhuY2lEeUFDUVI1M0lnSnpJQTF6YWlBbUlCUnFJQUlnRW5NZ0FITnFJQTFCQlhkcVFhSFg1L1lHYWlJQVFRVjNha0doMStmMkJtb2lEVUVlZHlJU0lBQkJIbmNpRkhNZ0lpQUNhaUFPSUE5eklBQnphaUFOUVFWM2FrR2gxK2YyQm1vaUFITnFJQ2NnRDJvZ0ZDQU9jeUFOYzJvZ0FFRUZkMnBCb2RmbjlnWnFJZ0pCQlhkcVFhSFg1L1lHYWlJTlFSNTNJZzVxSUNnZ0Vtb2dBa0VlZHlJUElBQkJIbmNpQUhNZ0RYTnFJQ01nRkdvZ0FDQVNjeUFDYzJvZ0RVRUZkMnBCb2RmbjlnWnFJZ0pCQlhkcVFhSFg1L1lHYWlJTlFSNTNJaElnQWtFZWR5SVVjeUFlSUFCcUlBNGdEM01nQW5OcUlBMUJCWGRxUWFIWDUvWUdhaUlBYzJvZ0xpQVBhaUFVSUE1eklBMXphaUFBUVFWM2FrR2gxK2YyQm1vaUFrRUZkMnBCb2RmbjlnWnFJZzFCSG5jaURtb2dLaUFBUVI1M0lnQnFJQTRnQWtFZWR5SVBjeUFrSUJScUlBQWdFbk1nQW5OcUlBMUJCWGRxUWFIWDUvWUdhaUlVYzJvZ0x5QVNhaUFQSUFCeklBMXphaUFVUVFWM2FrR2gxK2YyQm1vaURVRUZkMnBCb2RmbjlnWnFJZ0FnRFVFZWR5SUNjaUFVUVI1M0loSnhJQUFnQW5GeWFpQWxJQTlxSUJJZ0RuTWdEWE5xSUFCQkJYZHFRYUhYNS9ZR2FpSU5RUVYzYWtIYytlNzRlR29pRGtFZWR5SVBhaUExSUFCQkhuY2lBR29nS3lBU2FpQU5JQUJ5SUFKeElBMGdBSEZ5YWlBT1FRVjNha0hjK2U3NGVHb2lFaUFQY2lBTlFSNTNJZzF4SUJJZ0QzRnlhaUF3SUFKcUlBNGdEWElnQUhFZ0RpQU5jWEpxSUJKQkJYZHFRZHo1N3ZoNGFpSUFRUVYzYWtIYytlNzRlR29pQWlBQVFSNTNJZzV5SUJKQkhuY2lFbkVnQWlBT2NYSnFJQ3dnRFdvZ0FDQVNjaUFQY1NBQUlCSnhjbW9nQWtFRmQycEIzUG51K0hocUlnQkJCWGRxUWR6NTd2aDRhaUlOUVI1M0lnOXFJRHdnQWtFZWR5SUNhaUEySUJKcUlBQWdBbklnRG5FZ0FDQUNjWEpxSUExQkJYZHFRZHo1N3ZoNGFpSVNJQTl5SUFCQkhuY2lBSEVnRWlBUGNYSnFJQzBnRG1vZ0RTQUFjaUFDY1NBTklBQnhjbW9nRWtFRmQycEIzUG51K0hocUlnSkJCWGRxUWR6NTd2aDRhaUlOSUFKQkhuY2lEbklnRWtFZWR5SVNjU0FOSUE1eGNtb2dOeUFBYWlBQ0lCSnlJQTl4SUFJZ0VuRnlhaUFOUVFWM2FrSGMrZTc0ZUdvaUFFRUZkMnBCM1BudStIaHFJZ0pCSG5jaUQyb2dNeUFOUVI1M0lnMXFJRDBnRW1vZ0FDQU5jaUFPY1NBQUlBMXhjbW9nQWtFRmQycEIzUG51K0hocUloSWdEM0lnQUVFZWR5SUFjU0FTSUE5eGNtb2dPQ0FPYWlBQ0lBQnlJQTF4SUFJZ0FIRnlhaUFTUVFWM2FrSGMrZTc0ZUdvaUFrRUZkMnBCM1BudStIaHFJZzBnQWtFZWR5SU9jaUFTUVI1M0loSnhJQTBnRG5GeWFpQkNJQUJxSUFJZ0VuSWdEM0VnQWlBU2NYSnFJQTFCQlhkcVFkejU3dmg0YWlJQVFRVjNha0hjK2U3NGVHb2lBa0VlZHlJUGFpQkRJQTVxSUFJZ0FFRWVkeUlVY2lBTlFSNTNJZzF4SUFJZ0ZIRnlhaUErSUJKcUlBQWdEWElnRG5FZ0FDQU5jWEpxSUFKQkJYZHFRZHo1N3ZoNGFpSUFRUVYzYWtIYytlNzRlR29pQWtFZWR5SVNJQUJCSG5jaURuTWdPaUFOYWlBQUlBOXlJQlJ4SUFBZ0QzRnlhaUFDUVFWM2FrSGMrZTc0ZUdvaUFITnFJRDhnRkdvZ0FpQU9jaUFQY1NBQ0lBNXhjbW9nQUVFRmQycEIzUG51K0hocUlnSkJCWGRxUWRhRGk5TjhhaUlOUVI1M0lnOXFJRW9nRW1vZ0FrRWVkeUlVSUFCQkhuY2lBSE1nRFhOcUlEc2dEbW9nQUNBU2N5QUNjMm9nRFVFRmQycEIxb09MMDN4cUlnSkJCWGRxUWRhRGk5TjhhaUlOUVI1M0lnNGdBa0VlZHlJU2N5QkZJQUJxSUE4Z0ZITWdBbk5xSUExQkJYZHFRZGFEaTlOOGFpSUFjMm9nUUNBVWFpQVNJQTl6SUExemFpQUFRUVYzYWtIV2c0dlRmR29pQWtFRmQycEIxb09MMDN4cUlnMUJIbmNpRDJvZ1FTQU9haUFDUVI1M0loUWdBRUVlZHlJQWN5QU5jMm9nUmlBU2FpQUFJQTV6SUFKemFpQU5RUVYzYWtIV2c0dlRmR29pQWtFRmQycEIxb09MMDN4cUlnMUJIbmNpRGlBQ1FSNTNJaEp6SUVJZ09ITWdSSE1nVEhOQkFYY2lGU0FBYWlBUElCUnpJQUp6YWlBTlFRVjNha0hXZzR2VGZHb2lBSE5xSUVjZ0ZHb2dFaUFQY3lBTmMyb2dBRUVGZDJwQjFvT0wwM3hxSWdKQkJYZHFRZGFEaTlOOGFpSU5RUjUzSWc5cUlFZ2dEbW9nQWtFZWR5SVVJQUJCSG5jaUFITWdEWE5xSUVNZ09YTWdSWE1nRlhOQkFYY2lHU0FTYWlBQUlBNXpJQUp6YWlBTlFRVjNha0hXZzR2VGZHb2lBa0VGZDJwQjFvT0wwM3hxSWcxQkhuY2lEaUFDUVI1M0loSnpJRDhnUTNNZ1RITWdTM05CQVhjaUdpQUFhaUFQSUJSeklBSnphaUFOUVFWM2FrSFdnNHZUZkdvaUFITnFJRVFnT25NZ1JuTWdHWE5CQVhjaUd5QVVhaUFTSUE5eklBMXphaUFBUVFWM2FrSFdnNHZUZkdvaUFrRUZkMnBCMW9PTDAzeHFJZzFCSG5jaUR5Qk9hallDa0lrQlFRQWdUeUJLSUVSeklCVnpJQnB6UVFGM0loUWdFbW9nQUVFZWR5SUFJQTV6SUFKemFpQU5RUVYzYWtIV2c0dlRmR29pRWtFZWR5SVZhallDaklrQlFRQWdDU0JGSUR0eklFZHpJQnR6UVFGM0lBNXFJQUpCSG5jaUFpQUFjeUFOYzJvZ0VrRUZkMnBCMW9PTDAzeHFJZzFCSG5kcU5nS0lpUUZCQUNCUUlFQWdTbk1nUzNNZ1NYTkJBWGNnQUdvZ0R5QUNjeUFTYzJvZ0RVRUZkMnBCMW9PTDAzeHFJZ0JxTmdLRWlRRkJBQ0JOSUV3Z1JYTWdHWE1nRkhOQkFYZHFJQUpxSUJVZ0QzTWdEWE5xSUFCQkJYZHFRZGFEaTlOOGFqWUNnSWtCQ3pvQVFRQkMvcm5yeGVtT2xaa1FOd0tJaVFGQkFFS0J4cFM2bHZIcTVtODNBb0NKQVVFQVF2RER5NTRNTndLUWlRRkJBRUVBTmdLWWlRRUxxQU1CQ0g5QkFDRUNRUUJCQUNnQ2xJa0JJZ01nQVVFRGRHb2lCRFlDbElrQlFRQkJBQ2dDbUlrQklBUWdBMGxxSUFGQkhYWnFOZ0tZaVFFQ1FDQURRUU4yUVQ5eElnVWdBV3BCd0FCSkRRQkJ3QUFnQldzaUFrRURjU0VHUVFBaEF3SkFJQVZCUDNOQkEwa05BQ0FGUVlDSkFXb2hCeUFDUWZ3QWNTRUlRUUFoQXdOQUlBY2dBMm9pQkVFY2FpQUFJQU5xSWdrdEFBQTZBQUFnQkVFZGFpQUpRUUZxTFFBQU9nQUFJQVJCSG1vZ0NVRUNhaTBBQURvQUFDQUVRUjlxSUFsQkEyb3RBQUE2QUFBZ0NDQURRUVJxSWdOSERRQUxDd0pBSUFaRkRRQWdBQ0FEYWlFRUlBTWdCV3BCbklrQmFpRURBMEFnQXlBRUxRQUFPZ0FBSUFSQkFXb2hCQ0FEUVFGcUlRTWdCa0YvYWlJR0RRQUxDMEdjaVFFUUFTQUZRZjhBY3lFRFFRQWhCU0FESUFGUERRQURRQ0FBSUFKcUVBRWdBa0gvQUdvaEF5QUNRY0FBYWlJRUlRSWdBeUFCU1EwQUN5QUVJUUlMQWtBZ0FTQUNSZzBBSUFFZ0Ftc2hDU0FBSUFKcUlRSWdCVUdjaVFGcUlRTkJBQ0VFQTBBZ0F5QUNMUUFBT2dBQUlBSkJBV29oQWlBRFFRRnFJUU1nQ1NBRVFRRnFJZ1JCL3dGeFN3MEFDd3NMQ1FCQmdBa2dBQkFEQzZZREFRSi9Jd0JCRUdzaUFDUUFJQUJCZ0FFNkFBY2dBRUVBS0FLWWlRRWlBVUVZZENBQlFZRCtBM0ZCQ0hSeUlBRkJDSFpCZ1A0RGNTQUJRUmgyY25JMkFBZ2dBRUVBS0FLVWlRRWlBVUVZZENBQlFZRCtBM0ZCQ0hSeUlBRkJDSFpCZ1A0RGNTQUJRUmgyY25JMkFBd2dBRUVIYWtFQkVBTUNRRUVBS0FLVWlRRkIrQU54UWNBRFJnMEFBMEFnQUVFQU9nQUhJQUJCQjJwQkFSQURRUUFvQXBTSkFVSDRBM0ZCd0FOSERRQUxDeUFBUVFocVFRZ1FBMEVBUVFBb0FvQ0pBU0lCUVJoMElBRkJnUDREY1VFSWRISWdBVUVJZGtHQS9nTnhJQUZCR0haeWNqWUNnQWxCQUVFQUtBS0VpUUVpQVVFWWRDQUJRWUQrQTNGQkNIUnlJQUZCQ0haQmdQNERjU0FCUVJoMmNuSTJBb1FKUVFCQkFDZ0NpSWtCSWdGQkdIUWdBVUdBL2dOeFFRaDBjaUFCUVFoMlFZRCtBM0VnQVVFWWRuSnlOZ0tJQ1VFQVFRQW9Bb3lKQVNJQlFSaDBJQUZCZ1A0RGNVRUlkSElnQVVFSWRrR0EvZ054SUFGQkdIWnljallDakFsQkFFRUFLQUtRaVFFaUFVRVlkQ0FCUVlEK0EzRkJDSFJ5SUFGQkNIWkJnUDREY1NBQlFSaDJjbkkyQXBBSklBQkJFR29rQUFzR0FFR0FpUUVMUXdCQkFFTCt1ZXZGNlk2Vm1SQTNBb2lKQVVFQVFvSEdsTHFXOGVybWJ6Y0NnSWtCUVFCQzhNUExuZ3czQXBDSkFVRUFRUUEyQXBpSkFVR0FDU0FBRUFNUUJRc0xDd0VBUVlBSUN3UmNBQUFBXCI7XG4gICAgdmFyIGhhc2gkYyA9IFwiNmI1MzBjMjRcIjtcbiAgICB2YXIgd2FzbUpzb24kYyA9IHtcbiAgICBcdG5hbWU6IG5hbWUkYyxcbiAgICBcdGRhdGE6IGRhdGEkYyxcbiAgICBcdGhhc2g6IGhhc2gkY1xuICAgIH07XG5cbiAgICBjb25zdCBtdXRleCRkID0gbmV3IE11dGV4KCk7XG4gICAgbGV0IHdhc21DYWNoZSRkID0gbnVsbDtcbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGVzIFNIQS0xIGhhc2hcbiAgICAgKiBAcGFyYW0gZGF0YSBJbnB1dCBkYXRhIChzdHJpbmcsIEJ1ZmZlciBvciBUeXBlZEFycmF5KVxuICAgICAqIEByZXR1cm5zIENvbXB1dGVkIGhhc2ggYXMgYSBoZXhhZGVjaW1hbCBzdHJpbmdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaGExKGRhdGEpIHtcbiAgICAgICAgaWYgKHdhc21DYWNoZSRkID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9ja2VkQ3JlYXRlKG11dGV4JGQsIHdhc21Kc29uJGMsIDIwKVxuICAgICAgICAgICAgICAgIC50aGVuKCh3YXNtKSA9PiB7XG4gICAgICAgICAgICAgICAgd2FzbUNhY2hlJGQgPSB3YXNtO1xuICAgICAgICAgICAgICAgIHJldHVybiB3YXNtQ2FjaGUkZC5jYWxjdWxhdGUoZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgaGFzaCA9IHdhc21DYWNoZSRkLmNhbGN1bGF0ZShkYXRhKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoaGFzaCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBTSEEtMSBoYXNoIGluc3RhbmNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlU0hBMSgpIHtcbiAgICAgICAgcmV0dXJuIFdBU01JbnRlcmZhY2Uod2FzbUpzb24kYywgMjApLnRoZW4oKHdhc20pID0+IHtcbiAgICAgICAgICAgIHdhc20uaW5pdCgpO1xuICAgICAgICAgICAgY29uc3Qgb2JqID0ge1xuICAgICAgICAgICAgICAgIGluaXQ6ICgpID0+IHsgd2FzbS5pbml0KCk7IHJldHVybiBvYmo7IH0sXG4gICAgICAgICAgICAgICAgdXBkYXRlOiAoZGF0YSkgPT4geyB3YXNtLnVwZGF0ZShkYXRhKTsgcmV0dXJuIG9iajsgfSxcbiAgICAgICAgICAgICAgICBkaWdlc3Q6IChvdXRwdXRUeXBlKSA9PiB3YXNtLmRpZ2VzdChvdXRwdXRUeXBlKSxcbiAgICAgICAgICAgICAgICBzYXZlOiAoKSA9PiB3YXNtLnNhdmUoKSxcbiAgICAgICAgICAgICAgICBsb2FkOiAoZGF0YSkgPT4geyB3YXNtLmxvYWQoZGF0YSk7IHJldHVybiBvYmo7IH0sXG4gICAgICAgICAgICAgICAgYmxvY2tTaXplOiA2NCxcbiAgICAgICAgICAgICAgICBkaWdlc3RTaXplOiAyMCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgbmFtZSRiID0gXCJzaGEzXCI7XG4gICAgdmFyIGRhdGEkYiA9IFwiQUdGemJRRUFBQUFCRkFSZ0FBRi9ZQUYvQUdBQ2YzOEFZQU4vZjM4QUF3Z0hBQUVCQWdFQUF3VUVBUUVDQWdZT0FuOEJRWkNOQlF0L0FFR0FDQXNIY0FnR2JXVnRiM0o1QWdBT1NHRnphRjlIWlhSQ2RXWm1aWElBQUFsSVlYTm9YMGx1YVhRQUFRdElZWE5vWDFWd1pHRjBaUUFDQ2toaGMyaGZSbWx1WVd3QUJBMUlZWE5vWDBkbGRGTjBZWFJsQUFVT1NHRnphRjlEWVd4amRXeGhkR1VBQmdwVFZFRlVSVjlUU1ZwRkF3RUtxQndIQlFCQmdBb0wxd01BUVFCQ0FEY0RnSTBCUVFCQ0FEY0QrSXdCUVFCQ0FEY0Q4SXdCUVFCQ0FEY0Q2SXdCUVFCQ0FEY0Q0SXdCUVFCQ0FEY0QySXdCUVFCQ0FEY0QwSXdCUVFCQ0FEY0R5SXdCUVFCQ0FEY0R3SXdCUVFCQ0FEY0R1SXdCUVFCQ0FEY0RzSXdCUVFCQ0FEY0RxSXdCUVFCQ0FEY0RvSXdCUVFCQ0FEY0RtSXdCUVFCQ0FEY0RrSXdCUVFCQ0FEY0RpSXdCUVFCQ0FEY0RnSXdCUVFCQ0FEY0QrSXNCUVFCQ0FEY0Q4SXNCUVFCQ0FEY0Q2SXNCUVFCQ0FEY0Q0SXNCUVFCQ0FEY0QySXNCUVFCQ0FEY0QwSXNCUVFCQ0FEY0R5SXNCUVFCQ0FEY0R3SXNCUVFCQ0FEY0R1SXNCUVFCQ0FEY0RzSXNCUVFCQ0FEY0RxSXNCUVFCQ0FEY0RvSXNCUVFCQ0FEY0RtSXNCUVFCQ0FEY0RrSXNCUVFCQ0FEY0RpSXNCUVFCQ0FEY0RnSXNCUVFCQ0FEY0QrSW9CUVFCQ0FEY0Q4SW9CUVFCQ0FEY0Q2SW9CUVFCQ0FEY0Q0SW9CUVFCQ0FEY0QySW9CUVFCQ0FEY0QwSW9CUVFCQ0FEY0R5SW9CUVFCQ0FEY0R3SW9CUVFCQ0FEY0R1SW9CUVFCQ0FEY0RzSW9CUVFCQ0FEY0RxSW9CUVFCQ0FEY0RvSW9CUVFCQ0FEY0RtSW9CUVFCQ0FEY0RrSW9CUVFCQ0FEY0RpSW9CUVFCQ0FEY0RnSW9CUVFCQndBd2dBRUVCZEd0QkEzWTJBb3lOQVVFQVFRQTJBb2lOQVF1TUF3RUlmd0pBUVFBb0FvaU5BU0lCUVFCSURRQkJBQ0FCSUFCcVFRQW9Bb3lOQVNJQ2NEWUNpSTBCQWtBQ1FDQUJEUUJCZ0FvaEF3d0JDd0pBSUFJZ0FXc2lCQ0FBSUFRZ0FFa2JJZ05GRFFBZ0EwRURjU0VGUVFBaEJnSkFJQU5CQkVrTkFDQUJRWUNLQVdvaEJ5QURRWHh4SVFoQkFDRUdBMEFnQnlBR2FpSURRY2dCYWlBR1FZQUthaTBBQURvQUFDQURRY2tCYWlBR1FZRUthaTBBQURvQUFDQURRY29CYWlBR1FZSUthaTBBQURvQUFDQURRY3NCYWlBR1FZTUthaTBBQURvQUFDQUlJQVpCQkdvaUJrY05BQXNMSUFWRkRRQWdBVUhJaXdGcUlRTURRQ0FESUFacUlBWkJnQXBxTFFBQU9nQUFJQVpCQVdvaEJpQUZRWDlxSWdVTkFBc0xJQVFnQUVzTkFVSElpd0VnQWhBRElBQWdCR3NoQUNBRVFZQUthaUVEQ3dKQUlBQWdBa2tOQUFOQUlBTWdBaEFESUFNZ0Ftb2hBeUFBSUFKcklnQWdBazhOQUFzTElBQkZEUUJCQUNFQ1FjZ0JJUVlEUUNBR1FZQ0tBV29nQXlBR2FrRzRmbW90QUFBNkFBQWdCa0VCYWlFR0lBQWdBa0VCYWlJQ1FmOEJjVXNOQUFzTEMrUUxBUzErSUFBcEEwQWhBa0VBS1FQQWlnRWhBeUFBS1FNNElRUkJBQ2tEdUlvQklRVWdBQ2tETUNFR1FRQXBBN0NLQVNFSElBQXBBeWdoQ0VFQUtRT29pZ0VoQ1NBQUtRTWdJUXBCQUNrRG9Jb0JJUXNnQUNrREdDRU1RUUFwQTVpS0FTRU5JQUFwQXhBaERrRUFLUU9RaWdFaER5QUFLUU1JSVJCQkFDa0RpSW9CSVJFZ0FDa0RBQ0VTUVFBcEE0Q0tBU0VUUVFBcEE4aUtBU0VVQWtBQ1FDQUJRY2dBU3cwQVFRQXBBOUNLQVNFVlFRQXBBK0NLQVNFV1FRQXBBOWlLQVNFWERBRUxRUUFwQStDS0FTQUFLUU5naFNFV1FRQXBBOWlLQVNBQUtRTlloU0VYUVFBcEE5Q0tBU0FBS1FOUWhTRVZJQlFnQUNrRFNJVWhGQ0FCUWVrQVNRMEFRUUJCQUNrRDZJb0JJQUFwQTJpRk53UG9pZ0ZCQUVFQUtRUHdpZ0VnQUNrRGNJVTNBL0NLQVVFQVFRQXBBL2lLQVNBQUtRTjRoVGNEK0lvQlFRQkJBQ2tEZ0lzQklBQXBBNEFCaFRjRGdJc0JJQUZCaVFGSkRRQkJBRUVBS1FPSWl3RWdBQ2tEaUFHRk53T0lpd0VMSUFNZ0FvVWhHQ0FGSUFTRklSa2dCeUFHaFNFSElBa2dDSVVoQ0NBTElBcUZJUm9nRFNBTWhTRUpJQThnRG9VaENpQVJJQkNGSVFzZ0V5QVNoU0VNUVFBcEE3aUxBU0VTUVFBcEE1Q0xBU0VUUVFBcEEraUtBU0ViUVFBcEE2Q0xBU0VjUVFBcEEvaUtBU0VOUVFBcEE3Q0xBU0VkUVFBcEE0aUxBU0VPUVFBcEE4Q0xBU0VQUVFBcEE1aUxBU0VlUVFBcEEvQ0tBU0VRUVFBcEE2aUxBU0VSUVFBcEE0Q0xBU0VmUWNCK0lRQURRQ0FhSUFjZ0M0VWdGNFVnSDRVZ0VZVkNBWW1GSUJTRklCQ0ZJQjZGSUErRklRSWdEQ0FaSUFxRklCYUZJQTZGSUIyRlFnR0poU0FJaFNBVmhTQU5oU0FjaFNJRElBZUZJU0FnQ1NBSUlBeUZJQldGSUEyRklCeUZRZ0dKaFNBWWhTQWJoU0FUaFNBU2hTSUVJQStGSVNFZ0dDQUtJQlFnR29VZ0VJVWdIb1VnRDRWQ0FZbUZJQm1GSUJhRklBNkZJQjJGSWdXRlFqZUpJaUlnQ3lBWUlBbUZJQnVGSUJPRklCS0ZRZ0dKaFNBSGhTQVhoU0FmaFNBUmhTSUdJQXFGUWo2SklpTkNmNFdESUFNZ0VZVkNBb2tpSklVaER5QU5JQUtGUWltSklpVWdCQ0FRaFVJbmlTSW1RbitGZ3lBaWhTRVJJQklnQllWQ09Ja2lFaUFHSUE2RlFnK0pJaWRDZjRXRElBTWdGNFZDQ29raUtJVWhEaUFFSUJxRlFodUpJaWtnS0NBSUlBS0ZRaVNKSWlwQ2Y0V0RoU0VOSUFZZ0dZVkNCb2tpS3lBRElBdUZRZ0dKSWl4Q2Y0V0RJQndnQW9WQ0Vva2lMWVVoRUNBcklBUWdIb1ZDQ0lraUxpQWJJQVdGUWhtSklodENmNFdEaFNFWElBWWdIWVZDUFlraUdTQUVJQlNGUWhTSklnUWdDU0FGaFVJY2lTSUlRbitGZzRVaEZDQUlJQmxDZjRXRElBTWdINFZDTFlraUE0VWhHQ0FaSUFOQ2Y0V0RJQlVnQW9WQ0E0a2lDWVVoR1NBRUlBTWdDVUovaFlPRklRY2dDU0FFUW4rRmd5QUloU0VJSUF3Z0FvVWlBaUFoUWc2SklnTkNmNFdESUJNZ0JZVkNGWWtpQklVaENTQUdJQmFGUWl1SklnVWdBeUFFUW4rRmc0VWhDaUFFSUFWQ2Y0V0RJQ0JDTElraUJJVWhDeUFBUWRBSmFpa0RBQ0FGSUFSQ2Y0V0RoU0FDaFNFTUlDY2dLRUovaFlNZ0tvVWlCU0VmSUFNZ0JDQUNRbitGZzRVaUFpRWFJQ29nS1VKL2hZTWdFb1VpQXlFZUlDMGdMa0ovaFlNZ0c0VWlCQ0VXSUNZZ0pDQWxRbitGZzRVaUJpRWRJQnNnSzBKL2hZTWdMSVVpS0NFVklDTWdKaUFpUW4rRmc0VWlJaUVjSUM0Z0xDQXRRbitGZzRVaUppRWJJQ2NnS1NBU1FuK0ZnNFVpSnlFVElDTWdKRUovaFlNZ0pZVWlJeUVTSUFCQkNHb2lBQTBBQzBFQUlCRTNBNmlMQVVFQUlBVTNBNENMQVVFQUlCYzNBOWlLQVVFQUlBYzNBN0NLQVVFQUlBczNBNGlLQVVFQUlBODNBOENMQVVFQUlBTTNBNWlMQVVFQUlCQTNBL0NLQVVFQUlCUTNBOGlLQVVFQUlBSTNBNkNLQVVFQUlBWTNBN0NMQVVFQUlBNDNBNGlMQVVFQUlBUTNBK0NLQVVFQUlCazNBN2lLQVVFQUlBbzNBNUNLQVVFQUlDSTNBNkNMQVVFQUlBMDNBL2lLQVVFQUlDZzNBOUNLQVVFQUlBZzNBNmlLQVVFQUlBdzNBNENLQVVFQUlDTTNBN2lMQVVFQUlDYzNBNUNMQVVFQUlDWTNBK2lLQVVFQUlCZzNBOENLQVVFQUlBazNBNWlLQVF2NEFnRUZmMEhrQUVFQUtBS01qUUVpQVVFQmRtc2hBZ0pBUVFBb0FvaU5BU0lEUVFCSURRQWdBU0VFQWtBZ0FTQURSZzBBSUFOQnlJc0JhaUVGUVFBaEF3TkFJQVVnQTJwQkFEb0FBQ0FEUVFGcUlnTWdBVUVBS0FLSWpRRWlCR3RKRFFBTEN5QUVRY2lMQVdvaUF5QURMUUFBSUFCeU9nQUFJQUZCeDRzQmFpSURJQU10QUFCQmdBRnlPZ0FBUWNpTEFTQUJFQU5CQUVHQWdJQ0FlRFlDaUkwQkN3SkFJQUpCQkVrTkFDQUNRUUoySWdOQkEzRWhCVUVBSVFRQ1FDQURRWDlxUVFOSkRRQWdBMEg4Ly8vL0EzRWhBVUVBSVFOQkFDRUVBMEFnQTBHQUNtb2dBMEdBaWdGcUtBSUFOZ0lBSUFOQmhBcHFJQU5CaElvQmFpZ0NBRFlDQUNBRFFZZ0thaUFEUVlpS0FXb29BZ0EyQWdBZ0EwR01DbW9nQTBHTWlnRnFLQUlBTmdJQUlBTkJFR29oQXlBQklBUkJCR29pQkVjTkFBc0xJQVZGRFFBZ0JVRUNkQ0VCSUFSQkFuUWhBd05BSUFOQmdBcHFJQU5CZ0lvQmFpZ0NBRFlDQUNBRFFRUnFJUU1nQVVGOGFpSUJEUUFMQ3dzR0FFR0FpZ0VMMFFZQkEzOUJBRUlBTndPQWpRRkJBRUlBTndQNGpBRkJBRUlBTndQd2pBRkJBRUlBTndQb2pBRkJBRUlBTndQZ2pBRkJBRUlBTndQWWpBRkJBRUlBTndQUWpBRkJBRUlBTndQSWpBRkJBRUlBTndQQWpBRkJBRUlBTndPNGpBRkJBRUlBTndPd2pBRkJBRUlBTndPb2pBRkJBRUlBTndPZ2pBRkJBRUlBTndPWWpBRkJBRUlBTndPUWpBRkJBRUlBTndPSWpBRkJBRUlBTndPQWpBRkJBRUlBTndQNGl3RkJBRUlBTndQd2l3RkJBRUlBTndQb2l3RkJBRUlBTndQZ2l3RkJBRUlBTndQWWl3RkJBRUlBTndQUWl3RkJBRUlBTndQSWl3RkJBRUlBTndQQWl3RkJBRUlBTndPNGl3RkJBRUlBTndPd2l3RkJBRUlBTndPb2l3RkJBRUlBTndPZ2l3RkJBRUlBTndPWWl3RkJBRUlBTndPUWl3RkJBRUlBTndPSWl3RkJBRUlBTndPQWl3RkJBRUlBTndQNGlnRkJBRUlBTndQd2lnRkJBRUlBTndQb2lnRkJBRUlBTndQZ2lnRkJBRUlBTndQWWlnRkJBRUlBTndQUWlnRkJBRUlBTndQSWlnRkJBRUlBTndQQWlnRkJBRUlBTndPNGlnRkJBRUlBTndPd2lnRkJBRUlBTndPb2lnRkJBRUlBTndPZ2lnRkJBRUlBTndPWWlnRkJBRUlBTndPUWlnRkJBRUlBTndPSWlnRkJBRUlBTndPQWlnRkJBRUhBRENBQlFRRjBhMEVEZGpZQ2pJMEJRUUJCQURZQ2lJMEJJQUFRQWtIa0FFRUFLQUtNalFFaUFFRUJkbXNoQXdKQVFRQW9Bb2lOQVNJQlFRQklEUUFnQUNFRUFrQWdBQ0FCUmcwQUlBRkJ5SXNCYWlFRlFRQWhBUU5BSUFVZ0FXcEJBRG9BQUNBQlFRRnFJZ0VnQUVFQUtBS0lqUUVpQkd0SkRRQUxDeUFFUWNpTEFXb2lBU0FCTFFBQUlBSnlPZ0FBSUFCQng0c0JhaUlCSUFFdEFBQkJnQUZ5T2dBQVFjaUxBU0FBRUFOQkFFR0FnSUNBZURZQ2lJMEJDd0pBSUFOQkJFa05BQ0FEUVFKMklnRkJBM0VoQlVFQUlRUUNRQ0FCUVg5cVFRTkpEUUFnQVVIOC8vLy9BM0VoQUVFQUlRRkJBQ0VFQTBBZ0FVR0FDbW9nQVVHQWlnRnFLQUlBTmdJQUlBRkJoQXBxSUFGQmhJb0JhaWdDQURZQ0FDQUJRWWdLYWlBQlFZaUtBV29vQWdBMkFnQWdBVUdNQ21vZ0FVR01pZ0ZxS0FJQU5nSUFJQUZCRUdvaEFTQUFJQVJCQkdvaUJFY05BQXNMSUFWRkRRQWdCVUVDZENFQUlBUkJBblFoQVFOQUlBRkJnQXBxSUFGQmdJb0JhaWdDQURZQ0FDQUJRUVJxSVFFZ0FFRjhhaUlBRFFBTEN3c0wyQUVCQUVHQUNBdlFBWkFCQUFBQUFBQUFBQUFBQUFBQUFBQUJBQUFBQUFBQUFJS0FBQUFBQUFBQWlvQUFBQUFBQUlBQWdBQ0FBQUFBZ0l1QUFBQUFBQUFBQVFBQWdBQUFBQUNCZ0FDQUFBQUFnQW1BQUFBQUFBQ0FpZ0FBQUFBQUFBQ0lBQUFBQUFBQUFBbUFBSUFBQUFBQUNnQUFnQUFBQUFDTGdBQ0FBQUFBQUlzQUFBQUFBQUNBaVlBQUFBQUFBSUFEZ0FBQUFBQUFnQUtBQUFBQUFBQ0FnQUFBQUFBQUFJQUtnQUFBQUFBQUFBb0FBSUFBQUFDQWdZQUFnQUFBQUlDQWdBQUFBQUFBZ0FFQUFJQUFBQUFBQ0lBQWdBQUFBSUE9XCI7XG4gICAgdmFyIGhhc2gkYiA9IFwiZjJmNmY1YjJcIjtcbiAgICB2YXIgd2FzbUpzb24kYiA9IHtcbiAgICBcdG5hbWU6IG5hbWUkYixcbiAgICBcdGRhdGE6IGRhdGEkYixcbiAgICBcdGhhc2g6IGhhc2gkYlxuICAgIH07XG5cbiAgICBjb25zdCBtdXRleCRjID0gbmV3IE11dGV4KCk7XG4gICAgbGV0IHdhc21DYWNoZSRjID0gbnVsbDtcbiAgICBmdW5jdGlvbiB2YWxpZGF0ZUJpdHMkMShiaXRzKSB7XG4gICAgICAgIGlmICghWzIyNCwgMjU2LCAzODQsIDUxMl0uaW5jbHVkZXMoYml0cykpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ0ludmFsaWQgdmFyaWFudCEgVmFsaWQgdmFsdWVzOiAyMjQsIDI1NiwgMzg0LCA1MTInKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlcyBTSEEtMyBoYXNoXG4gICAgICogQHBhcmFtIGRhdGEgSW5wdXQgZGF0YSAoc3RyaW5nLCBCdWZmZXIgb3IgVHlwZWRBcnJheSlcbiAgICAgKiBAcGFyYW0gYml0cyBOdW1iZXIgb2Ygb3V0cHV0IGJpdHMuIFZhbGlkIHZhbHVlczogMjI0LCAyNTYsIDM4NCwgNTEyXG4gICAgICogQHJldHVybnMgQ29tcHV0ZWQgaGFzaCBhcyBhIGhleGFkZWNpbWFsIHN0cmluZ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNoYTMoZGF0YSwgYml0cyA9IDUxMikge1xuICAgICAgICBpZiAodmFsaWRhdGVCaXRzJDEoYml0cykpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCh2YWxpZGF0ZUJpdHMkMShiaXRzKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaGFzaExlbmd0aCA9IGJpdHMgLyA4O1xuICAgICAgICBpZiAod2FzbUNhY2hlJGMgPT09IG51bGwgfHwgd2FzbUNhY2hlJGMuaGFzaExlbmd0aCAhPT0gaGFzaExlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2tlZENyZWF0ZShtdXRleCRjLCB3YXNtSnNvbiRiLCBoYXNoTGVuZ3RoKVxuICAgICAgICAgICAgICAgIC50aGVuKCh3YXNtKSA9PiB7XG4gICAgICAgICAgICAgICAgd2FzbUNhY2hlJGMgPSB3YXNtO1xuICAgICAgICAgICAgICAgIHJldHVybiB3YXNtQ2FjaGUkYy5jYWxjdWxhdGUoZGF0YSwgYml0cywgMHgwNik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgaGFzaCA9IHdhc21DYWNoZSRjLmNhbGN1bGF0ZShkYXRhLCBiaXRzLCAweDA2KTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoaGFzaCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBTSEEtMyBoYXNoIGluc3RhbmNlXG4gICAgICogQHBhcmFtIGJpdHMgTnVtYmVyIG9mIG91dHB1dCBiaXRzLiBWYWxpZCB2YWx1ZXM6IDIyNCwgMjU2LCAzODQsIDUxMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVNIQTMoYml0cyA9IDUxMikge1xuICAgICAgICBpZiAodmFsaWRhdGVCaXRzJDEoYml0cykpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCh2YWxpZGF0ZUJpdHMkMShiaXRzKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb3V0cHV0U2l6ZSA9IGJpdHMgLyA4O1xuICAgICAgICByZXR1cm4gV0FTTUludGVyZmFjZSh3YXNtSnNvbiRiLCBvdXRwdXRTaXplKS50aGVuKCh3YXNtKSA9PiB7XG4gICAgICAgICAgICB3YXNtLmluaXQoYml0cyk7XG4gICAgICAgICAgICBjb25zdCBvYmogPSB7XG4gICAgICAgICAgICAgICAgaW5pdDogKCkgPT4geyB3YXNtLmluaXQoYml0cyk7IHJldHVybiBvYmo7IH0sXG4gICAgICAgICAgICAgICAgdXBkYXRlOiAoZGF0YSkgPT4geyB3YXNtLnVwZGF0ZShkYXRhKTsgcmV0dXJuIG9iajsgfSxcbiAgICAgICAgICAgICAgICBkaWdlc3Q6IChvdXRwdXRUeXBlKSA9PiB3YXNtLmRpZ2VzdChvdXRwdXRUeXBlLCAweDA2KSxcbiAgICAgICAgICAgICAgICBzYXZlOiAoKSA9PiB3YXNtLnNhdmUoKSxcbiAgICAgICAgICAgICAgICBsb2FkOiAoZGF0YSkgPT4geyB3YXNtLmxvYWQoZGF0YSk7IHJldHVybiBvYmo7IH0sXG4gICAgICAgICAgICAgICAgYmxvY2tTaXplOiAyMDAgLSAyICogb3V0cHV0U2l6ZSxcbiAgICAgICAgICAgICAgICBkaWdlc3RTaXplOiBvdXRwdXRTaXplLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IG11dGV4JGIgPSBuZXcgTXV0ZXgoKTtcbiAgICBsZXQgd2FzbUNhY2hlJGIgPSBudWxsO1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlQml0cyhiaXRzKSB7XG4gICAgICAgIGlmICghWzIyNCwgMjU2LCAzODQsIDUxMl0uaW5jbHVkZXMoYml0cykpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ0ludmFsaWQgdmFyaWFudCEgVmFsaWQgdmFsdWVzOiAyMjQsIDI1NiwgMzg0LCA1MTInKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlcyBLZWNjYWsgaGFzaFxuICAgICAqIEBwYXJhbSBkYXRhIElucHV0IGRhdGEgKHN0cmluZywgQnVmZmVyIG9yIFR5cGVkQXJyYXkpXG4gICAgICogQHBhcmFtIGJpdHMgTnVtYmVyIG9mIG91dHB1dCBiaXRzLiBWYWxpZCB2YWx1ZXM6IDIyNCwgMjU2LCAzODQsIDUxMlxuICAgICAqIEByZXR1cm5zIENvbXB1dGVkIGhhc2ggYXMgYSBoZXhhZGVjaW1hbCBzdHJpbmdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBrZWNjYWsoZGF0YSwgYml0cyA9IDUxMikge1xuICAgICAgICBpZiAodmFsaWRhdGVCaXRzKGJpdHMpKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QodmFsaWRhdGVCaXRzKGJpdHMpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBoYXNoTGVuZ3RoID0gYml0cyAvIDg7XG4gICAgICAgIGlmICh3YXNtQ2FjaGUkYiA9PT0gbnVsbCB8fCB3YXNtQ2FjaGUkYi5oYXNoTGVuZ3RoICE9PSBoYXNoTGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9ja2VkQ3JlYXRlKG11dGV4JGIsIHdhc21Kc29uJGIsIGhhc2hMZW5ndGgpXG4gICAgICAgICAgICAgICAgLnRoZW4oKHdhc20pID0+IHtcbiAgICAgICAgICAgICAgICB3YXNtQ2FjaGUkYiA9IHdhc207XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdhc21DYWNoZSRiLmNhbGN1bGF0ZShkYXRhLCBiaXRzLCAweDAxKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBoYXNoID0gd2FzbUNhY2hlJGIuY2FsY3VsYXRlKGRhdGEsIGJpdHMsIDB4MDEpO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShoYXNoKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IEtlY2NhayBoYXNoIGluc3RhbmNlXG4gICAgICogQHBhcmFtIGJpdHMgTnVtYmVyIG9mIG91dHB1dCBiaXRzLiBWYWxpZCB2YWx1ZXM6IDIyNCwgMjU2LCAzODQsIDUxMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUtlY2NhayhiaXRzID0gNTEyKSB7XG4gICAgICAgIGlmICh2YWxpZGF0ZUJpdHMoYml0cykpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCh2YWxpZGF0ZUJpdHMoYml0cykpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG91dHB1dFNpemUgPSBiaXRzIC8gODtcbiAgICAgICAgcmV0dXJuIFdBU01JbnRlcmZhY2Uod2FzbUpzb24kYiwgb3V0cHV0U2l6ZSkudGhlbigod2FzbSkgPT4ge1xuICAgICAgICAgICAgd2FzbS5pbml0KGJpdHMpO1xuICAgICAgICAgICAgY29uc3Qgb2JqID0ge1xuICAgICAgICAgICAgICAgIGluaXQ6ICgpID0+IHsgd2FzbS5pbml0KGJpdHMpOyByZXR1cm4gb2JqOyB9LFxuICAgICAgICAgICAgICAgIHVwZGF0ZTogKGRhdGEpID0+IHsgd2FzbS51cGRhdGUoZGF0YSk7IHJldHVybiBvYmo7IH0sXG4gICAgICAgICAgICAgICAgZGlnZXN0OiAob3V0cHV0VHlwZSkgPT4gd2FzbS5kaWdlc3Qob3V0cHV0VHlwZSwgMHgwMSksXG4gICAgICAgICAgICAgICAgc2F2ZTogKCkgPT4gd2FzbS5zYXZlKCksXG4gICAgICAgICAgICAgICAgbG9hZDogKGRhdGEpID0+IHsgd2FzbS5sb2FkKGRhdGEpOyByZXR1cm4gb2JqOyB9LFxuICAgICAgICAgICAgICAgIGJsb2NrU2l6ZTogMjAwIC0gMiAqIG91dHB1dFNpemUsXG4gICAgICAgICAgICAgICAgZGlnZXN0U2l6ZTogb3V0cHV0U2l6ZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgbmFtZSRhID0gXCJzaGEyNTZcIjtcbiAgICB2YXIgZGF0YSRhID0gXCJBR0Z6YlFFQUFBQUJFUVJnQUFGL1lBRi9BR0FBQUdBQ2YzOEFBd2dIQUFFQkFRSUFBd1VFQVFFQ0FnWU9BbjhCUWZDSkJRdC9BRUdBQ0FzSGNBZ0diV1Z0YjNKNUFnQU9TR0Z6YUY5SFpYUkNkV1ptWlhJQUFBbElZWE5vWDBsdWFYUUFBUXRJWVhOb1gxVndaR0YwWlFBQ0NraGhjMmhmUm1sdVlXd0FCQTFJWVhOb1gwZGxkRk4wWVhSbEFBVU9TR0Z6YUY5RFlXeGpkV3hoZEdVQUJncFRWRUZVUlY5VFNWcEZBd0VLb0VvSEJRQkJnQWtMblFFQVFRQkNBRGNEd0lrQlFRQkJIRUVnSUFCQjRBRkdJZ0FiTmdMb2lRRkJBRUtubithbnh2U1QvYjUvUXF1emoveVJvN1B3MndBZ0FCczNBK0NKQVVFQVFyR1dnUDZmb29XczZBQkMvNlM1aU1XUjJvS2JmeUFBR3pjRDJJa0JRUUJDbDdyRGc1T25sb2QzUXZMbXUrT2pwLzJucFg4Z0FCczNBOUNKQVVFQVF0aTlsb2o4b0xXK05rTG56S2ZRMXREcnM3dC9JQUFiTndQSWlRRUw3d0lDQVg0R2YwRUFRUUFwQThDSkFTSUJJQUN0ZkRjRHdJa0JBa0FDUUFKQUlBR25RVDl4SWdJTkFFR0FDU0VEREFFTEFrQkJ3QUFnQW1zaUJDQUFJQVFnQUVrYklnTkZEUUFnQTBFRGNTRUZJQUpCZ0lrQmFpRUdRUUFoQWdKQUlBTkJCRWtOQUNBRFFmd0FjU0VIUVFBaEFnTkFJQVlnQW1vaUF5QUNRWUFKYWkwQUFEb0FBQ0FEUVFGcUlBSkJnUWxxTFFBQU9nQUFJQU5CQW1vZ0FrR0NDV290QUFBNkFBQWdBMEVEYWlBQ1FZTUphaTBBQURvQUFDQUhJQUpCQkdvaUFrY05BQXNMSUFWRkRRQURRQ0FHSUFKcUlBSkJnQWxxTFFBQU9nQUFJQUpCQVdvaEFpQUZRWDlxSWdVTkFBc0xJQVFnQUVzTkFVR0FpUUVRQXlBQUlBUnJJUUFnQkVHQUNXb2hBd3NDUUNBQVFjQUFTUTBBQTBBZ0F4QURJQU5Cd0FCcUlRTWdBRUZBYWlJQVFUOUxEUUFMQ3lBQVJRMEFRUUFoQWtFQUlRVURRQ0FDUVlDSkFXb2dBeUFDYWkwQUFEb0FBQ0FDUVFGcUlRSWdBQ0FGUVFGcUlnVkIvd0Z4U3cwQUN3c0xvejRCUlg5QkFDQUFLQUk4SWdGQkdIUWdBVUdBL2dOeFFRaDBjaUFCUVFoMlFZRCtBM0VnQVVFWWRuSnlJZ0ZCR1hjZ0FVRU9kM01nQVVFRGRuTWdBQ2dDT0NJQ1FSaDBJQUpCZ1A0RGNVRUlkSElnQWtFSWRrR0EvZ054SUFKQkdIWnljaUlDYWlBQUtBSWdJZ05CR0hRZ0EwR0EvZ054UVFoMGNpQURRUWgyUVlEK0EzRWdBMEVZZG5KeUlnUkJHWGNnQkVFT2QzTWdCRUVEZG5NZ0FDZ0NIQ0lEUVJoMElBTkJnUDREY1VFSWRISWdBMEVJZGtHQS9nTnhJQU5CR0haeWNpSUZhaUFBS0FJRUlnTkJHSFFnQTBHQS9nTnhRUWgwY2lBRFFRaDJRWUQrQTNFZ0EwRVlkbkp5SWdaQkdYY2dCa0VPZDNNZ0JrRURkbk1nQUNnQ0FDSURRUmgwSUFOQmdQNERjVUVJZEhJZ0EwRUlka0dBL2dOeElBTkJHSFp5Y2lJSGFpQUFLQUlrSWdOQkdIUWdBMEdBL2dOeFFRaDBjaUFEUVFoMlFZRCtBM0VnQTBFWWRuSnlJZ2hxSUFKQkQzY2dBa0VOZDNNZ0FrRUtkbk5xSWdOcUlBQW9BaGdpQ1VFWWRDQUpRWUQrQTNGQkNIUnlJQWxCQ0haQmdQNERjU0FKUVJoMmNuSWlDa0VaZHlBS1FRNTNjeUFLUVFOMmN5QUFLQUlVSWdsQkdIUWdDVUdBL2dOeFFRaDBjaUFKUVFoMlFZRCtBM0VnQ1VFWWRuSnlJZ3RxSUFKcUlBQW9BaEFpQ1VFWWRDQUpRWUQrQTNGQkNIUnlJQWxCQ0haQmdQNERjU0FKUVJoMmNuSWlERUVaZHlBTVFRNTNjeUFNUVFOMmN5QUFLQUlNSWdsQkdIUWdDVUdBL2dOeFFRaDBjaUFKUVFoMlFZRCtBM0VnQ1VFWWRuSnlJZzFxSUFBb0FqQWlDVUVZZENBSlFZRCtBM0ZCQ0hSeUlBbEJDSFpCZ1A0RGNTQUpRUmgyY25JaURtb2dBQ2dDQ0NJSlFSaDBJQWxCZ1A0RGNVRUlkSElnQ1VFSWRrR0EvZ054SUFsQkdIWnljaUlQUVJsM0lBOUJEbmR6SUE5QkEzWnpJQVpxSUFBb0FpZ2lDVUVZZENBSlFZRCtBM0ZCQ0hSeUlBbEJDSFpCZ1A0RGNTQUpRUmgyY25JaUVHb2dBVUVQZHlBQlFRMTNjeUFCUVFwMmMyb2lDVUVQZHlBSlFRMTNjeUFKUVFwMmMyb2lFVUVQZHlBUlFRMTNjeUFSUVFwMmMyb2lFa0VQZHlBU1FRMTNjeUFTUVFwMmMyb2lFMm9nQUNnQ05DSVVRUmgwSUJSQmdQNERjVUVJZEhJZ0ZFRUlka0dBL2dOeElCUkJHSFp5Y2lJVlFSbDNJQlZCRG5keklCVkJBM1p6SUE1cUlCSnFJQUFvQWl3aUFFRVlkQ0FBUVlEK0EzRkJDSFJ5SUFCQkNIWkJnUDREY1NBQVFSaDJjbklpRmtFWmR5QVdRUTUzY3lBV1FRTjJjeUFRYWlBUmFpQUlRUmwzSUFoQkRuZHpJQWhCQTNaeklBUnFJQWxxSUFWQkdYY2dCVUVPZDNNZ0JVRURkbk1nQ21vZ0FXb2dDMEVaZHlBTFFRNTNjeUFMUVFOMmN5QU1haUFWYWlBTlFSbDNJQTFCRG5keklBMUJBM1p6SUE5cUlCWnFJQU5CRDNjZ0EwRU5kM01nQTBFS2RuTnFJaFJCRDNjZ0ZFRU5kM01nRkVFS2RuTnFJaGRCRDNjZ0YwRU5kM01nRjBFS2RuTnFJaGhCRDNjZ0dFRU5kM01nR0VFS2RuTnFJaGxCRDNjZ0dVRU5kM01nR1VFS2RuTnFJaHBCRDNjZ0drRU5kM01nR2tFS2RuTnFJaHRCRDNjZ0cwRU5kM01nRzBFS2RuTnFJaHhCR1hjZ0hFRU9kM01nSEVFRGRuTWdBa0VaZHlBQ1FRNTNjeUFDUVFOMmN5QVZhaUFZYWlBT1FSbDNJQTVCRG5keklBNUJBM1p6SUJacUlCZHFJQkJCR1hjZ0VFRU9kM01nRUVFRGRuTWdDR29nRkdvZ0UwRVBkeUFUUVExM2N5QVRRUXAyYzJvaUhVRVBkeUFkUVExM2N5QWRRUXAyYzJvaUhrRVBkeUFlUVExM2N5QWVRUXAyYzJvaUgyb2dFMEVaZHlBVFFRNTNjeUFUUVFOMmN5QVlhaUFEUVJsM0lBTkJEbmR6SUFOQkEzWnpJQUZxSUJscUlCOUJEM2NnSDBFTmQzTWdIMEVLZG5OcUlpQnFJQkpCR1hjZ0VrRU9kM01nRWtFRGRuTWdGMm9nSDJvZ0VVRVpkeUFSUVE1M2N5QVJRUU4yY3lBVWFpQWVhaUFKUVJsM0lBbEJEbmR6SUFsQkEzWnpJQU5xSUIxcUlCeEJEM2NnSEVFTmQzTWdIRUVLZG5OcUlpRkJEM2NnSVVFTmQzTWdJVUVLZG5OcUlpSkJEM2NnSWtFTmQzTWdJa0VLZG5OcUlpTkJEM2NnSTBFTmQzTWdJMEVLZG5OcUlpUnFJQnRCR1hjZ0cwRU9kM01nRzBFRGRuTWdIbW9nSTJvZ0drRVpkeUFhUVE1M2N5QWFRUU4yY3lBZGFpQWlhaUFaUVJsM0lCbEJEbmR6SUJsQkEzWnpJQk5xSUNGcUlCaEJHWGNnR0VFT2QzTWdHRUVEZG5NZ0Vtb2dIR29nRjBFWmR5QVhRUTUzY3lBWFFRTjJjeUFSYWlBYmFpQVVRUmwzSUJSQkRuZHpJQlJCQTNaeklBbHFJQnBxSUNCQkQzY2dJRUVOZDNNZ0lFRUtkbk5xSWlWQkQzY2dKVUVOZDNNZ0pVRUtkbk5xSWlaQkQzY2dKa0VOZDNNZ0prRUtkbk5xSWlkQkQzY2dKMEVOZDNNZ0owRUtkbk5xSWloQkQzY2dLRUVOZDNNZ0tFRUtkbk5xSWlsQkQzY2dLVUVOZDNNZ0tVRUtkbk5xSWlwQkQzY2dLa0VOZDNNZ0trRUtkbk5xSWl0QkdYY2dLMEVPZDNNZ0swRURkbk1nSDBFWmR5QWZRUTUzY3lBZlFRTjJjeUFiYWlBbmFpQWVRUmwzSUI1QkRuZHpJQjVCQTNaeklCcHFJQ1pxSUIxQkdYY2dIVUVPZDNNZ0hVRURkbk1nR1dvZ0pXb2dKRUVQZHlBa1FRMTNjeUFrUVFwMmMyb2lMRUVQZHlBc1FRMTNjeUFzUVFwMmMyb2lMVUVQZHlBdFFRMTNjeUF0UVFwMmMyb2lMbW9nSkVFWmR5QWtRUTUzY3lBa1FRTjJjeUFuYWlBZ1FSbDNJQ0JCRG5keklDQkJBM1p6SUJ4cUlDaHFJQzVCRDNjZ0xrRU5kM01nTGtFS2RuTnFJaTlxSUNOQkdYY2dJMEVPZDNNZ0kwRURkbk1nSm1vZ0xtb2dJa0VaZHlBaVFRNTNjeUFpUVFOMmN5QWxhaUF0YWlBaFFSbDNJQ0ZCRG5keklDRkJBM1p6SUNCcUlDeHFJQ3RCRDNjZ0swRU5kM01nSzBFS2RuTnFJakJCRDNjZ01FRU5kM01nTUVFS2RuTnFJakZCRDNjZ01VRU5kM01nTVVFS2RuTnFJakpCRDNjZ01rRU5kM01nTWtFS2RuTnFJak5xSUNwQkdYY2dLa0VPZDNNZ0trRURkbk1nTFdvZ01tb2dLVUVaZHlBcFFRNTNjeUFwUVFOMmN5QXNhaUF4YWlBb1FSbDNJQ2hCRG5keklDaEJBM1p6SUNScUlEQnFJQ2RCR1hjZ0owRU9kM01nSjBFRGRuTWdJMm9nSzJvZ0prRVpkeUFtUVE1M2N5QW1RUU4yY3lBaWFpQXFhaUFsUVJsM0lDVkJEbmR6SUNWQkEzWnpJQ0ZxSUNscUlDOUJEM2NnTDBFTmQzTWdMMEVLZG5OcUlqUkJEM2NnTkVFTmQzTWdORUVLZG5OcUlqVkJEM2NnTlVFTmQzTWdOVUVLZG5OcUlqWkJEM2NnTmtFTmQzTWdOa0VLZG5OcUlqZEJEM2NnTjBFTmQzTWdOMEVLZG5OcUlqaEJEM2NnT0VFTmQzTWdPRUVLZG5OcUlqbEJEM2NnT1VFTmQzTWdPVUVLZG5OcUlqb2dPQ0EwSUM0Z0xDQWhJQnNnR1NBRElBNGdCRUVBS0FMWWlRRWlPMEVhZHlBN1FSVjNjeUE3UVFkM2MwRUFLQUxraVFFaVBHcEJBQ2dDNElrQklqMUJBQ2dDM0lrQklqNXpJRHR4SUQxemFpQUhha0dZMzZpVUJHb2lCMEVBS0FMVWlRRWlQMm9pQUNBTWFpQTdJQTFxSUQ0Z0Qyb2dQU0FHYWlBQUlENGdPM054SUQ1emFpQUFRUnAzSUFCQkZYZHpJQUJCQjNkemFrR1JpZDJKQjJvaVFFRUFLQUxRaVFFaVFXb2lEQ0FBSUR0emNTQTdjMm9nREVFYWR5QU1RUlYzY3lBTVFRZDNjMnBCei9lRHJudHFJa0pCQUNnQ3pJa0JJa05xSWcwZ0RDQUFjM0VnQUhOcUlBMUJHbmNnRFVFVmQzTWdEVUVIZDNOcVFhVzMxODErYWlKRVFRQW9Bc2lKQVNJQWFpSVBJQTBnREhOeElBeHphaUFQUVJwM0lBOUJGWGR6SUE5QkIzZHpha0hiaE52S0Eyb2lSU0JCSUVNZ0FITnhJRU1nQUhGeklBQkJIbmNnQUVFVGQzTWdBRUVLZDNOcUlBZHFJZ1pxSWdkcUlBVWdEMm9nQ2lBTmFpQUxJQXhxSUFjZ0R5QU5jM0VnRFhOcUlBZEJHbmNnQjBFVmQzTWdCMEVIZDNOcVFmR2p4TThGYWlJS0lBWWdBSE1nUTNFZ0JpQUFjWE1nQmtFZWR5QUdRUk4zY3lBR1FRcDNjMm9nUUdvaURHb2lCQ0FISUE5emNTQVBjMm9nQkVFYWR5QUVRUlYzY3lBRVFRZDNjMnBCcElYK2tYbHFJZ3NnRENBR2N5QUFjU0FNSUFaeGN5QU1RUjUzSUF4QkUzZHpJQXhCQ25kemFpQkNhaUlOYWlJUElBUWdCM054SUFkemFpQVBRUnAzSUE5QkZYZHpJQTlCQjNkemFrSFZ2ZkhZZW1vaVFDQU5JQXh6SUFaeElBMGdESEZ6SUExQkhuY2dEVUVUZDNNZ0RVRUtkM05xSUVScUlnWnFJZ2NnRHlBRWMzRWdCSE5xSUFkQkduY2dCMEVWZDNNZ0IwRUhkM05xUVpqVm5zQjlhaUpDSUFZZ0RYTWdESEVnQmlBTmNYTWdCa0VlZHlBR1FSTjNjeUFHUVFwM2Myb2dSV29pREdvaUJXb2dGaUFIYWlBUUlBOXFJQWdnQkdvZ0JTQUhJQTl6Y1NBUGMyb2dCVUVhZHlBRlFSVjNjeUFGUVFkM2MycEJnYmFObEFGcUlnZ2dEQ0FHY3lBTmNTQU1JQVp4Y3lBTVFSNTNJQXhCRTNkeklBeEJDbmR6YWlBS2FpSU5haUlQSUFVZ0IzTnhJQWR6YWlBUFFScDNJQTlCRlhkeklBOUJCM2R6YWtHK2k4YWhBbW9pRGlBTklBeHpJQVp4SUEwZ0RIRnpJQTFCSG5jZ0RVRVRkM01nRFVFS2QzTnFJQXRxSWdacUlnY2dEeUFGYzNFZ0JYTnFJQWRCR25jZ0IwRVZkM01nQjBFSGQzTnFRY1A3c2FnRmFpSVFJQVlnRFhNZ0RIRWdCaUFOY1hNZ0JrRWVkeUFHUVJOM2N5QUdRUXAzYzJvZ1FHb2lER29pQkNBSElBOXpjU0FQYzJvZ0JFRWFkeUFFUVJWM2N5QUVRUWQzYzJwQjlMcjVsUWRxSWhZZ0RDQUdjeUFOY1NBTUlBWnhjeUFNUVI1M0lBeEJFM2R6SUF4QkNuZHphaUJDYWlJTmFpSUZhaUFCSUFScUlBSWdCMm9nRlNBUGFpQUZJQVFnQjNOeElBZHphaUFGUVJwM0lBVkJGWGR6SUFWQkIzZHpha0grNC9xR2VHb2lCeUFOSUF4eklBWnhJQTBnREhGeklBMUJIbmNnRFVFVGQzTWdEVUVLZDNOcUlBaHFJZ0ZxSWdZZ0JTQUVjM0VnQkhOcUlBWkJHbmNnQmtFVmQzTWdCa0VIZDNOcVFhZU44TjU1YWlJRUlBRWdEWE1nREhFZ0FTQU5jWE1nQVVFZWR5QUJRUk4zY3lBQlFRcDNjMm9nRG1vaUFtb2lEQ0FHSUFWemNTQUZjMm9nREVFYWR5QU1RUlYzY3lBTVFRZDNjMnBCOU9MdmpIeHFJZ1VnQWlBQmN5QU5jU0FDSUFGeGN5QUNRUjUzSUFKQkUzZHpJQUpCQ25kemFpQVFhaUlEYWlJTklBd2dCbk54SUFaemFpQU5RUnAzSUExQkZYZHpJQTFCQjNkemFrSEIwKzJrZm1vaUNDQURJQUp6SUFGeElBTWdBbkZ6SUFOQkhuY2dBMEVUZDNNZ0EwRUtkM05xSUJacUlnRnFJZzhnRjJvZ0VTQU5haUFVSUF4cUlBa2dCbW9nRHlBTklBeHpjU0FNYzJvZ0QwRWFkeUFQUVJWM2N5QVBRUWQzYzJwQmhvLzUvWDVxSWdZZ0FTQURjeUFDY1NBQklBTnhjeUFCUVI1M0lBRkJFM2R6SUFGQkNuZHphaUFIYWlJQ2FpSUpJQThnRFhOeElBMXphaUFKUVJwM0lBbEJGWGR6SUFsQkIzZHpha0hHdTRiK0FHb2lEQ0FDSUFGeklBTnhJQUlnQVhGeklBSkJIbmNnQWtFVGQzTWdBa0VLZDNOcUlBUnFJZ05xSWhFZ0NTQVBjM0VnRDNOcUlCRkJHbmNnRVVFVmQzTWdFVUVIZDNOcVFjekRzcUFDYWlJTklBTWdBbk1nQVhFZ0F5QUNjWE1nQTBFZWR5QURRUk4zY3lBRFFRcDNjMm9nQldvaUFXb2lGQ0FSSUFsemNTQUpjMm9nRkVFYWR5QVVRUlYzY3lBVVFRZDNjMnBCNzlpazd3SnFJZzhnQVNBRGN5QUNjU0FCSUFOeGN5QUJRUjUzSUFGQkUzZHpJQUZCQ25kemFpQUlhaUlDYWlJWGFpQVRJQlJxSUJnZ0VXb2dFaUFKYWlBWElCUWdFWE54SUJGemFpQVhRUnAzSUJkQkZYZHpJQmRCQjNkemFrR3FpZExUQkdvaUdDQUNJQUZ6SUFOeElBSWdBWEZ6SUFKQkhuY2dBa0VUZDNNZ0FrRUtkM05xSUFacUlnTnFJZ2tnRnlBVWMzRWdGSE5xSUFsQkduY2dDVUVWZDNNZ0NVRUhkM05xUWR6VHd1VUZhaUlVSUFNZ0FuTWdBWEVnQXlBQ2NYTWdBMEVlZHlBRFFSTjNjeUFEUVFwM2Myb2dER29pQVdvaUVTQUpJQmR6Y1NBWGMyb2dFVUVhZHlBUlFSVjNjeUFSUVFkM2MycEIycEhtdHdkcUloY2dBU0FEY3lBQ2NTQUJJQU54Y3lBQlFSNTNJQUZCRTNkeklBRkJDbmR6YWlBTmFpSUNhaUlTSUJFZ0NYTnhJQWx6YWlBU1FScDNJQkpCRlhkeklCSkJCM2R6YWtIU292bkJlV29pR1NBQ0lBRnpJQU54SUFJZ0FYRnpJQUpCSG5jZ0FrRVRkM01nQWtFS2QzTnFJQTlxSWdOcUloTnFJQjRnRW1vZ0dpQVJhaUFkSUFscUlCTWdFaUFSYzNFZ0VYTnFJQk5CR25jZ0UwRVZkM01nRTBFSGQzTnFRZTJNeDhGNmFpSWFJQU1nQW5NZ0FYRWdBeUFDY1hNZ0EwRWVkeUFEUVJOM2N5QURRUXAzYzJvZ0dHb2lBV29pQ1NBVElCSnpjU0FTYzJvZ0NVRWFkeUFKUVJWM2N5QUpRUWQzYzJwQnlNK01nSHRxSWhnZ0FTQURjeUFDY1NBQklBTnhjeUFCUVI1M0lBRkJFM2R6SUFGQkNuZHphaUFVYWlJQ2FpSVJJQWtnRTNOeElCTnphaUFSUVJwM0lCRkJGWGR6SUJGQkIzZHpha0hILytYNmUyb2lGQ0FDSUFGeklBTnhJQUlnQVhGeklBSkJIbmNnQWtFVGQzTWdBa0VLZDNOcUlCZHFJZ05xSWhJZ0VTQUpjM0VnQ1hOcUlCSkJHbmNnRWtFVmQzTWdFa0VIZDNOcVFmT1hnTGQ4YWlJWElBTWdBbk1nQVhFZ0F5QUNjWE1nQTBFZWR5QURRUk4zY3lBRFFRcDNjMm9nR1dvaUFXb2lFMm9nSUNBU2FpQWNJQkZxSUI4Z0NXb2dFeUFTSUJGemNTQVJjMm9nRTBFYWR5QVRRUlYzY3lBVFFRZDNjMnBCeDZLZXJYMXFJaGtnQVNBRGN5QUNjU0FCSUFOeGN5QUJRUjUzSUFGQkUzZHpJQUZCQ25kemFpQWFhaUlDYWlJSklCTWdFbk54SUJKemFpQUpRUnAzSUFsQkZYZHpJQWxCQjNkemFrSFJ4cWsyYWlJYUlBSWdBWE1nQTNFZ0FpQUJjWE1nQWtFZWR5QUNRUk4zY3lBQ1FRcDNjMm9nR0dvaUEyb2lFU0FKSUJOemNTQVRjMm9nRVVFYWR5QVJRUlYzY3lBUlFRZDNjMnBCNTlLa29RRnFJaGdnQXlBQ2N5QUJjU0FESUFKeGN5QURRUjUzSUFOQkUzZHpJQU5CQ25kemFpQVVhaUlCYWlJU0lCRWdDWE54SUFsemFpQVNRUnAzSUJKQkZYZHpJQkpCQjNkemFrR0ZsZHk5QW1vaUZDQUJJQU56SUFKeElBRWdBM0Z6SUFGQkhuY2dBVUVUZDNNZ0FVRUtkM05xSUJkcUlnSnFJaE1nSTJvZ0ppQVNhaUFpSUJGcUlDVWdDV29nRXlBU0lCRnpjU0FSYzJvZ0UwRWFkeUFUUVJWM2N5QVRRUWQzYzJwQnVNTHM4QUpxSWhjZ0FpQUJjeUFEY1NBQ0lBRnhjeUFDUVI1M0lBSkJFM2R6SUFKQkNuZHphaUFaYWlJRGFpSUpJQk1nRW5OeElCSnphaUFKUVJwM0lBbEJGWGR6SUFsQkIzZHpha0g4MjdIcEJHb2lHU0FESUFKeklBRnhJQU1nQW5GeklBTkJIbmNnQTBFVGQzTWdBMEVLZDNOcUlCcHFJZ0ZxSWhFZ0NTQVRjM0VnRTNOcUlCRkJHbmNnRVVFVmQzTWdFVUVIZDNOcVFaT2E0SmtGYWlJYUlBRWdBM01nQW5FZ0FTQURjWE1nQVVFZWR5QUJRUk4zY3lBQlFRcDNjMm9nR0dvaUFtb2lFaUFSSUFsemNTQUpjMm9nRWtFYWR5QVNRUlYzY3lBU1FRZDNjMnBCMU9hcHFBWnFJaGdnQWlBQmN5QURjU0FDSUFGeGN5QUNRUjUzSUFKQkUzZHpJQUpCQ25kemFpQVVhaUlEYWlJVGFpQW9JQkpxSUNRZ0VXb2dKeUFKYWlBVElCSWdFWE54SUJGemFpQVRRUnAzSUJOQkZYZHpJQk5CQjNkemFrRzdsYWl6QjJvaUZDQURJQUp6SUFGeElBTWdBbkZ6SUFOQkhuY2dBMEVUZDNNZ0EwRUtkM05xSUJkcUlnRnFJZ2tnRXlBU2MzRWdFbk5xSUFsQkduY2dDVUVWZDNNZ0NVRUhkM05xUWE2U2k0NTRhaUlYSUFFZ0EzTWdBbkVnQVNBRGNYTWdBVUVlZHlBQlFSTjNjeUFCUVFwM2Myb2dHV29pQW1vaUVTQUpJQk56Y1NBVGMyb2dFVUVhZHlBUlFSVjNjeUFSUVFkM2MycEJoZG5JazNscUloa2dBaUFCY3lBRGNTQUNJQUZ4Y3lBQ1FSNTNJQUpCRTNkeklBSkJDbmR6YWlBYWFpSURhaUlTSUJFZ0NYTnhJQWx6YWlBU1FScDNJQkpCRlhkeklCSkJCM2R6YWtHaDBmK1ZlbW9pR2lBRElBSnpJQUZ4SUFNZ0FuRnpJQU5CSG5jZ0EwRVRkM01nQTBFS2QzTnFJQmhxSWdGcUloTnFJQ29nRW1vZ0xTQVJhaUFwSUFscUlCTWdFaUFSYzNFZ0VYTnFJQk5CR25jZ0UwRVZkM01nRTBFSGQzTnFRY3ZNNmNCNmFpSVlJQUVnQTNNZ0FuRWdBU0FEY1hNZ0FVRWVkeUFCUVJOM2N5QUJRUXAzYzJvZ0ZHb2lBbW9pQ1NBVElCSnpjU0FTYzJvZ0NVRWFkeUFKUVJWM2N5QUpRUWQzYzJwQjhKYXVrbnhxSWhRZ0FpQUJjeUFEY1NBQ0lBRnhjeUFDUVI1M0lBSkJFM2R6SUFKQkNuZHphaUFYYWlJRGFpSVJJQWtnRTNOeElCTnphaUFSUVJwM0lCRkJGWGR6SUJGQkIzZHpha0dqbzdHN2ZHb2lGeUFESUFKeklBRnhJQU1nQW5GeklBTkJIbmNnQTBFVGQzTWdBMEVLZDNOcUlCbHFJZ0ZxSWhJZ0VTQUpjM0VnQ1hOcUlCSkJHbmNnRWtFVmQzTWdFa0VIZDNOcVFablF5NHg5YWlJWklBRWdBM01nQW5FZ0FTQURjWE1nQVVFZWR5QUJRUk4zY3lBQlFRcDNjMm9nR21vaUFtb2lFMm9nTUNBU2FpQXZJQkZxSUNzZ0NXb2dFeUFTSUJGemNTQVJjMm9nRTBFYWR5QVRRUlYzY3lBVFFRZDNjMnBCcEl6a3RIMXFJaG9nQWlBQmN5QURjU0FDSUFGeGN5QUNRUjUzSUFKQkUzZHpJQUpCQ25kemFpQVlhaUlEYWlJSklCTWdFbk54SUJKemFpQUpRUnAzSUFsQkZYZHpJQWxCQjNkemFrR0Y2N2lnZjJvaUdDQURJQUp6SUFGeElBTWdBbkZ6SUFOQkhuY2dBMEVUZDNNZ0EwRUtkM05xSUJScUlnRnFJaEVnQ1NBVGMzRWdFM05xSUJGQkduY2dFVUVWZDNNZ0VVRUhkM05xUWZEQXFvTUJhaUlVSUFFZ0EzTWdBbkVnQVNBRGNYTWdBVUVlZHlBQlFSTjNjeUFCUVFwM2Myb2dGMm9pQW1vaUVpQVJJQWx6Y1NBSmMyb2dFa0VhZHlBU1FSVjNjeUFTUVFkM2MycEJsb0tUelFGcUloY2dBaUFCY3lBRGNTQUNJQUZ4Y3lBQ1FSNTNJQUpCRTNkeklBSkJDbmR6YWlBWmFpSURhaUlUSURacUlESWdFbW9nTlNBUmFpQXhJQWxxSUJNZ0VpQVJjM0VnRVhOcUlCTkJHbmNnRTBFVmQzTWdFMEVIZDNOcVFZalkzZkVCYWlJWklBTWdBbk1nQVhFZ0F5QUNjWE1nQTBFZWR5QURRUk4zY3lBRFFRcDNjMm9nR21vaUFXb2lDU0FUSUJKemNTQVNjMm9nQ1VFYWR5QUpRUlYzY3lBSlFRZDNjMnBCek82aHVnSnFJaG9nQVNBRGN5QUNjU0FCSUFOeGN5QUJRUjUzSUFGQkUzZHpJQUZCQ25kemFpQVlhaUlDYWlJUklBa2dFM054SUJOemFpQVJRUnAzSUJGQkZYZHpJQkZCQjNkemFrRzErY0tsQTJvaUdDQUNJQUZ6SUFOeElBSWdBWEZ6SUFKQkhuY2dBa0VUZDNNZ0FrRUtkM05xSUJScUlnTnFJaElnRVNBSmMzRWdDWE5xSUJKQkduY2dFa0VWZDNNZ0VrRUhkM05xUWJPWjhNZ0RhaUlVSUFNZ0FuTWdBWEVnQXlBQ2NYTWdBMEVlZHlBRFFSTjNjeUFEUVFwM2Myb2dGMm9pQVdvaUUyb2dMRUVaZHlBc1FRNTNjeUFzUVFOMmN5QW9haUEwYWlBelFROTNJRE5CRFhkeklETkJDblp6YWlJWElCSnFJRGNnRVdvZ015QUphaUFUSUJJZ0VYTnhJQkZ6YWlBVFFScDNJQk5CRlhkeklCTkJCM2R6YWtISzFPTDJCR29pR3lBQklBTnpJQUp4SUFFZ0EzRnpJQUZCSG5jZ0FVRVRkM01nQVVFS2QzTnFJQmxxSWdKcUlna2dFeUFTYzNFZ0VuTnFJQWxCR25jZ0NVRVZkM01nQ1VFSGQzTnFRYytVODl3RmFpSVpJQUlnQVhNZ0EzRWdBaUFCY1hNZ0FrRWVkeUFDUVJOM2N5QUNRUXAzYzJvZ0dtb2lBMm9pRVNBSklCTnpjU0FUYzJvZ0VVRWFkeUFSUVJWM2N5QVJRUWQzYzJwQjg5KzV3UVpxSWhvZ0F5QUNjeUFCY1NBRElBSnhjeUFEUVI1M0lBTkJFM2R6SUFOQkNuZHphaUFZYWlJQmFpSVNJQkVnQ1hOeElBbHphaUFTUVJwM0lCSkJGWGR6SUJKQkIzZHpha0h1aGI2a0Iyb2lIQ0FCSUFOeklBSnhJQUVnQTNGeklBRkJIbmNnQVVFVGQzTWdBVUVLZDNOcUlCUnFJZ0pxSWhOcUlDNUJHWGNnTGtFT2QzTWdMa0VEZG5NZ0ttb2dObW9nTFVFWmR5QXRRUTUzY3lBdFFRTjJjeUFwYWlBMWFpQVhRUTkzSUJkQkRYZHpJQmRCQ25aemFpSVVRUTkzSUJSQkRYZHpJQlJCQ25aemFpSVlJQkpxSURrZ0VXb2dGQ0FKYWlBVElCSWdFWE54SUJGemFpQVRRUnAzSUJOQkZYZHpJQk5CQjNkemFrSHZ4cFhGQjJvaUNTQUNJQUZ6SUFOeElBSWdBWEZ6SUFKQkhuY2dBa0VUZDNNZ0FrRUtkM05xSUJ0cUlnTnFJaEVnRXlBU2MzRWdFbk5xSUJGQkduY2dFVUVWZDNNZ0VVRUhkM05xUVpUd29hWjRhaUliSUFNZ0FuTWdBWEVnQXlBQ2NYTWdBMEVlZHlBRFFSTjNjeUFEUVFwM2Myb2dHV29pQVdvaUVpQVJJQk56Y1NBVGMyb2dFa0VhZHlBU1FSVjNjeUFTUVFkM2MycEJpSVNjNW5ocUloa2dBU0FEY3lBQ2NTQUJJQU54Y3lBQlFSNTNJQUZCRTNkeklBRkJDbmR6YWlBYWFpSUNhaUlUSUJJZ0VYTnhJQkZ6YWlBVFFScDNJQk5CRlhkeklCTkJCM2R6YWtINi8vdUZlV29pR2lBQ0lBRnpJQU54SUFJZ0FYRnpJQUpCSG5jZ0FrRVRkM01nQWtFS2QzTnFJQnhxSWdOcUloUWdQR28yQXVTSkFVRUFJRDhnQXlBQ2N5QUJjU0FESUFKeGN5QURRUjUzSUFOQkUzZHpJQU5CQ25kemFpQUphaUlCSUFOeklBSnhJQUVnQTNGeklBRkJIbmNnQVVFVGQzTWdBVUVLZDNOcUlCdHFJZ0lnQVhNZ0EzRWdBaUFCY1hNZ0FrRWVkeUFDUVJOM2N5QUNRUXAzYzJvZ0dXb2lBeUFDY3lBQmNTQURJQUp4Y3lBRFFSNTNJQU5CRTNkeklBTkJDbmR6YWlBYWFpSUphallDMUlrQlFRQWdQU0F2UVJsM0lDOUJEbmR6SUM5QkEzWnpJQ3RxSURkcUlCaEJEM2NnR0VFTmQzTWdHRUVLZG5OcUloZ2dFV29nRkNBVElCSnpjU0FTYzJvZ0ZFRWFkeUFVUVJWM2N5QVVRUWQzYzJwQjY5bkJvbnBxSWhrZ0FXb2lFV28yQXVDSkFVRUFJRUVnQ1NBRGN5QUNjU0FKSUFOeGN5QUpRUjUzSUFsQkUzZHpJQWxCQ25kemFpQVphaUlCYWpZQzBJa0JRUUFnUGlBd1FSbDNJREJCRG5keklEQkJBM1p6SUM5cUlCZHFJRHBCRDNjZ09rRU5kM01nT2tFS2RuTnFJQkpxSUJFZ0ZDQVRjM0VnRTNOcUlCRkJHbmNnRVVFVmQzTWdFVUVIZDNOcVFmZkg1dmQ3YWlJWElBSnFJaEpxTmdMY2lRRkJBQ0JESUFFZ0NYTWdBM0VnQVNBSmNYTWdBVUVlZHlBQlFSTjNjeUFCUVFwM2Myb2dGMm9pQW1vMkFzeUpBVUVBSURzZ05FRVpkeUEwUVE1M2N5QTBRUU4yY3lBd2FpQTRhaUFZUVE5M0lCaEJEWGR6SUJoQkNuWnphaUFUYWlBU0lCRWdGSE54SUJSemFpQVNRUnAzSUJKQkZYZHpJQkpCQjNkemFrSHk4Y1d6ZkdvaUVTQURhbW8yQXRpSkFVRUFJQUFnQWlBQmN5QUpjU0FDSUFGeGN5QUNRUjUzSUFKQkUzZHpJQUpCQ25kemFpQVJhbW8yQXNpSkFRdTJCZ0lFZndGK1FRQW9Bc0NKQVNJQVFRSjJRUTl4SWdGQkFuUkJnSWtCYWlJQ0lBSW9BZ0JCZnlBQVFRTjBJZ0IwUVg5emNVR0FBU0FBZEhNMkFnQUNRQUpBQWtBZ0FVRU9TUTBBQWtBZ0FVRU9SdzBBUVFCQkFEWUN2SWtCQzBHQWlRRVFBMEVBSVFNTUFRc2dBVUVOUmcwQklBRkJBV29oQXdzZ0F5RUFBa0JCQmlBRGEwRUhjU0lDUlEwQUlBTkJBblJCZ0lrQmFpRUJJQU1oQUFOQUlBRkJBRFlDQUNBQlFRUnFJUUVnQUVFQmFpRUFJQUpCZjJvaUFnMEFDd3NnQTBGNWFrRUhTUTBBSUFCQkFuUWhBUU5BSUFGQm1Ja0Jha0lBTndJQUlBRkJrSWtCYWtJQU53SUFJQUZCaUlrQmFrSUFOd0lBSUFGQmdJa0Jha0lBTndJQUlBRkJJR29pQVVFNFJ3MEFDd3RCQUNFQlFRQkJBQ2tEd0lrQklnU25JZ0JCRzNRZ0FFRUxkRUdBZ1B3SGNYSWdBRUVGZGtHQS9nTnhJQUJCQTNSQkdIWnljallDdklrQlFRQWdCRUlkaUtjaUFFRVlkQ0FBUVlEK0EzRkJDSFJ5SUFCQkNIWkJnUDREY1NBQVFSaDJjbkkyQXJpSkFVR0FpUUVRQTBFQVFRQW9BdVNKQVNJQVFSaDBJQUJCZ1A0RGNVRUlkSElnQUVFSWRrR0EvZ054SUFCQkdIWnljallDNUlrQlFRQkJBQ2dDNElrQklnQkJHSFFnQUVHQS9nTnhRUWgwY2lBQVFRaDJRWUQrQTNFZ0FFRVlkbkp5TmdMZ2lRRkJBRUVBS0FMY2lRRWlBRUVZZENBQVFZRCtBM0ZCQ0hSeUlBQkJDSFpCZ1A0RGNTQUFRUmgyY25JMkF0eUpBVUVBUVFBb0F0aUpBU0lBUVJoMElBQkJnUDREY1VFSWRISWdBRUVJZGtHQS9nTnhJQUJCR0haeWNqWUMySWtCUVFCQkFDZ0MxSWtCSWdCQkdIUWdBRUdBL2dOeFFRaDBjaUFBUVFoMlFZRCtBM0VnQUVFWWRuSnlOZ0xVaVFGQkFFRUFLQUxRaVFFaUFFRVlkQ0FBUVlEK0EzRkJDSFJ5SUFCQkNIWkJnUDREY1NBQVFSaDJjbkkyQXRDSkFVRUFRUUFvQXN5SkFTSUFRUmgwSUFCQmdQNERjVUVJZEhJZ0FFRUlka0dBL2dOeElBQkJHSFp5Y2pZQ3pJa0JRUUJCQUNnQ3lJa0JJZ0JCR0hRZ0FFR0EvZ054UVFoMGNpQUFRUWgyUVlEK0EzRWdBRUVZZG5KeU5nTElpUUVDUUVFQUtBTG9pUUVpQWtVTkFFRUFJUUFEUUNBQlFZQUphaUFCUWNpSkFXb3RBQUE2QUFBZ0FVRUJhaUVCSUFJZ0FFRUJhaUlBUWY4QmNVc05BQXNMQ3dZQVFZQ0pBUXVqQVFCQkFFSUFOd1BBaVFGQkFFRWNRU0FnQVVIZ0FVWWlBUnMyQXVpSkFVRUFRcWVmNXFmRzlKUDl2bjlDcTdPUC9KR2pzL0RiQUNBQkd6Y0Q0SWtCUVFCQ3NaYUEvcCtpaGF6b0FFTC9wTG1JeFpIYWdwdC9JQUViTndQWWlRRkJBRUtYdXNPRGs2ZVdoM2RDOHVhNzQ2T24vYWVsZnlBQkd6Y0QwSWtCUVFCQzJMMldpUHlndGI0MlF1Zk1wOURXME91enUzOGdBUnMzQThpSkFTQUFFQUlRQkFzTEN3RUFRWUFJQ3dSd0FBQUFcIjtcbiAgICB2YXIgaGFzaCRhID0gXCI2NGYwNjY3NFwiO1xuICAgIHZhciB3YXNtSnNvbiRhID0ge1xuICAgIFx0bmFtZTogbmFtZSRhLFxuICAgIFx0ZGF0YTogZGF0YSRhLFxuICAgIFx0aGFzaDogaGFzaCRhXG4gICAgfTtcblxuICAgIGNvbnN0IG11dGV4JGEgPSBuZXcgTXV0ZXgoKTtcbiAgICBsZXQgd2FzbUNhY2hlJGEgPSBudWxsO1xuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZXMgU0hBLTIgKFNIQS0yMjQpIGhhc2hcbiAgICAgKiBAcGFyYW0gZGF0YSBJbnB1dCBkYXRhIChzdHJpbmcsIEJ1ZmZlciBvciBUeXBlZEFycmF5KVxuICAgICAqIEByZXR1cm5zIENvbXB1dGVkIGhhc2ggYXMgYSBoZXhhZGVjaW1hbCBzdHJpbmdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaGEyMjQoZGF0YSkge1xuICAgICAgICBpZiAod2FzbUNhY2hlJGEgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NrZWRDcmVhdGUobXV0ZXgkYSwgd2FzbUpzb24kYSwgMjgpXG4gICAgICAgICAgICAgICAgLnRoZW4oKHdhc20pID0+IHtcbiAgICAgICAgICAgICAgICB3YXNtQ2FjaGUkYSA9IHdhc207XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdhc21DYWNoZSRhLmNhbGN1bGF0ZShkYXRhLCAyMjQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGhhc2ggPSB3YXNtQ2FjaGUkYS5jYWxjdWxhdGUoZGF0YSwgMjI0KTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoaGFzaCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBTSEEtMiAoU0hBLTIyNCkgaGFzaCBpbnN0YW5jZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVNIQTIyNCgpIHtcbiAgICAgICAgcmV0dXJuIFdBU01JbnRlcmZhY2Uod2FzbUpzb24kYSwgMjgpLnRoZW4oKHdhc20pID0+IHtcbiAgICAgICAgICAgIHdhc20uaW5pdCgyMjQpO1xuICAgICAgICAgICAgY29uc3Qgb2JqID0ge1xuICAgICAgICAgICAgICAgIGluaXQ6ICgpID0+IHsgd2FzbS5pbml0KDIyNCk7IHJldHVybiBvYmo7IH0sXG4gICAgICAgICAgICAgICAgdXBkYXRlOiAoZGF0YSkgPT4geyB3YXNtLnVwZGF0ZShkYXRhKTsgcmV0dXJuIG9iajsgfSxcbiAgICAgICAgICAgICAgICBkaWdlc3Q6IChvdXRwdXRUeXBlKSA9PiB3YXNtLmRpZ2VzdChvdXRwdXRUeXBlKSxcbiAgICAgICAgICAgICAgICBzYXZlOiAoKSA9PiB3YXNtLnNhdmUoKSxcbiAgICAgICAgICAgICAgICBsb2FkOiAoZGF0YSkgPT4geyB3YXNtLmxvYWQoZGF0YSk7IHJldHVybiBvYmo7IH0sXG4gICAgICAgICAgICAgICAgYmxvY2tTaXplOiA2NCxcbiAgICAgICAgICAgICAgICBkaWdlc3RTaXplOiAyOCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBtdXRleCQ5ID0gbmV3IE11dGV4KCk7XG4gICAgbGV0IHdhc21DYWNoZSQ5ID0gbnVsbDtcbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGVzIFNIQS0yIChTSEEtMjU2KSBoYXNoXG4gICAgICogQHBhcmFtIGRhdGEgSW5wdXQgZGF0YSAoc3RyaW5nLCBCdWZmZXIgb3IgVHlwZWRBcnJheSlcbiAgICAgKiBAcmV0dXJucyBDb21wdXRlZCBoYXNoIGFzIGEgaGV4YWRlY2ltYWwgc3RyaW5nXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2hhMjU2KGRhdGEpIHtcbiAgICAgICAgaWYgKHdhc21DYWNoZSQ5ID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9ja2VkQ3JlYXRlKG11dGV4JDksIHdhc21Kc29uJGEsIDMyKVxuICAgICAgICAgICAgICAgIC50aGVuKCh3YXNtKSA9PiB7XG4gICAgICAgICAgICAgICAgd2FzbUNhY2hlJDkgPSB3YXNtO1xuICAgICAgICAgICAgICAgIHJldHVybiB3YXNtQ2FjaGUkOS5jYWxjdWxhdGUoZGF0YSwgMjU2KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBoYXNoID0gd2FzbUNhY2hlJDkuY2FsY3VsYXRlKGRhdGEsIDI1Nik7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGhhc2gpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgU0hBLTIgKFNIQS0yNTYpIGhhc2ggaW5zdGFuY2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVTSEEyNTYoKSB7XG4gICAgICAgIHJldHVybiBXQVNNSW50ZXJmYWNlKHdhc21Kc29uJGEsIDMyKS50aGVuKCh3YXNtKSA9PiB7XG4gICAgICAgICAgICB3YXNtLmluaXQoMjU2KTtcbiAgICAgICAgICAgIGNvbnN0IG9iaiA9IHtcbiAgICAgICAgICAgICAgICBpbml0OiAoKSA9PiB7IHdhc20uaW5pdCgyNTYpOyByZXR1cm4gb2JqOyB9LFxuICAgICAgICAgICAgICAgIHVwZGF0ZTogKGRhdGEpID0+IHsgd2FzbS51cGRhdGUoZGF0YSk7IHJldHVybiBvYmo7IH0sXG4gICAgICAgICAgICAgICAgZGlnZXN0OiAob3V0cHV0VHlwZSkgPT4gd2FzbS5kaWdlc3Qob3V0cHV0VHlwZSksXG4gICAgICAgICAgICAgICAgc2F2ZTogKCkgPT4gd2FzbS5zYXZlKCksXG4gICAgICAgICAgICAgICAgbG9hZDogKGRhdGEpID0+IHsgd2FzbS5sb2FkKGRhdGEpOyByZXR1cm4gb2JqOyB9LFxuICAgICAgICAgICAgICAgIGJsb2NrU2l6ZTogNjQsXG4gICAgICAgICAgICAgICAgZGlnZXN0U2l6ZTogMzIsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdmFyIG5hbWUkOSA9IFwic2hhNTEyXCI7XG4gICAgdmFyIGRhdGEkOSA9IFwiQUdGemJRRUFBQUFCRVFSZ0FBRi9ZQUYvQUdBQUFHQUNmMzhBQXdnSEFBRUJBUUlBQXdVRUFRRUNBZ1lPQW44QlFkQ0tCUXQvQUVHQUNBc0hjQWdHYldWdGIzSjVBZ0FPU0dGemFGOUhaWFJDZFdabVpYSUFBQWxJWVhOb1gwbHVhWFFBQVF0SVlYTm9YMVZ3WkdGMFpRQUNDa2hoYzJoZlJtbHVZV3dBQkExSVlYTm9YMGRsZEZOMFlYUmxBQVVPU0dGemFGOURZV3hqZFd4aGRHVUFCZ3BUVkVGVVJWOVRTVnBGQXdFS21XZ0hCUUJCZ0FrTG13SUFRUUJDQURjRGdJb0JRUUJCTUVIQUFDQUFRWUFEUmlJQUd6WUN5SW9CUVFCQ3BKL3A5OXVEMHRySEFFTDV3dmlia2FPejhOc0FJQUFiTndQQWlnRkJBRUtubithbjFzR0xobHRDNi9xRzJyKzE5c0VmSUFBYk53TzRpZ0ZCQUVLUnF1REM5dENTMm81L1FwL1krZG5Da2RxQ20zOGdBQnMzQTdDS0FVRUFRckdXZ1A3L3pNbVo1d0JDMFlXYTcvclBsSWZSQUNBQUd6Y0RxSW9CUVFCQ3ViSzV1SStiKzVjVlF2SHQ5UGlscC8ybnBYOGdBQnMzQTZDS0FVRUFRcGU2dzRPanE4Q3NrWDlDcS9EVDlLL3V2TGM4SUFBYk53T1lpZ0ZCQUVLSHF2T3pvNldLemVJQVFydk9xcWJZME91enUzOGdBQnMzQTVDS0FVRUFRdGk5bG9qY3ErZmRTMEtJa3ZPZC84ejVoT29BSUFBYk53T0lpZ0VMOGdJQ0FYNEdmMEVBUVFBcEE0Q0tBU0lCSUFDdGZEY0RnSW9CQWtBQ1FBSkFJQUduUWY4QWNTSUNEUUJCZ0FraEF3d0JDd0pBUVlBQklBSnJJZ1FnQUNBRUlBQkpHeUlEUlEwQUlBTkJBM0VoQlNBQ1FZQ0pBV29oQmtFQUlRSUNRQ0FEUVFSSkRRQWdBMEg4QVhFaEIwRUFJUUlEUUNBR0lBSnFJZ01nQWtHQUNXb3RBQUE2QUFBZ0EwRUJhaUFDUVlFSmFpMEFBRG9BQUNBRFFRSnFJQUpCZ2dscUxRQUFPZ0FBSUFOQkEyb2dBa0dEQ1dvdEFBQTZBQUFnQnlBQ1FRUnFJZ0pIRFFBTEN5QUZSUTBBQTBBZ0JpQUNhaUFDUVlBSmFpMEFBRG9BQUNBQ1FRRnFJUUlnQlVGL2FpSUZEUUFMQ3lBRUlBQkxEUUZCZ0lrQkVBTWdBQ0FFYXlFQUlBUkJnQWxxSVFNTEFrQWdBRUdBQVVrTkFBTkFJQU1RQXlBRFFZQUJhaUVESUFCQmdIOXFJZ0JCL3dCTERRQUxDeUFBUlEwQVFRQWhBa0VBSVFVRFFDQUNRWUNKQVdvZ0F5QUNhaTBBQURvQUFDQUNRUUZxSVFJZ0FDQUZRUUZxSWdWQi93RnhTdzBBQ3dzTDNGWUJWbjVCQUNBQUtRTUlJZ0ZDT0lZZ0FVS0EvZ09EUWlpR2hDQUJRb0NBL0FlRFFoaUdJQUZDZ0lDQStBK0RRZ2lHaElRZ0FVSUlpRUtBZ0lENEQ0TWdBVUlZaUVLQWdQd0hnNFFnQVVJb2lFS0EvZ09ESUFGQ09JaUVoSVFpQWtJL2lTQUNRamlKaFNBQ1FnZUloU0FBS1FNQUlnRkNPSVlnQVVLQS9nT0RRaWlHaENBQlFvQ0EvQWVEUWhpR0lBRkNnSUNBK0ErRFFnaUdoSVFnQVVJSWlFS0FnSUQ0RDRNZ0FVSVlpRUtBZ1B3SGc0UWdBVUlvaUVLQS9nT0RJQUZDT0lpRWhJUWlBM3dnQUNrRFNDSUJRamlHSUFGQ2dQNERnMElvaG9RZ0FVS0FnUHdIZzBJWWhpQUJRb0NBZ1BnUGcwSUlob1NFSUFGQ0NJaENnSUNBK0ErRElBRkNHSWhDZ0lEOEI0T0VJQUZDS0loQ2dQNERneUFCUWppSWhJU0VJZ1I4SUFBcEEzQWlBVUk0aGlBQlFvRCtBNE5DS0lhRUlBRkNnSUQ4QjROQ0dJWWdBVUtBZ0lENEQ0TkNDSWFFaENBQlFnaUlRb0NBZ1BnUGd5QUJRaGlJUW9DQS9BZURoQ0FCUWlpSVFvRCtBNE1nQVVJNGlJU0VoQ0lGUWkySklBVkNBNG1GSUFWQ0JvaUZmQ0lHUWorSklBWkNPSW1GSUFaQ0I0aUZJQUFwQTNnaUFVSTRoaUFCUW9EK0E0TkNLSWFFSUFGQ2dJRDhCNE5DR0lZZ0FVS0FnSUQ0RDROQ0NJYUVoQ0FCUWdpSVFvQ0FnUGdQZ3lBQlFoaUlRb0NBL0FlRGhDQUJRaWlJUW9EK0E0TWdBVUk0aUlTRWhDSUhmQ0FFUWorSklBUkNPSW1GSUFSQ0I0aUZJQUFwQTBBaUFVSTRoaUFCUW9EK0E0TkNLSWFFSUFGQ2dJRDhCNE5DR0lZZ0FVS0FnSUQ0RDROQ0NJYUVoQ0FCUWdpSVFvQ0FnUGdQZ3lBQlFoaUlRb0NBL0FlRGhDQUJRaWlJUW9EK0E0TWdBVUk0aUlTRWhDSUlmQ0FBS1FNUUlnRkNPSVlnQVVLQS9nT0RRaWlHaENBQlFvQ0EvQWVEUWhpR0lBRkNnSUNBK0ErRFFnaUdoSVFnQVVJSWlFS0FnSUQ0RDRNZ0FVSVlpRUtBZ1B3SGc0UWdBVUlvaUVLQS9nT0RJQUZDT0lpRWhJUWlDVUkvaVNBSlFqaUpoU0FKUWdlSWhTQUNmQ0FBS1FOUUlnRkNPSVlnQVVLQS9nT0RRaWlHaENBQlFvQ0EvQWVEUWhpR0lBRkNnSUNBK0ErRFFnaUdoSVFnQVVJSWlFS0FnSUQ0RDRNZ0FVSVlpRUtBZ1B3SGc0UWdBVUlvaUVLQS9nT0RJQUZDT0lpRWhJUWlDbndnQjBJdGlTQUhRZ09KaFNBSFFnYUloWHdpQzN3Z0FDa0RPQ0lCUWppR0lBRkNnUDREZzBJb2hvUWdBVUtBZ1B3SGcwSVloaUFCUW9DQWdQZ1BnMElJaG9TRUlBRkNDSWhDZ0lDQStBK0RJQUZDR0loQ2dJRDhCNE9FSUFGQ0tJaENnUDREZ3lBQlFqaUloSVNFSWd4Q1A0a2dERUk0aVlVZ0RFSUhpSVVnQUNrRE1DSUJRamlHSUFGQ2dQNERnMElvaG9RZ0FVS0FnUHdIZzBJWWhpQUJRb0NBZ1BnUGcwSUlob1NFSUFGQ0NJaENnSUNBK0ErRElBRkNHSWhDZ0lEOEI0T0VJQUZDS0loQ2dQNERneUFCUWppSWhJU0VJZzE4SUFkOElBQXBBeWdpQVVJNGhpQUJRb0QrQTROQ0tJYUVJQUZDZ0lEOEI0TkNHSVlnQVVLQWdJRDRENE5DQ0lhRWhDQUJRZ2lJUW9DQWdQZ1BneUFCUWhpSVFvQ0EvQWVEaENBQlFpaUlRb0QrQTRNZ0FVSTRpSVNFaENJT1FqK0pJQTVDT0ltRklBNUNCNGlGSUFBcEF5QWlBVUk0aGlBQlFvRCtBNE5DS0lhRUlBRkNnSUQ4QjROQ0dJWWdBVUtBZ0lENEQ0TkNDSWFFaENBQlFnaUlRb0NBZ1BnUGd5QUJRaGlJUW9DQS9BZURoQ0FCUWlpSVFvRCtBNE1nQVVJNGlJU0VoQ0lQZkNBQUtRTm9JZ0ZDT0lZZ0FVS0EvZ09EUWlpR2hDQUJRb0NBL0FlRFFoaUdJQUZDZ0lDQStBK0RRZ2lHaElRZ0FVSUlpRUtBZ0lENEQ0TWdBVUlZaUVLQWdQd0hnNFFnQVVJb2lFS0EvZ09ESUFGQ09JaUVoSVFpRUh3Z0FDa0RHQ0lCUWppR0lBRkNnUDREZzBJb2hvUWdBVUtBZ1B3SGcwSVloaUFCUW9DQWdQZ1BnMElJaG9TRUlBRkNDSWhDZ0lDQStBK0RJQUZDR0loQ2dJRDhCNE9FSUFGQ0tJaENnUDREZ3lBQlFqaUloSVNFSWhGQ1A0a2dFVUk0aVlVZ0VVSUhpSVVnQ1h3Z0FDa0RXQ0lCUWppR0lBRkNnUDREZzBJb2hvUWdBVUtBZ1B3SGcwSVloaUFCUW9DQWdQZ1BnMElJaG9TRUlBRkNDSWhDZ0lDQStBK0RJQUZDR0loQ2dJRDhCNE9FSUFGQ0tJaENnUDREZ3lBQlFqaUloSVNFSWhKOElBWkNMWWtnQmtJRGlZVWdCa0lHaUlWOEloTkNMWWtnRTBJRGlZVWdFMElHaUlWOEloUkNMWWtnRkVJRGlZVWdGRUlHaUlWOEloVkNMWWtnRlVJRGlZVWdGVUlHaUlWOEloWjhJQVZDUDRrZ0JVSTRpWVVnQlVJSGlJVWdFSHdnRlh3Z0FDa0RZQ0lCUWppR0lBRkNnUDREZzBJb2hvUWdBVUtBZ1B3SGcwSVloaUFCUW9DQWdQZ1BnMElJaG9TRUlBRkNDSWhDZ0lDQStBK0RJQUZDR0loQ2dJRDhCNE9FSUFGQ0tJaENnUDREZ3lBQlFqaUloSVNFSWhkQ1A0a2dGMEk0aVlVZ0YwSUhpSVVnRW53Z0ZId2dDa0kvaVNBS1FqaUpoU0FLUWdlSWhTQUVmQ0FUZkNBSVFqK0pJQWhDT0ltRklBaENCNGlGSUF4OElBWjhJQTFDUDRrZ0RVSTRpWVVnRFVJSGlJVWdEbndnQlh3Z0QwSS9pU0FQUWppSmhTQVBRZ2VJaFNBUmZDQVhmQ0FMUWkySklBdENBNG1GSUF0Q0JvaUZmQ0lZUWkySklCaENBNG1GSUJoQ0JvaUZmQ0laUWkySklCbENBNG1GSUJsQ0JvaUZmQ0lhUWkySklCcENBNG1GSUJwQ0JvaUZmQ0liUWkySklCdENBNG1GSUJ0Q0JvaUZmQ0ljUWkySklCeENBNG1GSUJ4Q0JvaUZmQ0lkUWkySklCMUNBNG1GSUIxQ0JvaUZmQ0llUWorSklCNUNPSW1GSUI1Q0I0aUZJQWRDUDRrZ0IwSTRpWVVnQjBJSGlJVWdCWHdnR253Z0VFSS9pU0FRUWppSmhTQVFRZ2VJaFNBWGZDQVpmQ0FTUWorSklCSkNPSW1GSUJKQ0I0aUZJQXA4SUJoOElCWkNMWWtnRmtJRGlZVWdGa0lHaUlWOEloOUNMWWtnSDBJRGlZVWdIMElHaUlWOElpQkNMWWtnSUVJRGlZVWdJRUlHaUlWOElpRjhJQlpDUDRrZ0ZrSTRpWVVnRmtJSGlJVWdHbndnQzBJL2lTQUxRamlKaFNBTFFnZUloU0FHZkNBYmZDQWhRaTJKSUNGQ0E0bUZJQ0ZDQm9pRmZDSWlmQ0FWUWorSklCVkNPSW1GSUJWQ0I0aUZJQmw4SUNGOElCUkNQNGtnRkVJNGlZVWdGRUlIaUlVZ0dId2dJSHdnRTBJL2lTQVRRamlKaFNBVFFnZUloU0FMZkNBZmZDQWVRaTJKSUI1Q0E0bUZJQjVDQm9pRmZDSWpRaTJKSUNOQ0E0bUZJQ05DQm9pRmZDSWtRaTJKSUNSQ0E0bUZJQ1JDQm9pRmZDSWxRaTJKSUNWQ0E0bUZJQ1ZDQm9pRmZDSW1mQ0FkUWorSklCMUNPSW1GSUIxQ0I0aUZJQ0I4SUNWOElCeENQNGtnSEVJNGlZVWdIRUlIaUlVZ0gzd2dKSHdnRzBJL2lTQWJRamlKaFNBYlFnZUloU0FXZkNBamZDQWFRaitKSUJwQ09JbUZJQnBDQjRpRklCVjhJQjU4SUJsQ1A0a2dHVUk0aVlVZ0dVSUhpSVVnRkh3Z0hYd2dHRUkvaVNBWVFqaUpoU0FZUWdlSWhTQVRmQ0FjZkNBaVFpMkpJQ0pDQTRtRklDSkNCb2lGZkNJblFpMkpJQ2RDQTRtRklDZENCb2lGZkNJb1FpMkpJQ2hDQTRtRklDaENCb2lGZkNJcFFpMkpJQ2xDQTRtRklDbENCb2lGZkNJcVFpMkpJQ3BDQTRtRklDcENCb2lGZkNJclFpMkpJQ3RDQTRtRklDdENCb2lGZkNJc1FpMkpJQ3hDQTRtRklDeENCb2lGZkNJdFFqK0pJQzFDT0ltRklDMUNCNGlGSUNGQ1A0a2dJVUk0aVlVZ0lVSUhpSVVnSFh3Z0tYd2dJRUkvaVNBZ1FqaUpoU0FnUWdlSWhTQWNmQ0FvZkNBZlFqK0pJQjlDT0ltRklCOUNCNGlGSUJ0OElDZDhJQ1pDTFlrZ0prSURpWVVnSmtJR2lJVjhJaTVDTFlrZ0xrSURpWVVnTGtJR2lJVjhJaTlDTFlrZ0wwSURpWVVnTDBJR2lJVjhJakI4SUNaQ1A0a2dKa0k0aVlVZ0prSUhpSVVnS1h3Z0lrSS9pU0FpUWppSmhTQWlRZ2VJaFNBZWZDQXFmQ0F3UWkySklEQkNBNG1GSURCQ0JvaUZmQ0l4ZkNBbFFqK0pJQ1ZDT0ltRklDVkNCNGlGSUNoOElEQjhJQ1JDUDRrZ0pFSTRpWVVnSkVJSGlJVWdKM3dnTDN3Z0kwSS9pU0FqUWppSmhTQWpRZ2VJaFNBaWZDQXVmQ0F0UWkySklDMUNBNG1GSUMxQ0JvaUZmQ0l5UWkySklESkNBNG1GSURKQ0JvaUZmQ0l6UWkySklETkNBNG1GSUROQ0JvaUZmQ0kwUWkySklEUkNBNG1GSURSQ0JvaUZmQ0kxZkNBc1FqK0pJQ3hDT0ltRklDeENCNGlGSUM5OElEUjhJQ3RDUDRrZ0swSTRpWVVnSzBJSGlJVWdMbndnTTN3Z0trSS9pU0FxUWppSmhTQXFRZ2VJaFNBbWZDQXlmQ0FwUWorSklDbENPSW1GSUNsQ0I0aUZJQ1Y4SUMxOElDaENQNGtnS0VJNGlZVWdLRUlIaUlVZ0pId2dMSHdnSjBJL2lTQW5RamlKaFNBblFnZUloU0FqZkNBcmZDQXhRaTJKSURGQ0E0bUZJREZDQm9pRmZDSTJRaTJKSURaQ0E0bUZJRFpDQm9pRmZDSTNRaTJKSURkQ0E0bUZJRGRDQm9pRmZDSTRRaTJKSURoQ0E0bUZJRGhDQm9pRmZDSTVRaTJKSURsQ0E0bUZJRGxDQm9pRmZDSTZRaTJKSURwQ0E0bUZJRHBDQm9pRmZDSTdRaTJKSUR0Q0E0bUZJRHRDQm9pRmZDSThRaitKSUR4Q09JbUZJRHhDQjRpRklEQkNQNGtnTUVJNGlZVWdNRUlIaUlVZ0xId2dPSHdnTDBJL2lTQXZRamlKaFNBdlFnZUloU0FyZkNBM2ZDQXVRaitKSUM1Q09JbUZJQzVDQjRpRklDcDhJRFo4SURWQ0xZa2dOVUlEaVlVZ05VSUdpSVY4SWoxQ0xZa2dQVUlEaVlVZ1BVSUdpSVY4SWo1Q0xZa2dQa0lEaVlVZ1BrSUdpSVY4SWo5OElEVkNQNGtnTlVJNGlZVWdOVUlIaUlVZ09Id2dNVUkvaVNBeFFqaUpoU0F4UWdlSWhTQXRmQ0E1ZkNBL1FpMkpJRDlDQTRtRklEOUNCb2lGZkNKQWZDQTBRaitKSURSQ09JbUZJRFJDQjRpRklEZDhJRDk4SUROQ1A0a2dNMEk0aVlVZ00wSUhpSVVnTm53Z1Bud2dNa0kvaVNBeVFqaUpoU0F5UWdlSWhTQXhmQ0E5ZkNBOFFpMkpJRHhDQTRtRklEeENCb2lGZkNKQlFpMkpJRUZDQTRtRklFRkNCb2lGZkNKQ1FpMkpJRUpDQTRtRklFSkNCb2lGZkNKRFFpMkpJRU5DQTRtRklFTkNCb2lGZkNKRWZDQTdRaitKSUR0Q09JbUZJRHRDQjRpRklENThJRU44SURwQ1A0a2dPa0k0aVlVZ09rSUhpSVVnUFh3Z1Fud2dPVUkvaVNBNVFqaUpoU0E1UWdlSWhTQTFmQ0JCZkNBNFFqK0pJRGhDT0ltRklEaENCNGlGSURSOElEeDhJRGRDUDRrZ04wSTRpWVVnTjBJSGlJVWdNM3dnTzN3Z05rSS9pU0EyUWppSmhTQTJRZ2VJaFNBeWZDQTZmQ0JBUWkySklFQkNBNG1GSUVCQ0JvaUZmQ0pGUWkySklFVkNBNG1GSUVWQ0JvaUZmQ0pHUWkySklFWkNBNG1GSUVaQ0JvaUZmQ0pIUWkySklFZENBNG1GSUVkQ0JvaUZmQ0pJUWkySklFaENBNG1GSUVoQ0JvaUZmQ0pKUWkySklFbENBNG1GSUVsQ0JvaUZmQ0pLUWkySklFcENBNG1GSUVwQ0JvaUZmQ0pMSUVrZ1JTQS9JRDBnTWlBc0lDb2dJaUFnSUJZZ0JpQVhJQWhCQUNrRHFJb0JJa3hDTW9rZ1RFSXVpWVVnVEVJWGlZVkJBQ2tEd0lvQklrMThRUUFwQTdpS0FTSk9RUUFwQTdDS0FTSlBoU0JNZ3lCT2hYd2dBM3hDb3R5aXVZM3ppOFhDQUh3aUEwRUFLUU9naWdFaVVId2lBU0FQZkNCTUlCRjhJRThnQ1h3Z1RpQUNmQ0FCSUU4Z1RJV0RJRStGZkNBQlFqS0pJQUZDTG9tRklBRkNGNG1GZkVMTnk3MmZrcExSbS9FQWZDSlJRUUFwQTVpS0FTSlNmQ0lKSUFFZ1RJV0RJRXlGZkNBSlFqS0pJQWxDTG9tRklBbENGNG1GZkVLdjlyVGkvdm0rNExWL2ZDSlRRUUFwQTVDS0FTSlVmQ0lQSUFrZ0FZV0RJQUdGZkNBUFFqS0pJQTlDTG9tRklBOUNGNG1GZkVLOHQ2ZU0yUFQyMm1sOElsVkJBQ2tEaUlvQklnRjhJaEVnRHlBSmhZTWdDWVY4SUJGQ01va2dFVUl1aVlVZ0VVSVhpWVY4UXJqcW9wcS95N0NyT1h3aVZpQlNJRlFnQVlXRElGUWdBWU9GSUFGQ0pJa2dBVUllaVlVZ0FVSVppWVY4SUFOOElnSjhJZ044SUF3Z0VYd2dEU0FQZkNBT0lBbDhJQU1nRVNBUGhZTWdENFY4SUFOQ01va2dBMEl1aVlVZ0EwSVhpWVY4UXBtZ2w3Q2J2c1Q0MlFCOElnMGdBaUFCaFNCVWd5QUNJQUdEaFNBQ1FpU0pJQUpDSG9tRklBSkNHWW1GZkNCUmZDSUpmQ0lJSUFNZ0VZV0RJQkdGZkNBSVFqS0pJQWhDTG9tRklBaENGNG1GZkVLYm4rWDR5dFRnbjVKL2ZDSU9JQWtnQW9VZ0FZTWdDU0FDZzRVZ0NVSWtpU0FKUWg2SmhTQUpRaG1KaFh3Z1Uzd2lEM3dpRVNBSUlBT0ZneUFEaFh3Z0VVSXlpU0FSUWk2SmhTQVJRaGVKaFh4Q21JSzIwOTNhbDQ2cmYzd2lVU0FQSUFtRklBS0RJQThnQ1lPRklBOUNKSWtnRDBJZWlZVWdEMElaaVlWOElGVjhJZ0o4SWdNZ0VTQUloWU1nQ0lWOElBTkNNb2tnQTBJdWlZVWdBMElYaVlWOFFzS0VqSmlLMCtxRFdId2lVeUFDSUErRklBbURJQUlnRDRPRklBSkNKSWtnQWtJZWlZVWdBa0laaVlWOElGWjhJZ2w4SWd4OElCSWdBM3dnQ2lBUmZDQUVJQWg4SUF3Z0F5QVJoWU1nRVlWOElBeENNb2tnREVJdWlZVWdERUlYaVlWOFFyN2Z3YXVVNE5iQkVud2lCQ0FKSUFLRklBK0RJQWtnQW9PRklBbENKSWtnQ1VJZWlZVWdDVUlaaVlWOElBMThJZzk4SWhFZ0RDQURoWU1nQTRWOElCRkNNb2tnRVVJdWlZVWdFVUlYaVlWOFFvemxrdmZrdCtHWUpId2lDaUFQSUFtRklBS0RJQThnQ1lPRklBOUNKSWtnRDBJZWlZVWdEMElaaVlWOElBNThJZ0o4SWdNZ0VTQU1oWU1nRElWOElBTkNNb2tnQTBJdWlZVWdBMElYaVlWOFF1THAvcSs5dUorRzFRQjhJaElnQWlBUGhTQUpneUFDSUErRGhTQUNRaVNKSUFKQ0hvbUZJQUpDR1ltRmZDQlJmQ0lKZkNJSUlBTWdFWVdESUJHRmZDQUlRaktKSUFoQ0xvbUZJQWhDRjRtRmZFTHZrdTZUejY2WDMvSUFmQ0lYSUFrZ0FvVWdENE1nQ1NBQ2c0VWdDVUlraVNBSlFoNkpoU0FKUWhtSmhYd2dVM3dpRDN3aURId2dCeUFJZkNBRklBTjhJQkFnRVh3Z0RDQUlJQU9GZ3lBRGhYd2dERUl5aVNBTVFpNkpoU0FNUWhlSmhYeENzYTNhMk9PL3JPK0FmM3dpQXlBUElBbUZJQUtESUE4Z0NZT0ZJQTlDSklrZ0QwSWVpWVVnRDBJWmlZVjhJQVI4SWdWOElnSWdEQ0FJaFlNZ0NJVjhJQUpDTW9rZ0FrSXVpWVVnQWtJWGlZVjhRcldrbks3eTFJSHVtMzk4SWdnZ0JTQVBoU0FKZ3lBRklBK0RoU0FGUWlTSklBVkNIb21GSUFWQ0dZbUZmQ0FLZkNJR2ZDSUpJQUlnRElXRElBeUZmQ0FKUWpLSklBbENMb21GSUFsQ0Y0bUZmRUtVemFUN3pLNzh6VUY4SWd3Z0JpQUZoU0FQZ3lBR0lBV0RoU0FHUWlTSklBWkNIb21GSUFaQ0dZbUZmQ0FTZkNJSGZDSVBJQWtnQW9XRElBS0ZmQ0FQUWpLSklBOUNMb21GSUE5Q0Y0bUZmRUxTbGNYM21iamF6V1I4SWdRZ0J5QUdoU0FGZ3lBSElBYURoU0FIUWlTSklBZENIb21GSUFkQ0dZbUZmQ0FYZkNJRmZDSVJJQlI4SUJnZ0Qzd2dFeUFKZkNBTElBSjhJQkVnRHlBSmhZTWdDWVY4SUJGQ01va2dFVUl1aVlVZ0VVSVhpWVY4UXVQTHZNTGo4SkhmYjN3aUFpQUZJQWVGSUFhRElBVWdCNE9GSUFWQ0pJa2dCVUllaVlVZ0JVSVppWVY4SUFOOElnWjhJZ3NnRVNBUGhZTWdENFY4SUF0Q01va2dDMEl1aVlVZ0MwSVhpWVY4UXJXcnM5em91T2ZnRDN3aUNTQUdJQVdGSUFlRElBWWdCWU9GSUFaQ0pJa2dCa0llaVlVZ0JrSVppWVY4SUFoOElnZDhJaE1nQ3lBUmhZTWdFWVY4SUJOQ01va2dFMEl1aVlVZ0UwSVhpWVY4UXVXNHNyM0h1YWlHSkh3aUR5QUhJQWFGSUFXRElBY2dCb09GSUFkQ0pJa2dCMEllaVlVZ0IwSVppWVY4SUF4OElnVjhJaFFnRXlBTGhZTWdDNFY4SUJSQ01va2dGRUl1aVlVZ0ZFSVhpWVY4UXZXRXJNbjFqY3YwTFh3aUVTQUZJQWVGSUFhRElBVWdCNE9GSUFWQ0pJa2dCVUllaVlVZ0JVSVppWVY4SUFSOElnWjhJaGg4SUJvZ0ZId2dGU0FUZkNBWklBdDhJQmdnRkNBVGhZTWdFNFY4SUJoQ01va2dHRUl1aVlVZ0dFSVhpWVY4UW9QSm0vV21sYUc2eWdCOEloWWdCaUFGaFNBSGd5QUdJQVdEaFNBR1FpU0pJQVpDSG9tRklBWkNHWW1GZkNBQ2ZDSUhmQ0lMSUJnZ0ZJV0RJQlNGZkNBTFFqS0pJQXRDTG9tRklBdENGNG1GZkVMVTk0ZnF5N3VxMk53QWZDSVpJQWNnQm9VZ0JZTWdCeUFHZzRVZ0IwSWtpU0FIUWg2SmhTQUhRaG1KaFh3Z0NYd2lCWHdpRXlBTElCaUZneUFZaFh3Z0UwSXlpU0FUUWk2SmhTQVRRaGVKaFh4Q3RhZkZtS2liNHZ6MkFId2lHQ0FGSUFlRklBYURJQVVnQjRPRklBVkNKSWtnQlVJZWlZVWdCVUlaaVlWOElBOThJZ1o4SWhRZ0V5QUxoWU1nQzRWOElCUkNNb2tnRkVJdWlZVWdGRUlYaVlWOFFxdS9tL091cXBTZm1IOThJaG9nQmlBRmhTQUhneUFHSUFXRGhTQUdRaVNKSUFaQ0hvbUZJQVpDR1ltRmZDQVJmQ0lIZkNJVmZDQWNJQlI4SUI4Z0Uzd2dHeUFMZkNBVklCUWdFNFdESUJPRmZDQVZRaktKSUJWQ0xvbUZJQlZDRjRtRmZFS1E1TkR0MHMzeG1LaC9mQ0liSUFjZ0JvVWdCWU1nQnlBR2c0VWdCMElraVNBSFFoNkpoU0FIUWhtSmhYd2dGbndpQlh3aUN5QVZJQlNGZ3lBVWhYd2dDMEl5aVNBTFFpNkpoU0FMUWhlSmhYeEN2OExzeDRuNXlZR3dmM3dpRmlBRklBZUZJQWFESUFVZ0I0T0ZJQVZDSklrZ0JVSWVpWVVnQlVJWmlZVjhJQmw4SWdaOEloTWdDeUFWaFlNZ0ZZVjhJQk5DTW9rZ0UwSXVpWVVnRTBJWGlZVjhRdVNkdlBmNytOK3N2Mzk4SWhrZ0JpQUZoU0FIZ3lBR0lBV0RoU0FHUWlTSklBWkNIb21GSUFaQ0dZbUZmQ0FZZkNJSGZDSVVJQk1nQzRXRElBdUZmQ0FVUWpLSklCUkNMb21GSUJSQ0Y0bUZmRUxDbjZMdHMvNkM4RVo4SWhnZ0J5QUdoU0FGZ3lBSElBYURoU0FIUWlTSklBZENIb21GSUFkQ0dZbUZmQ0FhZkNJRmZDSVZmQ0FlSUJSOElDRWdFM3dnSFNBTGZDQVZJQlFnRTRXRElCT0ZmQ0FWUWpLSklCVkNMb21GSUJWQ0Y0bUZmRUtsenFxWSthamswMVY4SWhvZ0JTQUhoU0FHZ3lBRklBZURoU0FGUWlTSklBVkNIb21GSUFWQ0dZbUZmQ0FiZkNJR2ZDSUxJQlVnRklXRElCU0ZmQ0FMUWpLSklBdENMb21GSUF0Q0Y0bUZmRUx2aEk2QW51cVk1UVo4SWhzZ0JpQUZoU0FIZ3lBR0lBV0RoU0FHUWlTSklBWkNIb21GSUFaQ0dZbUZmQ0FXZkNJSGZDSVRJQXNnRllXRElCV0ZmQ0FUUWpLSklCTkNMb21GSUJOQ0Y0bUZmRUx3M0xuUThLektsQlI4SWhZZ0J5QUdoU0FGZ3lBSElBYURoU0FIUWlTSklBZENIb21GSUFkQ0dZbUZmQ0FaZkNJRmZDSVVJQk1nQzRXRElBdUZmQ0FVUWpLSklCUkNMb21GSUJSQ0Y0bUZmRUw4MzhpMjFOREMyeWQ4SWhrZ0JTQUhoU0FHZ3lBRklBZURoU0FGUWlTSklBVkNIb21GSUFWQ0dZbUZmQ0FZZkNJR2ZDSVZJQ2g4SUNRZ0ZId2dKeUFUZkNBaklBdDhJQlVnRkNBVGhZTWdFNFY4SUJWQ01va2dGVUl1aVlVZ0ZVSVhpWVY4UXFhU20rR0ZwOGlOTG53aUdDQUdJQVdGSUFlRElBWWdCWU9GSUFaQ0pJa2dCa0llaVlVZ0JrSVppWVY4SUJwOElnZDhJZ3NnRlNBVWhZTWdGSVY4SUF0Q01va2dDMEl1aVlVZ0MwSVhpWVY4UXUzVmtOYkZ2NXVXelFCOElob2dCeUFHaFNBRmd5QUhJQWFEaFNBSFFpU0pJQWRDSG9tRklBZENHWW1GZkNBYmZDSUZmQ0lUSUFzZ0ZZV0RJQldGZkNBVFFqS0pJQk5DTG9tRklCTkNGNG1GZkVMZjU5YnN1YUtEbk5NQWZDSWJJQVVnQjRVZ0JvTWdCU0FIZzRVZ0JVSWtpU0FGUWg2SmhTQUZRaG1KaFh3Z0Zud2lCbndpRkNBVElBdUZneUFMaFh3Z0ZFSXlpU0FVUWk2SmhTQVVRaGVKaFh4QzNzZTkzY2pxbklYbEFId2lGaUFHSUFXRklBZURJQVlnQllPRklBWkNKSWtnQmtJZWlZVWdCa0laaVlWOElCbDhJZ2Q4SWhWOElDWWdGSHdnS1NBVGZDQWxJQXQ4SUJVZ0ZDQVRoWU1nRTRWOElCVkNNb2tnRlVJdWlZVWdGVUlYaVlWOFFxamwzdU96MTRLMTlnQjhJaGtnQnlBR2hTQUZneUFISUFhRGhTQUhRaVNKSUFkQ0hvbUZJQWRDR1ltRmZDQVlmQ0lGZkNJTElCVWdGSVdESUJTRmZDQUxRaktKSUF0Q0xvbUZJQXRDRjRtRmZFTG0zYmEvNUtXeTRZRi9mQ0lZSUFVZ0I0VWdCb01nQlNBSGc0VWdCVUlraVNBRlFoNkpoU0FGUWhtSmhYd2dHbndpQm53aUV5QUxJQldGZ3lBVmhYd2dFMEl5aVNBVFFpNkpoU0FUUWhlSmhYeEN1K3FJcE5HUWk3bVNmM3dpR2lBR0lBV0ZJQWVESUFZZ0JZT0ZJQVpDSklrZ0JrSWVpWVVnQmtJWmlZVjhJQnQ4SWdkOEloUWdFeUFMaFlNZ0M0VjhJQlJDTW9rZ0ZFSXVpWVVnRkVJWGlZVjhRdVNHeE9lVWxQcmZvbjk4SWhzZ0J5QUdoU0FGZ3lBSElBYURoU0FIUWlTSklBZENIb21GSUFkQ0dZbUZmQ0FXZkNJRmZDSVZmQ0F2SUJSOElDc2dFM3dnTGlBTGZDQVZJQlFnRTRXRElCT0ZmQ0FWUWpLSklCVkNMb21GSUJWQ0Y0bUZmRUtCNElqaXU4bVpqYWgvZkNJV0lBVWdCNFVnQm9NZ0JTQUhnNFVnQlVJa2lTQUZRaDZKaFNBRlFobUpoWHdnR1h3aUJud2lDeUFWSUJTRmd5QVVoWHdnQzBJeWlTQUxRaTZKaFNBTFFoZUpoWHhDa2EvaWg0M3U0cVZDZkNJWklBWWdCWVVnQjRNZ0JpQUZnNFVnQmtJa2lTQUdRaDZKaFNBR1FobUpoWHdnR0h3aUIzd2lFeUFMSUJXRmd5QVZoWHdnRTBJeWlTQVRRaTZKaFNBVFFoZUpoWHhDc1B6U3NyQzBsTFpIZkNJWUlBY2dCb1VnQllNZ0J5QUdnNFVnQjBJa2lTQUhRaDZKaFNBSFFobUpoWHdnR253aUJYd2lGQ0FUSUF1Rmd5QUxoWHdnRkVJeWlTQVVRaTZKaFNBVVFoZUpoWHhDbUtTOXQ1MkR1c2xSZkNJYUlBVWdCNFVnQm9NZ0JTQUhnNFVnQlVJa2lTQUZRaDZKaFNBRlFobUpoWHdnRzN3aUJud2lGWHdnTVNBVWZDQXRJQk44SURBZ0Mzd2dGU0FVSUJPRmd5QVRoWHdnRlVJeWlTQVZRaTZKaFNBVlFoZUpoWHhDa05LV3E4WEV3Y3hXZkNJYklBWWdCWVVnQjRNZ0JpQUZnNFVnQmtJa2lTQUdRaDZKaFNBR1FobUpoWHdnRm53aUIzd2lDeUFWSUJTRmd5QVVoWHdnQzBJeWlTQUxRaTZKaFNBTFFoZUpoWHhDcXNERXU5V3dqWWQwZkNJV0lBY2dCb1VnQllNZ0J5QUdnNFVnQjBJa2lTQUhRaDZKaFNBSFFobUpoWHdnR1h3aUJYd2lFeUFMSUJXRmd5QVZoWHdnRTBJeWlTQVRRaTZKaFNBVFFoZUpoWHhDdUtQdmxZT09xTFVRZkNJWklBVWdCNFVnQm9NZ0JTQUhnNFVnQlVJa2lTQUZRaDZKaFNBRlFobUpoWHdnR0h3aUJud2lGQ0FUSUF1Rmd5QUxoWHdnRkVJeWlTQVVRaTZKaFNBVVFoZUpoWHhDeUtITHh1dWlzTklaZkNJWUlBWWdCWVVnQjRNZ0JpQUZnNFVnQmtJa2lTQUdRaDZKaFNBR1FobUpoWHdnR253aUIzd2lGU0EwZkNBM0lCUjhJRE1nRTN3Z05pQUxmQ0FWSUJRZ0U0V0RJQk9GZkNBVlFqS0pJQlZDTG9tRklCVkNGNG1GZkVMVDFvYUtoWUhibXg1OElob2dCeUFHaFNBRmd5QUhJQWFEaFNBSFFpU0pJQWRDSG9tRklBZENHWW1GZkNBYmZDSUZmQ0lMSUJVZ0ZJV0RJQlNGZkNBTFFqS0pJQXRDTG9tRklBdENGNG1GZkVLWjE3djh6ZW1kcENkOEloc2dCU0FIaFNBR2d5QUZJQWVEaFNBRlFpU0pJQVZDSG9tRklBVkNHWW1GZkNBV2ZDSUdmQ0lUSUFzZ0ZZV0RJQldGZkNBVFFqS0pJQk5DTG9tRklCTkNGNG1GZkVLb2tlMk0zcGF2MkRSOEloWWdCaUFGaFNBSGd5QUdJQVdEaFNBR1FpU0pJQVpDSG9tRklBWkNHWW1GZkNBWmZDSUhmQ0lVSUJNZ0M0V0RJQXVGZkNBVVFqS0pJQlJDTG9tRklCUkNGNG1GZkVManRLV3V2SmFEampsOEloa2dCeUFHaFNBRmd5QUhJQWFEaFNBSFFpU0pJQWRDSG9tRklBZENHWW1GZkNBWWZDSUZmQ0lWZkNBNUlCUjhJRFVnRTN3Z09DQUxmQ0FWSUJRZ0U0V0RJQk9GZkNBVlFqS0pJQlZDTG9tRklCVkNGNG1GZkVMTGxZYWFyc21xN000QWZDSVlJQVVnQjRVZ0JvTWdCU0FIZzRVZ0JVSWtpU0FGUWg2SmhTQUZRaG1KaFh3Z0dud2lCbndpQ3lBVklCU0ZneUFVaFh3Z0MwSXlpU0FMUWk2SmhTQUxRaGVKaFh4Qzg4YVB1L2ZKc3M3YkFId2lHaUFHSUFXRklBZURJQVlnQllPRklBWkNKSWtnQmtJZWlZVWdCa0laaVlWOElCdDhJZ2Q4SWhNZ0N5QVZoWU1nRllWOElCTkNNb2tnRTBJdWlZVWdFMElYaVlWOFFxUHh5clc5L3B1WDZBQjhJaHNnQnlBR2hTQUZneUFISUFhRGhTQUhRaVNKSUFkQ0hvbUZJQWRDR1ltRmZDQVdmQ0lGZkNJVUlCTWdDNFdESUF1RmZDQVVRaktKSUJSQ0xvbUZJQlJDRjRtRmZFTDg1Yjd2NWQzZ3gvUUFmQ0lXSUFVZ0I0VWdCb01nQlNBSGc0VWdCVUlraVNBRlFoNkpoU0FGUWhtSmhYd2dHWHdpQm53aUZYd2dPeUFVZkNBK0lCTjhJRG9nQzN3Z0ZTQVVJQk9GZ3lBVGhYd2dGVUl5aVNBVlFpNkpoU0FWUWhlSmhYeEM0TjdjbVBUdDJOTDRBSHdpR1NBR0lBV0ZJQWVESUFZZ0JZT0ZJQVpDSklrZ0JrSWVpWVVnQmtJWmlZVjhJQmg4SWdkOElnc2dGU0FVaFlNZ0ZJVjhJQXRDTW9rZ0MwSXVpWVVnQzBJWGlZVjhRdkxXd28vS2dwN2toSDk4SWhnZ0J5QUdoU0FGZ3lBSElBYURoU0FIUWlTSklBZENIb21GSUFkQ0dZbUZmQ0FhZkNJRmZDSVRJQXNnRllXRElCV0ZmQ0FUUWpLSklCTkNMb21GSUJOQ0Y0bUZmRUxzODVEVGdjSEE0NHgvZkNJYUlBVWdCNFVnQm9NZ0JTQUhnNFVnQlVJa2lTQUZRaDZKaFNBRlFobUpoWHdnRzN3aUJud2lGQ0FUSUF1Rmd5QUxoWHdnRkVJeWlTQVVRaTZKaFNBVVFoZUpoWHhDcUx5TW02TC92OStRZjN3aUd5QUdJQVdGSUFlRElBWWdCWU9GSUFaQ0pJa2dCa0llaVlVZ0JrSVppWVY4SUJaOElnZDhJaFY4SUVFZ0ZId2dRQ0FUZkNBOElBdDhJQlVnRkNBVGhZTWdFNFY4SUJWQ01va2dGVUl1aVlVZ0ZVSVhpWVY4UXVuN2l2UzluWnVvcEg5OEloWWdCeUFHaFNBRmd5QUhJQWFEaFNBSFFpU0pJQWRDSG9tRklBZENHWW1GZkNBWmZDSUZmQ0lMSUJVZ0ZJV0RJQlNGZkNBTFFqS0pJQXRDTG9tRklBdENGNG1GZkVLVjhwbVcrLzdvL0w1L2ZDSVpJQVVnQjRVZ0JvTWdCU0FIZzRVZ0JVSWtpU0FGUWg2SmhTQUZRaG1KaFh3Z0dId2lCbndpRXlBTElCV0ZneUFWaFh3Z0UwSXlpU0FUUWk2SmhTQVRRaGVKaFh4Q3E2YkptNjZlM3JoR2ZDSVlJQVlnQllVZ0I0TWdCaUFGZzRVZ0JrSWtpU0FHUWg2SmhTQUdRaG1KaFh3Z0dud2lCM3dpRkNBVElBdUZneUFMaFh3Z0ZFSXlpU0FVUWk2SmhTQVVRaGVKaFh4Q25NT1owZTdaejVOS2ZDSWFJQWNnQm9VZ0JZTWdCeUFHZzRVZ0IwSWtpU0FIUWg2SmhTQUhRaG1KaFh3Z0czd2lCWHdpRlNCSGZDQkRJQlI4SUVZZ0Uzd2dRaUFMZkNBVklCUWdFNFdESUJPRmZDQVZRaktKSUJWQ0xvbUZJQlZDRjRtRmZFS0hoSU9POHBpdXcxRjhJaHNnQlNBSGhTQUdneUFGSUFlRGhTQUZRaVNKSUFWQ0hvbUZJQVZDR1ltRmZDQVdmQ0lHZkNJTElCVWdGSVdESUJTRmZDQUxRaktKSUF0Q0xvbUZJQXRDRjRtRmZFS2Uxb1B2N0xxZjdXcDhJaFlnQmlBRmhTQUhneUFHSUFXRGhTQUdRaVNKSUFaQ0hvbUZJQVpDR1ltRmZDQVpmQ0lIZkNJVElBc2dGWVdESUJXRmZDQVRRaktKSUJOQ0xvbUZJQk5DRjRtRmZFTDRvcnZ6L3UvVHZuVjhJaGtnQnlBR2hTQUZneUFISUFhRGhTQUhRaVNKSUFkQ0hvbUZJQWRDR1ltRmZDQVlmQ0lGZkNJVUlCTWdDNFdESUF1RmZDQVVRaktKSUJSQ0xvbUZJQlJDRjRtRmZFSzYzOTJRcC9XWitBWjhJaHdnQlNBSGhTQUdneUFGSUFlRGhTQUZRaVNKSUFWQ0hvbUZJQVZDR1ltRmZDQWFmQ0lHZkNJVmZDQTlRaitKSUQxQ09JbUZJRDFDQjRpRklEbDhJRVY4SUVSQ0xZa2dSRUlEaVlVZ1JFSUdpSVY4SWhnZ0ZId2dTQ0FUZkNCRUlBdDhJQlVnRkNBVGhZTWdFNFY4SUJWQ01va2dGVUl1aVlVZ0ZVSVhpWVY4UXFheG9wYmF1Tit4Q253aUdpQUdJQVdGSUFlRElBWWdCWU9GSUFaQ0pJa2dCa0llaVlVZ0JrSVppWVY4SUJ0OElnZDhJZ3NnRlNBVWhZTWdGSVY4SUF0Q01va2dDMEl1aVlVZ0MwSVhpWVY4UXE2YjVQZkxnT2FmRVh3aUd5QUhJQWFGSUFXRElBY2dCb09GSUFkQ0pJa2dCMEllaVlVZ0IwSVppWVY4SUJaOElnVjhJaE1nQ3lBVmhZTWdGWVY4SUJOQ01va2dFMEl1aVlVZ0UwSVhpWVY4UXB1TzhaalI1c0s0RzN3aUhTQUZJQWVGSUFhRElBVWdCNE9GSUFWQ0pJa2dCVUllaVlVZ0JVSVppWVY4SUJsOElnWjhJaFFnRXlBTGhZTWdDNFY4SUJSQ01va2dGRUl1aVlVZ0ZFSVhpWVY4UW9UN2taalMvdDN0S0h3aUhpQUdJQVdGSUFlRElBWWdCWU9GSUFaQ0pJa2dCa0llaVlVZ0JrSVppWVY4SUJ4OElnZDhJaFY4SUQ5Q1A0a2dQMEk0aVlVZ1AwSUhpSVVnTzN3Z1Izd2dQa0kvaVNBK1FqaUpoU0ErUWdlSWhTQTZmQ0JHZkNBWVFpMkpJQmhDQTRtRklCaENCb2lGZkNJV1FpMkpJQlpDQTRtRklCWkNCb2lGZkNJWklCUjhJRW9nRTN3Z0ZpQUxmQ0FWSUJRZ0U0V0RJQk9GZkNBVlFqS0pJQlZDTG9tRklCVkNGNG1GZkVLVHlaeUd0TytxNVRKOElnc2dCeUFHaFNBRmd5QUhJQWFEaFNBSFFpU0pJQWRDSG9tRklBZENHWW1GZkNBYWZDSUZmQ0lUSUJVZ0ZJV0RJQlNGZkNBVFFqS0pJQk5DTG9tRklCTkNGNG1GZkVLOC9hYXVvY0d2enp4OElob2dCU0FIaFNBR2d5QUZJQWVEaFNBRlFpU0pJQVZDSG9tRklBVkNHWW1GZkNBYmZDSUdmQ0lVSUJNZ0ZZV0RJQldGZkNBVVFqS0pJQlJDTG9tRklCUkNGNG1GZkVMTW1zRGd5ZmpaanNNQWZDSWJJQVlnQllVZ0I0TWdCaUFGZzRVZ0JrSWtpU0FHUWg2SmhTQUdRaG1KaFh3Z0hYd2lCM3dpRlNBVUlCT0ZneUFUaFh3Z0ZVSXlpU0FWUWk2SmhTQVZRaGVKaFh4Q3RvWDUyZXlYOWVMTUFId2lIQ0FISUFhRklBV0RJQWNnQm9PRklBZENKSWtnQjBJZWlZVWdCMElaaVlWOElCNThJZ1Y4SWhZZ1RYdzNBOENLQVVFQUlGQWdCU0FIaFNBR2d5QUZJQWVEaFNBRlFpU0pJQVZDSG9tRklBVkNHWW1GZkNBTGZDSUdJQVdGSUFlRElBWWdCWU9GSUFaQ0pJa2dCa0llaVlVZ0JrSVppWVY4SUJwOElnY2dCb1VnQllNZ0J5QUdnNFVnQjBJa2lTQUhRaDZKaFNBSFFobUpoWHdnRzN3aUJTQUhoU0FHZ3lBRklBZURoU0FGUWlTSklBVkNIb21GSUFWQ0dZbUZmQ0FjZkNJTGZEY0RvSW9CUVFBZ1RpQkFRaitKSUVCQ09JbUZJRUJDQjRpRklEeDhJRWg4SUJsQ0xZa2dHVUlEaVlVZ0dVSUdpSVY4SWhrZ0Uzd2dGaUFWSUJTRmd5QVVoWHdnRmtJeWlTQVdRaTZKaFNBV1FoZUpoWHhDcXZ5VjQ4K3p5ci9aQUh3aUdpQUdmQ0lUZkRjRHVJb0JRUUFnVWlBTElBV0ZJQWVESUFzZ0JZT0ZJQXRDSklrZ0MwSWVpWVVnQzBJWmlZVjhJQnA4SWdaOE53T1lpZ0ZCQUNCUElFRkNQNGtnUVVJNGlZVWdRVUlIaUlVZ1FId2dHSHdnUzBJdGlTQkxRZ09KaFNCTFFnYUloWHdnRkh3Z0V5QVdJQldGZ3lBVmhYd2dFMEl5aVNBVFFpNkpoU0FUUWhlSmhYeEM3UFhiMXJQMTIrWGZBSHdpR0NBSGZDSVVmRGNEc0lvQlFRQWdWQ0FHSUF1RklBV0RJQVlnQzRPRklBWkNKSWtnQmtJZWlZVWdCa0laaVlWOElCaDhJZ2Q4TndPUWlnRkJBQ0JNSUVWQ1A0a2dSVUk0aVlVZ1JVSUhpSVVnUVh3Z1NYd2dHVUl0aVNBWlFnT0poU0FaUWdhSWhYd2dGWHdnRkNBVElCYUZneUFXaFh3Z0ZFSXlpU0FVUWk2SmhTQVVRaGVKaFh4Q2w3Q2Qwc1N4aHFMc0FId2lFeUFGZkh3M0E2aUtBVUVBSUFFZ0J5QUdoU0FMZ3lBSElBYURoU0FIUWlTSklBZENIb21GSUFkQ0dZbUZmQ0FUZkh3M0E0aUtBUXYzQ1FJQmZnUi9RUUFwQTRDS0FTSUFwMEVEZGtFUGNTSUJRUU4wUVlDSkFXb2lBaUFDS1FNQVFuOGdBRUlEaGlJQWhrSi9oWU5DZ0FFZ0FJYUZOd01BSUFGQkFXb2hBd0pBSUFGQkRra05BQUpBSUFOQkQwY05BRUVBUWdBM0EvaUpBUXRCZ0lrQkVBTkJBQ0VEQ3lBRElRSUNRRUVISUFOclFRZHhJZ1JGRFFBZ0EwRURkRUdBaVFGcUlRRWdBeUVDQTBBZ0FVSUFOd01BSUFGQkNHb2hBU0FDUVFGcUlRSWdCRUYvYWlJRURRQUxDd0pBSUFOQmVHcEJCMGtOQUNBQ1FRTjBJUUVEUUNBQlFiaUpBV3BDQURjREFDQUJRYkNKQVdwQ0FEY0RBQ0FCUWFpSkFXcENBRGNEQUNBQlFhQ0pBV3BDQURjREFDQUJRWmlKQVdwQ0FEY0RBQ0FCUVpDSkFXcENBRGNEQUNBQlFZaUpBV3BDQURjREFDQUJRWUNKQVdwQ0FEY0RBQ0FCUWNBQWFpSUJRZmdBUncwQUN3dEJBQ0VCUVFCQkFDa0RnSW9CSWdCQ080WWdBRUlyaGtLQWdJQ0FnSURBL3dDRGhDQUFRaHVHUW9DQWdJQ0E0RCtESUFCQ0M0WkNnSUNBZ1BBZmc0U0VJQUJDQlloQ2dJQ0ErQStESUFCQ0ZZaENnSUQ4QjRPRUlBQkNKWWhDZ1A0RGd5QUFRZ09HUWppSWhJU0VOd1A0aVFGQmdJa0JFQU5CQUVFQUtRUEFpZ0VpQUVJNGhpQUFRb0QrQTROQ0tJYUVJQUJDZ0lEOEI0TkNHSVlnQUVLQWdJRDRENE5DQ0lhRWhDQUFRZ2lJUW9DQWdQZ1BneUFBUWhpSVFvQ0EvQWVEaENBQVFpaUlRb0QrQTRNZ0FFSTRpSVNFaERjRHdJb0JRUUJCQUNrRHVJb0JJZ0JDT0lZZ0FFS0EvZ09EUWlpR2hDQUFRb0NBL0FlRFFoaUdJQUJDZ0lDQStBK0RRZ2lHaElRZ0FFSUlpRUtBZ0lENEQ0TWdBRUlZaUVLQWdQd0hnNFFnQUVJb2lFS0EvZ09ESUFCQ09JaUVoSVEzQTdpS0FVRUFRUUFwQTdDS0FTSUFRamlHSUFCQ2dQNERnMElvaG9RZ0FFS0FnUHdIZzBJWWhpQUFRb0NBZ1BnUGcwSUlob1NFSUFCQ0NJaENnSUNBK0ErRElBQkNHSWhDZ0lEOEI0T0VJQUJDS0loQ2dQNERneUFBUWppSWhJU0VOd093aWdGQkFFRUFLUU9vaWdFaUFFSTRoaUFBUW9EK0E0TkNLSWFFSUFCQ2dJRDhCNE5DR0lZZ0FFS0FnSUQ0RDROQ0NJYUVoQ0FBUWdpSVFvQ0FnUGdQZ3lBQVFoaUlRb0NBL0FlRGhDQUFRaWlJUW9EK0E0TWdBRUk0aUlTRWhEY0RxSW9CUVFCQkFDa0RvSW9CSWdCQ09JWWdBRUtBL2dPRFFpaUdoQ0FBUW9DQS9BZURRaGlHSUFCQ2dJQ0ErQStEUWdpR2hJUWdBRUlJaUVLQWdJRDRENE1nQUVJWWlFS0FnUHdIZzRRZ0FFSW9pRUtBL2dPRElBQkNPSWlFaElRM0E2Q0tBVUVBUVFBcEE1aUtBU0lBUWppR0lBQkNnUDREZzBJb2hvUWdBRUtBZ1B3SGcwSVloaUFBUW9DQWdQZ1BnMElJaG9TRUlBQkNDSWhDZ0lDQStBK0RJQUJDR0loQ2dJRDhCNE9FSUFCQ0tJaENnUDREZ3lBQVFqaUloSVNFTndPWWlnRkJBRUVBS1FPUWlnRWlBRUk0aGlBQVFvRCtBNE5DS0lhRUlBQkNnSUQ4QjROQ0dJWWdBRUtBZ0lENEQ0TkNDSWFFaENBQVFnaUlRb0NBZ1BnUGd5QUFRaGlJUW9DQS9BZURoQ0FBUWlpSVFvRCtBNE1nQUVJNGlJU0VoRGNEa0lvQlFRQkJBQ2tEaUlvQklnQkNPSVlnQUVLQS9nT0RRaWlHaENBQVFvQ0EvQWVEUWhpR0lBQkNnSUNBK0ErRFFnaUdoSVFnQUVJSWlFS0FnSUQ0RDRNZ0FFSVlpRUtBZ1B3SGc0UWdBRUlvaUVLQS9nT0RJQUJDT0lpRWhJUTNBNGlLQVFKQVFRQW9Bc2lLQVNJRVJRMEFRUUFoQWdOQUlBRkJnQWxxSUFGQmlJb0JhaTBBQURvQUFDQUJRUUZxSVFFZ0JDQUNRUUZxSWdKQi93RnhTdzBBQ3dzTEJnQkJnSWtCQzZFQ0FFRUFRZ0EzQTRDS0FVRUFRVEJCd0FBZ0FVR0FBMFlpQVJzMkFzaUtBVUVBUXFTZjZmZmJnOUxheHdCQytjTDRtNUdqcy9EYkFDQUJHemNEd0lvQlFRQkNwNS9tcDliQmk0WmJRdXY2aHRxL3RmYkJIeUFCR3pjRHVJb0JRUUJDa2FyZ3d2YlFrdHFPZjBLZjJQblp3cEhhZ3B0L0lBRWJOd093aWdGQkFFS3hsb0QrLzh6Sm1lY0FRdEdGbXUvNno1U0gwUUFnQVJzM0E2aUtBVUVBUXJteXViaVBtL3VYRlVMeDdmVDRwYWY5cDZWL0lBRWJOd09naWdGQkFFS1h1c09EbzZ2QXJKRi9RcXZ3MC9TdjdyeTNQQ0FCR3pjRG1Jb0JRUUJDaDZyenM2T2xpczNpQUVLN3pxcW0yTkRyczd0L0lBRWJOd09RaWdGQkFFTFl2WmFJM0t2bjNVdENpSkx6bmYvTStZVHFBQ0FCR3pjRGlJb0JJQUFRQWhBRUN3c0xBUUJCZ0FnTEJOQUFBQUE9XCI7XG4gICAgdmFyIGhhc2gkOSA9IFwiY2RkNTdmNmFcIjtcbiAgICB2YXIgd2FzbUpzb24kOSA9IHtcbiAgICBcdG5hbWU6IG5hbWUkOSxcbiAgICBcdGRhdGE6IGRhdGEkOSxcbiAgICBcdGhhc2g6IGhhc2gkOVxuICAgIH07XG5cbiAgICBjb25zdCBtdXRleCQ4ID0gbmV3IE11dGV4KCk7XG4gICAgbGV0IHdhc21DYWNoZSQ4ID0gbnVsbDtcbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGVzIFNIQS0yIChTSEEtMzg0KSBoYXNoXG4gICAgICogQHBhcmFtIGRhdGEgSW5wdXQgZGF0YSAoc3RyaW5nLCBCdWZmZXIgb3IgVHlwZWRBcnJheSlcbiAgICAgKiBAcmV0dXJucyBDb21wdXRlZCBoYXNoIGFzIGEgaGV4YWRlY2ltYWwgc3RyaW5nXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2hhMzg0KGRhdGEpIHtcbiAgICAgICAgaWYgKHdhc21DYWNoZSQ4ID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9ja2VkQ3JlYXRlKG11dGV4JDgsIHdhc21Kc29uJDksIDQ4KVxuICAgICAgICAgICAgICAgIC50aGVuKCh3YXNtKSA9PiB7XG4gICAgICAgICAgICAgICAgd2FzbUNhY2hlJDggPSB3YXNtO1xuICAgICAgICAgICAgICAgIHJldHVybiB3YXNtQ2FjaGUkOC5jYWxjdWxhdGUoZGF0YSwgMzg0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBoYXNoID0gd2FzbUNhY2hlJDguY2FsY3VsYXRlKGRhdGEsIDM4NCk7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGhhc2gpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgU0hBLTIgKFNIQS0zODQpIGhhc2ggaW5zdGFuY2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVTSEEzODQoKSB7XG4gICAgICAgIHJldHVybiBXQVNNSW50ZXJmYWNlKHdhc21Kc29uJDksIDQ4KS50aGVuKCh3YXNtKSA9PiB7XG4gICAgICAgICAgICB3YXNtLmluaXQoMzg0KTtcbiAgICAgICAgICAgIGNvbnN0IG9iaiA9IHtcbiAgICAgICAgICAgICAgICBpbml0OiAoKSA9PiB7IHdhc20uaW5pdCgzODQpOyByZXR1cm4gb2JqOyB9LFxuICAgICAgICAgICAgICAgIHVwZGF0ZTogKGRhdGEpID0+IHsgd2FzbS51cGRhdGUoZGF0YSk7IHJldHVybiBvYmo7IH0sXG4gICAgICAgICAgICAgICAgZGlnZXN0OiAob3V0cHV0VHlwZSkgPT4gd2FzbS5kaWdlc3Qob3V0cHV0VHlwZSksXG4gICAgICAgICAgICAgICAgc2F2ZTogKCkgPT4gd2FzbS5zYXZlKCksXG4gICAgICAgICAgICAgICAgbG9hZDogKGRhdGEpID0+IHsgd2FzbS5sb2FkKGRhdGEpOyByZXR1cm4gb2JqOyB9LFxuICAgICAgICAgICAgICAgIGJsb2NrU2l6ZTogMTI4LFxuICAgICAgICAgICAgICAgIGRpZ2VzdFNpemU6IDQ4LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IG11dGV4JDcgPSBuZXcgTXV0ZXgoKTtcbiAgICBsZXQgd2FzbUNhY2hlJDcgPSBudWxsO1xuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZXMgU0hBLTIgKFNIQS01MTIpIGhhc2hcbiAgICAgKiBAcGFyYW0gZGF0YSBJbnB1dCBkYXRhIChzdHJpbmcsIEJ1ZmZlciBvciBUeXBlZEFycmF5KVxuICAgICAqIEByZXR1cm5zIENvbXB1dGVkIGhhc2ggYXMgYSBoZXhhZGVjaW1hbCBzdHJpbmdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaGE1MTIoZGF0YSkge1xuICAgICAgICBpZiAod2FzbUNhY2hlJDcgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NrZWRDcmVhdGUobXV0ZXgkNywgd2FzbUpzb24kOSwgNjQpXG4gICAgICAgICAgICAgICAgLnRoZW4oKHdhc20pID0+IHtcbiAgICAgICAgICAgICAgICB3YXNtQ2FjaGUkNyA9IHdhc207XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdhc21DYWNoZSQ3LmNhbGN1bGF0ZShkYXRhLCA1MTIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGhhc2ggPSB3YXNtQ2FjaGUkNy5jYWxjdWxhdGUoZGF0YSwgNTEyKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoaGFzaCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBTSEEtMiAoU0hBLTUxMikgaGFzaCBpbnN0YW5jZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVNIQTUxMigpIHtcbiAgICAgICAgcmV0dXJuIFdBU01JbnRlcmZhY2Uod2FzbUpzb24kOSwgNjQpLnRoZW4oKHdhc20pID0+IHtcbiAgICAgICAgICAgIHdhc20uaW5pdCg1MTIpO1xuICAgICAgICAgICAgY29uc3Qgb2JqID0ge1xuICAgICAgICAgICAgICAgIGluaXQ6ICgpID0+IHsgd2FzbS5pbml0KDUxMik7IHJldHVybiBvYmo7IH0sXG4gICAgICAgICAgICAgICAgdXBkYXRlOiAoZGF0YSkgPT4geyB3YXNtLnVwZGF0ZShkYXRhKTsgcmV0dXJuIG9iajsgfSxcbiAgICAgICAgICAgICAgICBkaWdlc3Q6IChvdXRwdXRUeXBlKSA9PiB3YXNtLmRpZ2VzdChvdXRwdXRUeXBlKSxcbiAgICAgICAgICAgICAgICBzYXZlOiAoKSA9PiB3YXNtLnNhdmUoKSxcbiAgICAgICAgICAgICAgICBsb2FkOiAoZGF0YSkgPT4geyB3YXNtLmxvYWQoZGF0YSk7IHJldHVybiBvYmo7IH0sXG4gICAgICAgICAgICAgICAgYmxvY2tTaXplOiAxMjgsXG4gICAgICAgICAgICAgICAgZGlnZXN0U2l6ZTogNjQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdmFyIG5hbWUkOCA9IFwieHhoYXNoMzJcIjtcbiAgICB2YXIgZGF0YSQ4ID0gXCJBR0Z6YlFFQUFBQUJFUVJnQUFGL1lBRi9BR0FBQUdBQ2YzOEFBd2NHQUFFQkFnQURCUVFCQVFJQ0JnNENmd0ZCc0lrRkMzOEFRWUFJQ3dkd0NBWnRaVzF2Y25rQ0FBNUlZWE5vWDBkbGRFSjFabVpsY2dBQUNVaGhjMmhmU1c1cGRBQUJDMGhoYzJoZlZYQmtZWFJsQUFJS1NHRnphRjlHYVc1aGJBQUREVWhoYzJoZlIyVjBVM1JoZEdVQUJBNUlZWE5vWDBOaGJHTjFiR0YwWlFBRkNsTlVRVlJGWDFOSldrVURBUXF4RUFZRkFFR0FDUXROQUVFQVFnQTNBNmlKQVVFQUlBQTJBb2lKQVVFQUlBQkJ6NHlpamdacU5nS01pUUZCQUNBQVFmZVVyNjk0YWpZQ2hJa0JRUUFnQUVHb2lJMmhBbW8yQW9DSkFVRUFRUUEyQXFDSkFRdTRDQUVIZndKQUlBQkZEUUJCQUVFQUtRT29pUUVnQUsxOE53T29pUUVDUUVFQUtBS2dpUUVpQVNBQWFrRVBTdzBBQWtBQ1FDQUFRUU54SWdJTkFFR0FDU0VESUFBaEJBd0JDeUFBUVh4eElRUkJnQWtoQXdOQVFRQkJBQ2dDb0lrQklnVkJBV28yQXFDSkFTQUZRWkNKQVdvZ0F5MEFBRG9BQUNBRFFRRnFJUU1nQWtGL2FpSUNEUUFMQ3lBQVFRUkpEUUVEUUVFQVFRQW9BcUNKQVNJQ1FRRnFOZ0tnaVFFZ0FrR1FpUUZxSUFNdEFBQTZBQUFnQTBFQmFpMEFBQ0VDUVFCQkFDZ0NvSWtCSWdWQkFXbzJBcUNKQVNBRlFaQ0pBV29nQWpvQUFDQURRUUpxTFFBQUlRSkJBRUVBS0FLZ2lRRWlCVUVCYWpZQ29Ja0JJQVZCa0lrQmFpQUNPZ0FBSUFOQkEyb3RBQUFoQWtFQVFRQW9BcUNKQVNJRlFRRnFOZ0tnaVFFZ0JVR1FpUUZxSUFJNkFBQWdBMEVFYWlFRElBUkJmR29pQkEwQURBSUxDeUFBUWZBSWFpRUdBa0FDUUNBQkRRQkJBQ2dDaklrQklRSkJBQ2dDaUlrQklRVkJBQ2dDaElrQklRUkJBQ2dDZ0lrQklRRkJnQWtoQXd3QkMwR0FDU0VEQWtBZ0FVRVBTdzBBUVlBSklRTUNRQUpBUVFBZ0FXdEJBM0VpQkEwQUlBRWhCUXdCQ3lBQklRSURRRUVBSUFKQkFXb2lCVFlDb0lrQklBSkJrSWtCYWlBRExRQUFPZ0FBSUFOQkFXb2hBeUFGSVFJZ0JFRi9haUlFRFFBTEN5QUJRWE5xUVFOSkRRQkJBQ0VFQTBBZ0F5QUVhaUlCTFFBQUlRZEJBQ0FGSUFScUlnSkJBV28yQXFDSkFTQUNRWkNKQVdvZ0J6b0FBQ0FCUVFGcUxRQUFJUWRCQUNBQ1FRSnFOZ0tnaVFFZ0FrR1JpUUZxSUFjNkFBQWdBVUVDYWkwQUFDRUhRUUFnQWtFRGFqWUNvSWtCSUFKQmtva0JhaUFIT2dBQUlBRkJBMm90QUFBaEFVRUFJQUpCQkdvMkFxQ0pBU0FDUVpPSkFXb2dBVG9BQUNBRklBUkJCR29pQkdwQkVFY05BQXNnQXlBRWFpRURDMEVBUVFBb0FwQ0pBVUgzbEsrdmVHeEJBQ2dDZ0lrQmFrRU5kMEd4ODkzeGVXd2lBVFlDZ0lrQlFRQkJBQ2dDbElrQlFmZVVyNjk0YkVFQUtBS0VpUUZxUVExM1FiSHozZkY1YkNJRU5nS0VpUUZCQUVFQUtBS1lpUUZCOTVTdnIzaHNRUUFvQW9pSkFXcEJEWGRCc2ZQZDhYbHNJZ1UyQW9pSkFVRUFRUUFvQXB5SkFVSDNsSyt2ZUd4QkFDZ0NqSWtCYWtFTmQwR3g4OTN4ZVd3aUFqWUNqSWtCQ3lBQVFZQUphaUVBQWtBZ0F5QUdTdzBBQTBBZ0F5Z0NBRUgzbEsrdmVHd2dBV3BCRFhkQnNmUGQ4WGxzSVFFZ0EwRU1haWdDQUVIM2xLK3ZlR3dnQW1wQkRYZEJzZlBkOFhsc0lRSWdBMEVJYWlnQ0FFSDNsSyt2ZUd3Z0JXcEJEWGRCc2ZQZDhYbHNJUVVnQTBFRWFpZ0NBRUgzbEsrdmVHd2dCR3BCRFhkQnNmUGQ4WGxzSVFRZ0EwRVFhaUlESUFaTkRRQUxDMEVBSUFJMkFveUpBVUVBSUFVMkFvaUpBVUVBSUFRMkFvU0pBVUVBSUFFMkFvQ0pBVUVBSUFBZ0EyczJBcUNKQVNBQUlBTkdEUUJCQUNFQ0EwQWdBa0dRaVFGcUlBTWdBbW90QUFBNkFBQWdBa0VCYWlJQ1FRQW9BcUNKQVVrTkFBc0xDNlFEQWdGK0JuOUJBQ2tEcUlrQklnQ25JUUVDUUFKQUlBQkNFRlFOQUVFQUtBS0VpUUZCQjNkQkFDZ0NnSWtCUVFGM2FrRUFLQUtJaVFGQkRIZHFRUUFvQW95SkFVRVNkMm9oQWd3QkMwRUFLQUtJaVFGQnNjL1pzZ0ZxSVFJTElBSWdBV29oQWtHUWlRRWhBd0pBUVFBb0FxQ0pBU0lFUVpDSkFXb2lCVUdVaVFGSkRRQkJrSWtCSVFFRFFDQUJLQUlBUWIzY3lwVjhiQ0FDYWtFUmQwR3YxdE8rQW13aEFpQUJRUWhxSVFZZ0FVRUVhaUlESVFFZ0JpQUZUUTBBQ3dzQ1FDQURJQVZHRFFBZ0JFR1BpUUZxSVFZQ1FBSkFJQVFnQTJ0QkFYRU5BQ0FESVFFTUFRc2dBMEVCYWlFQklBTXRBQUJCc2MvWnNnRnNJQUpxUVF0M1FiSHozZkY1YkNFQ0N5QUdJQU5HRFFBRFFDQUJRUUZxTFFBQVFiSFAyYklCYkNBQkxRQUFRYkhQMmJJQmJDQUNha0VMZDBHeDg5M3hlV3hxUVF0M1FiSHozZkY1YkNFQ0lBRkJBbW9pQVNBRlJ3MEFDd3RCQUNBQ1FROTJJQUp6UWZlVXI2OTRiQ0lCUVExMklBRnpRYjNjeXBWOGJDSUJRUkIySUFGeklnSkJHSFFnQWtHQS9nTnhRUWgwY2lBQlFRaDJRWUQrQTNFZ0FVRVlkbkp5clRjRGdBa0xCZ0JCZ0lrQkMvTURBZ0YrQkg5QkFFSUFOd09vaVFGQkFDQUJOZ0tJaVFGQkFDQUJRYytNb280R2FqWUNqSWtCUVFBZ0FVSDNsSyt2ZUdvMkFvU0pBVUVBSUFGQnFJaU5vUUpxTmdLQWlRRkJBRUVBTmdLZ2lRRWdBQkFDUVFBcEE2aUpBU0lDcHlFQkFrQUNRQ0FDUWhCVURRQkJBQ2dDaElrQlFRZDNRUUFvQW9DSkFVRUJkMnBCQUNnQ2lJa0JRUXgzYWtFQUtBS01pUUZCRW5kcUlRQU1BUXRCQUNnQ2lJa0JRYkhQMmJJQmFpRUFDeUFBSUFGcUlRQkJrSWtCSVFNQ1FFRUFLQUtnaVFFaUJFR1FpUUZxSWdWQmxJa0JTUTBBUVpDSkFTRUJBMEFnQVNnQ0FFRzkzTXFWZkd3Z0FHcEJFWGRCcjliVHZnSnNJUUFnQVVFSWFpRUdJQUZCQkdvaUF5RUJJQVlnQlUwTkFBc0xBa0FnQXlBRlJnMEFJQVJCajRrQmFpRUdBa0FDUUNBRUlBTnJRUUZ4RFFBZ0F5RUJEQUVMSUFOQkFXb2hBU0FETFFBQVFiSFAyYklCYkNBQWFrRUxkMEd4ODkzeGVXd2hBQXNnQmlBRFJnMEFBMEFnQVVFQmFpMEFBRUd4ejlteUFXd2dBUzBBQUVHeHo5bXlBV3dnQUdwQkMzZEJzZlBkOFhsc2FrRUxkMEd4ODkzeGVXd2hBQ0FCUVFKcUlnRWdCVWNOQUFzTFFRQWdBRUVQZGlBQWMwSDNsSyt2ZUd3aUFVRU5kaUFCYzBHOTNNcVZmR3dpQVVFUWRpQUJjeUlBUVJoMElBQkJnUDREY1VFSWRISWdBVUVJZGtHQS9nTnhJQUZCR0haeWNxMDNBNEFKQ3dzTEFRQkJnQWdMQkRBQUFBQT1cIjtcbiAgICB2YXIgaGFzaCQ4ID0gXCI5ZTNhMDBjZFwiO1xuICAgIHZhciB3YXNtSnNvbiQ4ID0ge1xuICAgIFx0bmFtZTogbmFtZSQ4LFxuICAgIFx0ZGF0YTogZGF0YSQ4LFxuICAgIFx0aGFzaDogaGFzaCQ4XG4gICAgfTtcblxuICAgIGNvbnN0IG11dGV4JDYgPSBuZXcgTXV0ZXgoKTtcbiAgICBsZXQgd2FzbUNhY2hlJDYgPSBudWxsO1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlU2VlZCQzKHNlZWQpIHtcbiAgICAgICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKHNlZWQpIHx8IHNlZWQgPCAwIHx8IHNlZWQgPiAweEZGRkZGRkZGKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdTZWVkIG11c3QgYmUgYSB2YWxpZCAzMi1iaXQgbG9uZyB1bnNpZ25lZCBpbnRlZ2VyLicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGVzIHh4SGFzaDMyIGhhc2hcbiAgICAgKiBAcGFyYW0gZGF0YSBJbnB1dCBkYXRhIChzdHJpbmcsIEJ1ZmZlciBvciBUeXBlZEFycmF5KVxuICAgICAqIEBwYXJhbSBzZWVkIE51bWJlciB1c2VkIHRvIGluaXRpYWxpemUgdGhlIGludGVybmFsIHN0YXRlIG9mIHRoZSBhbGdvcml0aG0gKGRlZmF1bHRzIHRvIDApXG4gICAgICogQHJldHVybnMgQ29tcHV0ZWQgaGFzaCBhcyBhIGhleGFkZWNpbWFsIHN0cmluZ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHh4aGFzaDMyKGRhdGEsIHNlZWQgPSAwKSB7XG4gICAgICAgIGlmICh2YWxpZGF0ZVNlZWQkMyhzZWVkKSkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHZhbGlkYXRlU2VlZCQzKHNlZWQpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAod2FzbUNhY2hlJDYgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NrZWRDcmVhdGUobXV0ZXgkNiwgd2FzbUpzb24kOCwgNClcbiAgICAgICAgICAgICAgICAudGhlbigod2FzbSkgPT4ge1xuICAgICAgICAgICAgICAgIHdhc21DYWNoZSQ2ID0gd2FzbTtcbiAgICAgICAgICAgICAgICByZXR1cm4gd2FzbUNhY2hlJDYuY2FsY3VsYXRlKGRhdGEsIHNlZWQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGhhc2ggPSB3YXNtQ2FjaGUkNi5jYWxjdWxhdGUoZGF0YSwgc2VlZCk7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGhhc2gpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgeHhIYXNoMzIgaGFzaCBpbnN0YW5jZVxuICAgICAqIEBwYXJhbSBkYXRhIElucHV0IGRhdGEgKHN0cmluZywgQnVmZmVyIG9yIFR5cGVkQXJyYXkpXG4gICAgICogQHBhcmFtIHNlZWQgTnVtYmVyIHVzZWQgdG8gaW5pdGlhbGl6ZSB0aGUgaW50ZXJuYWwgc3RhdGUgb2YgdGhlIGFsZ29yaXRobSAoZGVmYXVsdHMgdG8gMClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVYWEhhc2gzMihzZWVkID0gMCkge1xuICAgICAgICBpZiAodmFsaWRhdGVTZWVkJDMoc2VlZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCh2YWxpZGF0ZVNlZWQkMyhzZWVkKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFdBU01JbnRlcmZhY2Uod2FzbUpzb24kOCwgNCkudGhlbigod2FzbSkgPT4ge1xuICAgICAgICAgICAgd2FzbS5pbml0KHNlZWQpO1xuICAgICAgICAgICAgY29uc3Qgb2JqID0ge1xuICAgICAgICAgICAgICAgIGluaXQ6ICgpID0+IHsgd2FzbS5pbml0KHNlZWQpOyByZXR1cm4gb2JqOyB9LFxuICAgICAgICAgICAgICAgIHVwZGF0ZTogKGRhdGEpID0+IHsgd2FzbS51cGRhdGUoZGF0YSk7IHJldHVybiBvYmo7IH0sXG4gICAgICAgICAgICAgICAgZGlnZXN0OiAob3V0cHV0VHlwZSkgPT4gd2FzbS5kaWdlc3Qob3V0cHV0VHlwZSksXG4gICAgICAgICAgICAgICAgc2F2ZTogKCkgPT4gd2FzbS5zYXZlKCksXG4gICAgICAgICAgICAgICAgbG9hZDogKGRhdGEpID0+IHsgd2FzbS5sb2FkKGRhdGEpOyByZXR1cm4gb2JqOyB9LFxuICAgICAgICAgICAgICAgIGJsb2NrU2l6ZTogMTYsXG4gICAgICAgICAgICAgICAgZGlnZXN0U2l6ZTogNCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgbmFtZSQ3ID0gXCJ4eGhhc2g2NFwiO1xuICAgIHZhciBkYXRhJDcgPSBcIkFHRnpiUUVBQUFBQkRBTmdBQUYvWUFBQVlBRi9BQU1IQmdBQkFnRUFBUVVFQVFFQ0FnWU9BbjhCUWRDSkJRdC9BRUdBQ0FzSGNBZ0diV1Z0YjNKNUFnQU9TR0Z6YUY5SFpYUkNkV1ptWlhJQUFBbElZWE5vWDBsdWFYUUFBUXRJWVhOb1gxVndaR0YwWlFBQ0NraGhjMmhmUm1sdVlXd0FBdzFJWVhOb1gwZGxkRk4wWVhSbEFBUU9TR0Z6YUY5RFlXeGpkV3hoZEdVQUJRcFRWRUZVUlY5VFNWcEZBd0VLOUE4R0JRQkJnQWtMWXdFQmZrRUFRZ0EzQThpSkFVRUFRUUFwQTRBSklnQTNBNUNKQVVFQUlBQkMrZXJRME9mSm9lVGhBSHczQTVpSkFVRUFJQUJDejliVHZ0TEhxOWxDZkRjRGlJa0JRUUFnQUVMVzY0THU2djJKOWVBQWZEY0RnSWtCUVFCQkFEWUN3SWtCQzcwSUF3Vi9CSDRDZndKQUlBQkZEUUJCQUVFQUtRUElpUUVnQUsxOE53UElpUUVDUUVFQUtBTEFpUUVpQVNBQWFrRWZTdzBBQWtBQ1FDQUFRUU54SWdJTkFFR0FDU0VESUFBaEFRd0JDeUFBUVh4eElRRkJnQWtoQXdOQVFRQkJBQ2dDd0lrQklnUkJBV28yQXNDSkFTQUVRYUNKQVdvZ0F5MEFBRG9BQUNBRFFRRnFJUU1nQWtGL2FpSUNEUUFMQ3lBQVFRUkpEUUVEUUVFQVFRQW9Bc0NKQVNJQ1FRRnFOZ0xBaVFFZ0FrR2dpUUZxSUFNdEFBQTZBQUFnQTBFQmFpMEFBQ0VDUVFCQkFDZ0N3SWtCSWdSQkFXbzJBc0NKQVNBRVFhQ0pBV29nQWpvQUFDQURRUUpxTFFBQUlRSkJBRUVBS0FMQWlRRWlCRUVCYWpZQ3dJa0JJQVJCb0lrQmFpQUNPZ0FBSUFOQkEyb3RBQUFoQWtFQVFRQW9Bc0NKQVNJRVFRRnFOZ0xBaVFFZ0JFR2dpUUZxSUFJNkFBQWdBMEVFYWlFRElBRkJmR29pQVEwQURBSUxDeUFBUWVBSWFpRUZBa0FDUUNBQkRRQkJBQ2tEbUlrQklRWkJBQ2tEa0lrQklRZEJBQ2tEaUlrQklRaEJBQ2tEZ0lrQklRbEJnQWtoQXd3QkMwR0FDU0VEQWtBZ0FVRWZTdzBBUVlBSklRTUNRQUpBUVFBZ0FXdEJBM0VpQkEwQUlBRWhBZ3dCQ3lBQklRSURRQ0FDUWFDSkFXb2dBeTBBQURvQUFDQUNRUUZxSVFJZ0EwRUJhaUVESUFSQmYyb2lCQTBBQ3dzZ0FVRmpha0VEU1EwQVFTQWdBbXNoQ2tFQUlRUURRQ0FDSUFScUlnRkJvSWtCYWlBRElBUnFJZ3N0QUFBNkFBQWdBVUdoaVFGcUlBdEJBV290QUFBNkFBQWdBVUdpaVFGcUlBdEJBbW90QUFBNkFBQWdBVUdqaVFGcUlBdEJBMm90QUFBNkFBQWdDaUFFUVFScUlnUkhEUUFMSUFNZ0JHb2hBd3RCQUVFQUtRT2dpUUZDejliVHZ0TEhxOWxDZmtFQUtRT0FpUUY4UWgrSlFvZVZyNitZdHQ2Ym5uOStJZ2szQTRDSkFVRUFRUUFwQTZpSkFVTFAxdE8rMHNlcjJVSitRUUFwQTRpSkFYeENINGxDaDVXdnI1aTIzcHVlZjM0aUNEY0RpSWtCUVFCQkFDa0RzSWtCUXMvVzA3N1N4NnZaUW41QkFDa0RrSWtCZkVJZmlVS0hsYSt2bUxiZW01NS9maUlITndPUWlRRkJBRUVBS1FPNGlRRkN6OWJUdnRMSHE5bENma0VBS1FPWWlRRjhRaCtKUW9lVnI2K1l0dDZibm45K0lnWTNBNWlKQVFzZ0FFR0FDV29oQWdKQUlBTWdCVXNOQUFOQUlBTXBBd0JDejliVHZ0TEhxOWxDZmlBSmZFSWZpVUtIbGErdm1MYmVtNTUvZmlFSklBTkJHR29wQXdCQ3o5YlR2dExIcTlsQ2ZpQUdmRUlmaVVLSGxhK3ZtTGJlbTU1L2ZpRUdJQU5CRUdvcEF3QkN6OWJUdnRMSHE5bENmaUFIZkVJZmlVS0hsYSt2bUxiZW01NS9maUVISUFOQkNHb3BBd0JDejliVHZ0TEhxOWxDZmlBSWZFSWZpVUtIbGErdm1MYmVtNTUvZmlFSUlBTkJJR29pQXlBRlRRMEFDd3RCQUNBR053T1lpUUZCQUNBSE53T1FpUUZCQUNBSU53T0lpUUZCQUNBSk53T0FpUUZCQUNBQ0lBTnJOZ0xBaVFFZ0FpQURSZzBBUVFBaEFnTkFJQUpCb0lrQmFpQURJQUpxTFFBQU9nQUFJQUpCQVdvaUFrRUFLQUxBaVFGSkRRQUxDd3UrQmdJRmZnVi9Ba0FDUUVFQUtRUElpUUVpQUVJZ1ZBMEFRUUFwQTRpSkFTSUJRZ2VKUVFBcEE0Q0pBU0lDUWdHSmZFRUFLUU9RaVFFaUEwSU1pWHhCQUNrRG1Ja0JJZ1JDRW9sOElBSkN6OWJUdnRMSHE5bENma0lmaVVLSGxhK3ZtTGJlbTU1L2ZvVkNoNVd2cjVpMjNwdWVmMzVDNDl6S2xmek84dldGZjN3Z0FVTFAxdE8rMHNlcjJVSitRaCtKUW9lVnI2K1l0dDZibm45K2hVS0hsYSt2bUxiZW01NS9ma0xqM01xVi9NN3k5WVYvZkNBRFFzL1cwNzdTeDZ2WlFuNUNINGxDaDVXdnI1aTIzcHVlZjM2RlFvZVZyNitZdHQ2Ym5uOStRdVBjeXBYOHp2TDFoWDk4SUFSQ3o5YlR2dExIcTlsQ2ZrSWZpVUtIbGErdm1MYmVtNTUvZm9WQ2g1V3ZyNWkyM3B1ZWYzNUM0OXpLbGZ6Tzh2V0ZmM3doQVF3QkMwRUFLUU9RaVFGQ3hjL1pzdkhsdXVvbmZDRUJDeUFCSUFCOElRQkJvSWtCSVFVQ1FFRUFLQUxBaVFFaUJrR2dpUUZxSWdkQnFJa0JTUTBBUWFDSkFTRUlBMEFnQ0NrREFFTFAxdE8rMHNlcjJVSitRaCtKUW9lVnI2K1l0dDZibm45K0lBQ0ZRaHVKUW9lVnI2K1l0dDZibm45K1F1UGN5cFg4enZMMWhYOThJUUFnQ0VFUWFpRUpJQWhCQ0dvaUJTRUlJQWtnQjAwTkFBc0xBa0FDUUNBRlFRUnFJZ2tnQjAwTkFDQUZJUWtNQVFzZ0JUVUNBRUtIbGErdm1MYmVtNTUvZmlBQWhVSVhpVUxQMXRPKzBzZXIyVUorUXZuejNmR1o5cG1yRm53aEFBc0NRQ0FKSUFkR0RRQWdCa0dmaVFGcUlRVUNRQUpBSUFZZ0NXdEJBWEVOQUNBSklRZ01BUXNnQ1VFQmFpRUlJQWt4QUFCQ3hjL1pzdkhsdXVvbmZpQUFoVUlMaVVLSGxhK3ZtTGJlbTU1L2ZpRUFDeUFGSUFsR0RRQURRQ0FJUVFGcU1RQUFRc1hQMmJMeDVicnFKMzRnQ0RFQUFFTEZ6OW15OGVXNjZpZCtJQUNGUWd1SlFvZVZyNitZdHQ2Ym5uOStoVUlMaVVLSGxhK3ZtTGJlbTU1L2ZpRUFJQWhCQW1vaUNDQUhSdzBBQ3d0QkFDQUFRaUdJSUFDRlFzL1cwNzdTeDZ2WlFuNGlBRUlkaUNBQWhVTDU4OTN4bWZhWnF4WitJZ0JDSUlnZ0FJVWlBVUk0aGlBQlFvRCtBNE5DS0lhRUlBRkNnSUQ4QjROQ0dJWWdBVUtBZ0lENEQ0TkNDSWFFaENBQVFnaUlRb0NBZ1BnUGd5QUFRaGlJUW9DQS9BZURoQ0FBUWlpSVFvRCtBNE1nQUVJNGlJU0VoRGNEZ0FrTEJnQkJnSWtCQ3dJQUN3c0xBUUJCZ0FnTEJGQUFBQUE9XCI7XG4gICAgdmFyIGhhc2gkNyA9IFwiZGM2MWI0ZTdcIjtcbiAgICB2YXIgd2FzbUpzb24kNyA9IHtcbiAgICBcdG5hbWU6IG5hbWUkNyxcbiAgICBcdGRhdGE6IGRhdGEkNyxcbiAgICBcdGhhc2g6IGhhc2gkN1xuICAgIH07XG5cbiAgICBjb25zdCBtdXRleCQ1ID0gbmV3IE11dGV4KCk7XG4gICAgbGV0IHdhc21DYWNoZSQ1ID0gbnVsbDtcbiAgICBjb25zdCBzZWVkQnVmZmVyJDIgPSBuZXcgQXJyYXlCdWZmZXIoOCk7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGVTZWVkJDIoc2VlZCkge1xuICAgICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIoc2VlZCkgfHwgc2VlZCA8IDAgfHwgc2VlZCA+IDB4RkZGRkZGRkYpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ1NlZWQgbXVzdCBiZSBnaXZlbiBhcyB0d28gdmFsaWQgMzItYml0IGxvbmcgdW5zaWduZWQgaW50ZWdlcnMgKGxvICsgaGlnaCkuJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHdyaXRlU2VlZCQyKGFyciwgbG93LCBoaWdoKSB7XG4gICAgICAgIC8vIHdyaXRlIGluIGxpdHRsZS1lbmRpYW4gZm9ybWF0XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBEYXRhVmlldyhhcnIpO1xuICAgICAgICBidWZmZXIuc2V0VWludDMyKDAsIGxvdywgdHJ1ZSk7XG4gICAgICAgIGJ1ZmZlci5zZXRVaW50MzIoNCwgaGlnaCwgdHJ1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZXMgeHhIYXNoNjQgaGFzaFxuICAgICAqIEBwYXJhbSBkYXRhIElucHV0IGRhdGEgKHN0cmluZywgQnVmZmVyIG9yIFR5cGVkQXJyYXkpXG4gICAgICogQHBhcmFtIHNlZWRMb3cgTG93ZXIgMzIgYml0cyBvZiB0aGUgbnVtYmVyIHVzZWQgdG9cbiAgICAgKiAgaW5pdGlhbGl6ZSB0aGUgaW50ZXJuYWwgc3RhdGUgb2YgdGhlIGFsZ29yaXRobSAoZGVmYXVsdHMgdG8gMClcbiAgICAgKiBAcGFyYW0gc2VlZEhpZ2ggSGlnaGVyIDMyIGJpdHMgb2YgdGhlIG51bWJlciB1c2VkIHRvXG4gICAgICogIGluaXRpYWxpemUgdGhlIGludGVybmFsIHN0YXRlIG9mIHRoZSBhbGdvcml0aG0gKGRlZmF1bHRzIHRvIDApXG4gICAgICogQHJldHVybnMgQ29tcHV0ZWQgaGFzaCBhcyBhIGhleGFkZWNpbWFsIHN0cmluZ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHh4aGFzaDY0KGRhdGEsIHNlZWRMb3cgPSAwLCBzZWVkSGlnaCA9IDApIHtcbiAgICAgICAgaWYgKHZhbGlkYXRlU2VlZCQyKHNlZWRMb3cpKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QodmFsaWRhdGVTZWVkJDIoc2VlZExvdykpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWxpZGF0ZVNlZWQkMihzZWVkSGlnaCkpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCh2YWxpZGF0ZVNlZWQkMihzZWVkSGlnaCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh3YXNtQ2FjaGUkNSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2tlZENyZWF0ZShtdXRleCQ1LCB3YXNtSnNvbiQ3LCA4KVxuICAgICAgICAgICAgICAgIC50aGVuKCh3YXNtKSA9PiB7XG4gICAgICAgICAgICAgICAgd2FzbUNhY2hlJDUgPSB3YXNtO1xuICAgICAgICAgICAgICAgIHdyaXRlU2VlZCQyKHNlZWRCdWZmZXIkMiwgc2VlZExvdywgc2VlZEhpZ2gpO1xuICAgICAgICAgICAgICAgIHdhc21DYWNoZSQ1LndyaXRlTWVtb3J5KG5ldyBVaW50OEFycmF5KHNlZWRCdWZmZXIkMikpO1xuICAgICAgICAgICAgICAgIHJldHVybiB3YXNtQ2FjaGUkNS5jYWxjdWxhdGUoZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgd3JpdGVTZWVkJDIoc2VlZEJ1ZmZlciQyLCBzZWVkTG93LCBzZWVkSGlnaCk7XG4gICAgICAgICAgICB3YXNtQ2FjaGUkNS53cml0ZU1lbW9yeShuZXcgVWludDhBcnJheShzZWVkQnVmZmVyJDIpKTtcbiAgICAgICAgICAgIGNvbnN0IGhhc2ggPSB3YXNtQ2FjaGUkNS5jYWxjdWxhdGUoZGF0YSk7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGhhc2gpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgeHhIYXNoNjQgaGFzaCBpbnN0YW5jZVxuICAgICAqIEBwYXJhbSBzZWVkTG93IExvd2VyIDMyIGJpdHMgb2YgdGhlIG51bWJlciB1c2VkIHRvXG4gICAgICogIGluaXRpYWxpemUgdGhlIGludGVybmFsIHN0YXRlIG9mIHRoZSBhbGdvcml0aG0gKGRlZmF1bHRzIHRvIDApXG4gICAgICogQHBhcmFtIHNlZWRIaWdoIEhpZ2hlciAzMiBiaXRzIG9mIHRoZSBudW1iZXIgdXNlZCB0b1xuICAgICAqICBpbml0aWFsaXplIHRoZSBpbnRlcm5hbCBzdGF0ZSBvZiB0aGUgYWxnb3JpdGhtIChkZWZhdWx0cyB0byAwKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVhYSGFzaDY0KHNlZWRMb3cgPSAwLCBzZWVkSGlnaCA9IDApIHtcbiAgICAgICAgaWYgKHZhbGlkYXRlU2VlZCQyKHNlZWRMb3cpKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QodmFsaWRhdGVTZWVkJDIoc2VlZExvdykpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWxpZGF0ZVNlZWQkMihzZWVkSGlnaCkpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCh2YWxpZGF0ZVNlZWQkMihzZWVkSGlnaCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBXQVNNSW50ZXJmYWNlKHdhc21Kc29uJDcsIDgpLnRoZW4oKHdhc20pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGluc3RhbmNlQnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKDgpO1xuICAgICAgICAgICAgd3JpdGVTZWVkJDIoaW5zdGFuY2VCdWZmZXIsIHNlZWRMb3csIHNlZWRIaWdoKTtcbiAgICAgICAgICAgIHdhc20ud3JpdGVNZW1vcnkobmV3IFVpbnQ4QXJyYXkoaW5zdGFuY2VCdWZmZXIpKTtcbiAgICAgICAgICAgIHdhc20uaW5pdCgpO1xuICAgICAgICAgICAgY29uc3Qgb2JqID0ge1xuICAgICAgICAgICAgICAgIGluaXQ6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgd2FzbS53cml0ZU1lbW9yeShuZXcgVWludDhBcnJheShpbnN0YW5jZUJ1ZmZlcikpO1xuICAgICAgICAgICAgICAgICAgICB3YXNtLmluaXQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHVwZGF0ZTogKGRhdGEpID0+IHsgd2FzbS51cGRhdGUoZGF0YSk7IHJldHVybiBvYmo7IH0sXG4gICAgICAgICAgICAgICAgZGlnZXN0OiAob3V0cHV0VHlwZSkgPT4gd2FzbS5kaWdlc3Qob3V0cHV0VHlwZSksXG4gICAgICAgICAgICAgICAgc2F2ZTogKCkgPT4gd2FzbS5zYXZlKCksXG4gICAgICAgICAgICAgICAgbG9hZDogKGRhdGEpID0+IHsgd2FzbS5sb2FkKGRhdGEpOyByZXR1cm4gb2JqOyB9LFxuICAgICAgICAgICAgICAgIGJsb2NrU2l6ZTogMzIsXG4gICAgICAgICAgICAgICAgZGlnZXN0U2l6ZTogOCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgbmFtZSQ2ID0gXCJ4eGhhc2gzXCI7XG4gICAgdmFyIGRhdGEkNiA9IFwiQUdGemJRRUFBQUFCTkFoZ0FBRi9ZQVIvZjM5L0FHQUhmMzkvZjM5L2Z3QmdCSDkrZm40QmZtQUVmMzkvZmdGK1lBTi9mMzRCZm1BQUFHQUJmd0FERGcwQUFRSURCQVVGQlFZSEJnQUdCUVFCQVFJQ0JnNENmd0ZCd0k0RkMzOEFRY0FKQ3dkd0NBWnRaVzF2Y25rQ0FBNUlZWE5vWDBkbGRFSjFabVpsY2dBQUNVaGhjMmhmU1c1cGRBQUlDMGhoYzJoZlZYQmtZWFJsQUFrS1NHRnphRjlHYVc1aGJBQUtEVWhoYzJoZlIyVjBVM1JoZEdVQUN3NUlZWE5vWDBOaGJHTjFiR0YwWlFBTUNsTlVRVlJGWDFOSldrVURBUXJOUWcwRkFFR0FDZ3Z2QXdFUWZnSkFJQU5GRFFBZ0FVRTRhaUVCSUFKQk9Hb2hBaUFBS1FNd0lRUWdBQ2tET0NFRklBQXBBeUFoQmlBQUtRTW9JUWNnQUNrREVDRUlJQUFwQXhnaENTQUFLUU1BSVFvZ0FDa0RDQ0VMQTBBZ0J5QUJRV2hxS1FNQUlneDhJQUpCY0dvcEF3QWdBVUZ3YWlrREFDSU5oU0lIUWlDSUlBZEMvLy8vL3crRGZud2hCeUFKSUFGQldHb3BBd0FpRG53Z0FrRmdhaWtEQUNBQlFXQnFLUU1BSWcrRklnbENJSWdnQ1VMLy8vLy9ENE4rZkNFSklBc2dBVUZJYWlrREFDSVFmQ0FDUVZCcUtRTUFJQUZCVUdvcEF3QWlFWVVpQzBJZ2lDQUxRdi8vLy84UGczNThJUXNnQWtGNGFpa0RBQ0FCUVhocUtRTUFJaEtGSWhOQ0lJZ2dFMEwvLy8vL0Q0TitJQVI4SUFFcEF3QWlFM3doQkNBQ1FXaHFLUU1BSUF5RklneENJSWdnREVMLy8vLy9ENE4rSUFaOElBMThJUVlnQWtGWWFpa0RBQ0FPaFNJTVFpQ0lJQXhDLy8vLy93K0RmaUFJZkNBUGZDRUlJQUpCU0dvcEF3QWdFSVVpREVJZ2lDQU1Rdi8vLy84UGczNGdDbndnRVh3aENpQUZJQko4SUFJcEF3QWdFNFVpQlVJZ2lDQUZRdi8vLy84UGczNThJUVVnQVVIQUFHb2hBU0FDUVFocUlRSWdBMEYvYWlJRERRQUxJQUFnQ1RjREdDQUFJQW8zQXdBZ0FDQUxOd01JSUFBZ0J6Y0RLQ0FBSUFnM0F4QWdBQ0FGTndNNElBQWdCamNESUNBQUlBUTNBekFMQzk0Q0FnRi9BWDRDUUNBQ0lBRW9BZ0FpQjJzaUFpQUVTdzBBSUFBZ0F5QUZJQWRCQTNScUlBSVFBU0FBSUFVZ0Jtb2lCeWtEQUNBQUtRTUFJZ2hDTDRpRklBaUZRckh6M2ZFSmZqY0RBQ0FBSUFjcEF3Z2dBQ2tEQ0NJSVFpK0loU0FJaFVLeDg5M3hDWDQzQXdnZ0FDQUhLUU1RSUFBcEF4QWlDRUl2aUlVZ0NJVkNzZlBkOFFsK053TVFJQUFnQnlrREdDQUFLUU1ZSWdoQ0w0aUZJQWlGUXJIejNmRUpmamNER0NBQUlBY3BBeUFnQUNrRElDSUlRaStJaFNBSWhVS3g4OTN4Q1g0M0F5QWdBQ0FIS1FNb0lBQXBBeWdpQ0VJdmlJVWdDSVZDc2ZQZDhRbCtOd01vSUFBZ0J5a0RNQ0FBS1FNd0lnaENMNGlGSUFpRlFySHozZkVKZmpjRE1DQUFJQWNwQXpnZ0FDa0RPQ0lJUWkrSWhTQUloVUt4ODkzeENYNDNBemdnQUNBRElBSkJCblJxSUFVZ0JDQUNheUlIRUFFZ0FTQUhOZ0lBRHdzZ0FDQURJQVVnQjBFRGRHb2dCQkFCSUFFZ0J5QUVhallDQUF1RkFRRUJmeUFDSUFHRklBT25JZ1JCR0hRZ0JFR0EvZ054UVFoMGNpQUVRUWgyUVlEK0EzRWdCRUVZZG5KeXJVSWdoaUFEaFgxQkFEVUNnSXdCUWlDR0lBQkIvSXNCYWpVQ0FJU0ZJZ05DTVlrZ0EwSVlpWVVnQTRWQ3BiN2o5TkdNaDltZmYzNGlBMElqaUNBQXJYd2dBNFZDcGI3ajlOR01oOW1mZjM0aUEwSWNpQ0FEaFF0bkFDQUNJQUZ6clNBRGZDSURRaUdJUVFBdEFJQ01BVUVRZENBQVFRaDBjaUFBUVFGMlFZQ01BV290QUFCQkdIUnlJQUJCLzRzQmFpMEFBSEt0aFNBRGhVTFAxdE8rMHNlcjJVSitJZ05DSFlnZ0E0VkMrZlBkOFpuMm1hc1dmaUlEUWlDSUlBT0ZDNGtEQVFSK0FrQWdBRUVKU1EwQVFRQXBBNENNQVNBQktRTWdJQUVwQXhpRklBSjhoU0lEUWppR0lBTkNnUDREZzBJb2hvUWdBMEtBZ1B3SGcwSVloaUFEUW9DQWdQZ1BnMElJaG9TRUlBTkNDSWhDZ0lDQStBK0RJQU5DR0loQ2dJRDhCNE9FSUFOQ0tJaENnUDREZ3lBRFFqaUloSVNFSUFDdGZDQUFRZmlMQVdvcEF3QWdBU2tETUNBQktRTW9oU0FDZllVaUFud2dBa0wvLy8vL0Q0TWlCQ0FEUWlDSUlnVitJZ1pDLy8vLy93K0RJQUpDSUlnaUFpQURRdi8vLy84UGd5SURmbndnQkNBRGZpSURRaUNJZkNJRVFpQ0dJQU5DLy8vLy93K0RoQ0FHUWlDSUlBSWdCWDU4SUFSQ0lJaDhoWHdpQTBJbGlDQURoVUw1ODkzeG1mS1pxeForSWdOQ0lJZ2dBNFVQQ3dKQUlBQkJCRWtOQUNBQUlBRkJDR29wQXdBZ0FVRVFhaWtEQUNBQ0VBTVBDd0pBSUFCRkRRQWdBQ0FCS0FJQUlBRkJCR29vQWdBZ0FoQUVEd3NnQVNrRE9DQUJLUU5BaFNBQ2hTSURRaUdJSUFPRlFzL1cwNzdTeDZ2WlFuNGlBMElkaUNBRGhVTDU4OTN4bWZhWnF4WitJZ05DSUlnZ0E0VUwzZ2dCQm40Z0FLMUNoNVd2cjVpMjNwdWVmMzRoQXdKQUlBQkJJVWtOQUFKQUlBQkJ3UUJKRFFBQ1FDQUFRZUVBU1EwQUlBRXBBMmdnQW4xQkFDa0R1SXdCaFNJRVF2Ly8vLzhQZ3lJRklBRXBBMkFnQW54QkFDa0RzSXdCaFNJR1FpQ0lJZ2QrSWdoQy8vLy8vdytESUFSQ0lJZ2lCQ0FHUXYvLy8vOFBneUlHZm53Z0JTQUdmaUlGUWlDSWZDSUdRaUNHSUFWQy8vLy8vdytEaENBSVFpQ0lJQVFnQjM1OElBWkNJSWg4aFNBRGZDQUJLUU40SUFKOUlBQkJ5SXNCYWlrREFJVWlBMEwvLy8vL0Q0TWlCQ0FCS1FOd0lBSjhJQUJCd0lzQmFpa0RBSVVpQlVJZ2lDSUdmaUlIUXYvLy8vOFBneUFEUWlDSUlnTWdCVUwvLy8vL0Q0TWlCWDU4SUFRZ0JYNGlCRUlnaUh3aUJVSWdoaUFFUXYvLy8vOFBnNFFnQjBJZ2lDQURJQVorZkNBRlFpQ0lmSVY4SVFNTElBRXBBMGdnQW4xQkFDa0RxSXdCaFNJRVF2Ly8vLzhQZ3lJRklBRXBBMEFnQW54QkFDa0RvSXdCaFNJR1FpQ0lJZ2QrSWdoQy8vLy8vdytESUFSQ0lJZ2lCQ0FHUXYvLy8vOFBneUlHZm53Z0JTQUdmaUlGUWlDSWZDSUdRaUNHSUFWQy8vLy8vdytEaENBSVFpQ0lJQVFnQjM1OElBWkNJSWg4aFNBRGZDQUJLUU5ZSUFKOUlBQkIySXNCYWlrREFJVWlBMEwvLy8vL0Q0TWlCQ0FCS1FOUUlBSjhJQUJCMElzQmFpa0RBSVVpQlVJZ2lDSUdmaUlIUXYvLy8vOFBneUFEUWlDSUlnTWdCVUwvLy8vL0Q0TWlCWDU4SUFRZ0JYNGlCRUlnaUh3aUJVSWdoaUFFUXYvLy8vOFBnNFFnQjBJZ2lDQURJQVorZkNBRlFpQ0lmSVY4SVFNTElBRXBBeWdnQW4xQkFDa0RtSXdCaFNJRVF2Ly8vLzhQZ3lJRklBRXBBeUFnQW54QkFDa0RrSXdCaFNJR1FpQ0lJZ2QrSWdoQy8vLy8vdytESUFSQ0lJZ2lCQ0FHUXYvLy8vOFBneUlHZm53Z0JTQUdmaUlGUWlDSWZDSUdRaUNHSUFWQy8vLy8vdytEaENBSVFpQ0lJQVFnQjM1OElBWkNJSWg4aFNBRGZDQUJLUU00SUFKOUlBQkI2SXNCYWlrREFJVWlBMEwvLy8vL0Q0TWlCQ0FCS1FNd0lBSjhJQUJCNElzQmFpa0RBSVVpQlVJZ2lDSUdmaUlIUXYvLy8vOFBneUFEUWlDSUlnTWdCVUwvLy8vL0Q0TWlCWDU4SUFRZ0JYNGlCRUlnaUh3aUJVSWdoaUFFUXYvLy8vOFBnNFFnQjBJZ2lDQURJQVorZkNBRlFpQ0lmSVY4SVFNTElBRXBBd2dnQW4xQkFDa0RpSXdCaFNJRVF2Ly8vLzhQZ3lJRklBRXBBd0FnQW54QkFDa0RnSXdCaFNJR1FpQ0lJZ2QrSWdoQy8vLy8vdytESUFSQ0lJZ2lCQ0FHUXYvLy8vOFBneUlHZm53Z0JTQUdmaUlGUWlDSWZDSUdRaUNHSUFWQy8vLy8vdytEaENBSVFpQ0lJQVFnQjM1OElBWkNJSWg4aFNBRGZDQUJLUU1ZSUFKOUlBQkIrSXNCYWlrREFJVWlBMEwvLy8vL0Q0TWlCQ0FCS1FNUUlBSjhJQUJCOElzQmFpa0RBSVVpQWtJZ2lDSUZmaUlHUXYvLy8vOFBneUFEUWlDSUlnTWdBa0wvLy8vL0Q0TWlBbjU4SUFRZ0FuNGlBa0lnaUh3aUJFSWdoaUFDUXYvLy8vOFBnNFFnQmtJZ2lDQURJQVYrZkNBRVFpQ0lmSVY4SWdKQ0pZZ2dBb1ZDK2ZQZDhabnltYXNXZmlJQ1FpQ0lJQUtGQy93S0JBRi9CWDRDZndGK1FRQWhBeUFCS1FONElBSjlRUUFwQS9pTUFZVWlCRUwvLy8vL0Q0TWlCU0FCS1FOd0lBSjhRUUFwQS9DTUFZVWlCa0lnaUNJSGZpSUlRdi8vLy84UGd5QUVRaUNJSWdRZ0JrTC8vLy8vRDRNaUJuNThJQVVnQm40aUJVSWdpSHdpQmtJZ2hpQUZRdi8vLy84UGc0UWdDRUlnaUNBRUlBZCtmQ0FHUWlDSWZJVWdBU2tEYUNBQ2ZVRUFLUVBvakFHRklnUkMvLy8vL3crRElnVWdBU2tEWUNBQ2ZFRUFLUVBnakFHRklnWkNJSWdpQjM0aUNFTC8vLy8vRDRNZ0JFSWdpQ0lFSUFaQy8vLy8vdytESWdaK2ZDQUZJQVorSWdWQ0lJaDhJZ1pDSUlZZ0JVTC8vLy8vRDRPRUlBaENJSWdnQkNBSGZud2dCa0lnaUh5RklBRXBBMWdnQW4xQkFDa0QySXdCaFNJRVF2Ly8vLzhQZ3lJRklBRXBBMUFnQW54QkFDa0QwSXdCaFNJR1FpQ0lJZ2QrSWdoQy8vLy8vdytESUFSQ0lJZ2lCQ0FHUXYvLy8vOFBneUlHZm53Z0JTQUdmaUlGUWlDSWZDSUdRaUNHSUFWQy8vLy8vdytEaENBSVFpQ0lJQVFnQjM1OElBWkNJSWg4aFNBQktRTklJQUo5UVFBcEE4aU1BWVVpQkVMLy8vLy9ENE1pQlNBQktRTkFJQUo4UVFBcEE4Q01BWVVpQmtJZ2lDSUhmaUlJUXYvLy8vOFBneUFFUWlDSUlnUWdCa0wvLy8vL0Q0TWlCbjU4SUFVZ0JuNGlCVUlnaUh3aUJrSWdoaUFGUXYvLy8vOFBnNFFnQ0VJZ2lDQUVJQWQrZkNBR1FpQ0lmSVVnQVNrRE9DQUNmVUVBS1FPNGpBR0ZJZ1JDLy8vLy93K0RJZ1VnQVNrRE1DQUNmRUVBS1FPd2pBR0ZJZ1pDSUlnaUIzNGlDRUwvLy8vL0Q0TWdCRUlnaUNJRUlBWkMvLy8vL3crRElnWitmQ0FGSUFaK0lnVkNJSWg4SWdaQ0lJWWdCVUwvLy8vL0Q0T0VJQWhDSUlnZ0JDQUhmbndnQmtJZ2lIeUZJQUVwQXlnZ0FuMUJBQ2tEcUl3QmhTSUVRdi8vLy84UGd5SUZJQUVwQXlBZ0FueEJBQ2tEb0l3QmhTSUdRaUNJSWdkK0lnaEMvLy8vL3crRElBUkNJSWdpQkNBR1F2Ly8vLzhQZ3lJR2Zud2dCU0FHZmlJRlFpQ0lmQ0lHUWlDR0lBVkMvLy8vL3crRGhDQUlRaUNJSUFRZ0IzNThJQVpDSUloOGhTQUJLUU1ZSUFKOVFRQXBBNWlNQVlVaUJFTC8vLy8vRDRNaUJTQUJLUU1RSUFKOFFRQXBBNUNNQVlVaUJrSWdpQ0lIZmlJSVF2Ly8vLzhQZ3lBRVFpQ0lJZ1FnQmtMLy8vLy9ENE1pQm41OElBVWdCbjRpQlVJZ2lId2lCa0lnaGlBRlF2Ly8vLzhQZzRRZ0NFSWdpQ0FFSUFkK2ZDQUdRaUNJZklVZ0FTa0RDQ0FDZlVFQUtRT0lqQUdGSWdSQy8vLy8vdytESWdVZ0FTa0RBQ0FDZkVFQUtRT0FqQUdGSWdaQ0lJZ2lCMzRpQ0VMLy8vLy9ENE1nQkVJZ2lDSUVJQVpDLy8vLy93K0RJZ1orZkNBRklBWitJZ1ZDSUloOElnWkNJSVlnQlVMLy8vLy9ENE9FSUFoQ0lJZ2dCQ0FIZm53Z0JrSWdpSHlGSUFDdFFvZVZyNitZdHQ2Ym5uOStmSHg4Zkh4OGZId2lCRUlsaUNBRWhVTDU4OTN4bWZLWnF4WitJZ1JDSUlnZ0JJVWhCQUpBSUFCQmtBRklEUUFnQUVFRWRrRjRhaUVKQTBBZ0FTQURhaUlLUVF0cUtRTUFJQUo5SUFOQmlJMEJhaWtEQUlVaUJVTC8vLy8vRDRNaUJpQUtRUU5xS1FNQUlBSjhJQU5CZ0kwQmFpa0RBSVVpQjBJZ2lDSUlmaUlMUXYvLy8vOFBneUFGUWlDSUlnVWdCMEwvLy8vL0Q0TWlCMzU4SUFZZ0IzNGlCa0lnaUh3aUIwSWdoaUFHUXYvLy8vOFBnNFFnQzBJZ2lDQUZJQWgrZkNBSFFpQ0lmSVVnQkh3aEJDQURRUkJxSVFNZ0NVRi9haUlKRFFBTEN5QUJLUU4vSUFKOUlBQkIrSXNCYWlrREFJVWlCVUwvLy8vL0Q0TWlCaUFCS1FOM0lBSjhJQUJCOElzQmFpa0RBSVVpQWtJZ2lDSUhmaUlJUXYvLy8vOFBneUFGUWlDSUlnVWdBa0wvLy8vL0Q0TWlBbjU4SUFZZ0FuNGlBa0lnaUh3aUJrSWdoaUFDUXYvLy8vOFBnNFFnQ0VJZ2lDQUZJQWQrZkNBR1FpQ0lmSVVnQkh3aUFrSWxpQ0FDaFVMNTg5M3htZktacXhaK0lnSkNJSWdnQW9VTDN3VUNBWDRCZndKQUFrQkJBQ2tEZ0FvaUFGQkZEUUJCZ0FnaEFVSUFJUUFNQVFzQ1FFRUFLUU9namdFZ0FGSU5BRUVBSVFFTUFRdEJBQ0VCUVFCQ3I2L3YxN3oza3FEK0FDQUFmVGNEK0lzQlFRQWdBRUxGbHV2NTJOS0ZnaWg4TndQd2l3RkJBRUtQOGVPTnJZLzBtRTRnQUgwM0EraUxBVUVBSUFCQ3E2ejR4ZFh2MGRCOGZEY0Q0SXNCUVFCQzA2M1VzcEtGdGJTZWZ5QUFmVGNEMklzQlFRQWdBRUtYbXZTTzlaYTg3Y2tBZkRjRDBJc0JRUUJDeFlPQy9hLy94TEZySUFCOU53UElpd0ZCQUNBQVF1cUxzNTNJNXZUMVEzdzNBOENMQVVFQVFzaS8rc3VjbTk2NTVBQWdBSDAzQTdpTEFVRUFJQUJDaXFPQjM5U1o3YXd4ZkRjRHNJc0JRUUJDK2JudnZmejR3cWNkSUFCOU53T29pd0ZCQUNBQVFxajEyL3V6bktlYVAzdzNBNkNMQVVFQVFyaXl2TGVVMWJmV1dDQUFmVGNEbUlzQlFRQWdBRUx4eUtHNnFiVEQvTTRBZkRjRGtJc0JRUUJDaUtHWDI3ampsSmVqZnlBQWZUY0RpSXNCUVFBZ0FFSzgwTWphbS9Ld2dFdDhOd09BaXdGQkFFTGc2OEMwbnRDT2s4d0FJQUI5TndQNGlnRkJBQ0FBUXJpUm1LTDMvcENTam45OE53UHdpZ0ZCQUVLQ3RjSHV4L20vdVNFZ0FIMDNBK2lLQVVFQUlBQkN5L09aOThTWjhQTDRBSHczQStDS0FVRUFRdktBa2FYNjl1eXpIeUFBZlRjRDJJb0JRUUFnQUVMZXFiZkx2cERreTF0OE53UFFpZ0ZCQUVMOGdvVGs4cjdJMWh3Z0FIMDNBOGlLQVVFQUlBQkN1UDJ6eTdPRTZhVytmM3czQThDS0FRdEJBRUlBTndPUWpnRkJBRUlBTndPSWpnRkJBRUlBTndPQWpnRkJBRUs5M01xVkREY0RnSW9CUVFCQ2g1V3ZyNWkyM3B1ZWZ6Y0RpSW9CUVFCQ3o5YlR2dExIcTlsQ053T1FpZ0ZCQUVMNTg5M3htZmFacXhZM0E1aUtBVUVBUXVQY3lwWDh6dkwxaFg4M0E2Q0tBVUVBUXZlVXI2OElOd09vaWdGQkFFTEZ6OW15OGVXNjZpYzNBN0NLQVVFQVFySHozZkVKTndPNGlnRkJBQ0FBTndPZ2pnRkJBQ0FCTmdLd2pnRkJBRUtRZ0lDQWdCQTNBNWlPQVF1Q0NnRUlmMEVBUVFBcEE1Q09BU0FBclh3M0E1Q09BUUpBQWtBQ1FFRUFLQUtBamdFaUFTQUFhaUlDUVlBQ1N3MEFJQUZCZ0l3QmFpRURRWUFLSVFRQ1FDQUFRUWhQRFFBZ0FDRUJEQUlMQWtBQ1FDQUFRWGhxSWdWQkEzWkJBV3BCQjNFaUJnMEFRWUFLSVFRZ0FDRUJEQUVMSUFaQkEzUWhBVUdBQ2lFRUEwQWdBeUFFS1FNQU53TUFJQU5CQ0dvaEF5QUVRUWhxSVFRZ0JrRi9haUlHRFFBTElBQWdBV3NoQVFzZ0JVRTRTUTBCQTBBZ0F5QUVLUU1BTndNQUlBTkJDR29nQkVFSWFpa0RBRGNEQUNBRFFSQnFJQVJCRUdvcEF3QTNBd0FnQTBFWWFpQUVRUmhxS1FNQU53TUFJQU5CSUdvZ0JFRWdhaWtEQURjREFDQURRU2hxSUFSQktHb3BBd0EzQXdBZ0EwRXdhaUFFUVRCcUtRTUFOd01BSUFOQk9Hb2dCRUU0YWlrREFEY0RBQ0FEUWNBQWFpRURJQVJCd0FCcUlRUWdBVUZBYWlJQlFRZExEUUFNQWdzTFFZQUtJUVFnQUVHQUNtb2hCVUVBS0FLd2pnRWlBMEhBaWdFZ0F4c2hCZ0pBSUFGRkRRQWdBVUdBakFGcUlRTkJnQW9oQkFKQUFrQkJnQUlnQVdzaUIwRUlUdzBBSUFjaEFBd0JDd0pBQWtCQitBRWdBV3NpQ0VFRGRrRUJha0VIY1NJQ0RRQkJnQW9oQkNBSElRQU1BUXRCZ0FvaEJDQUNRUU4wSWdBaEFnTkFJQU1nQkNrREFEY0RBQ0FEUVFocUlRTWdCRUVJYWlFRUlBSkJlR29pQWcwQUMwR0FBaUFCSUFCcWF5RUFDeUFJUVRoSkRRQURRQ0FESUFRcEF3QTNBd0FnQTBFSWFpQUVRUWhxS1FNQU53TUFJQU5CRUdvZ0JFRVFhaWtEQURjREFDQURRUmhxSUFSQkdHb3BBd0EzQXdBZ0EwRWdhaUFFUVNCcUtRTUFOd01BSUFOQktHb2dCRUVvYWlrREFEY0RBQ0FEUVRCcUlBUkJNR29wQXdBM0F3QWdBMEU0YWlBRVFUaHFLUU1BTndNQUlBTkJ3QUJxSVFNZ0JFSEFBR29oQkNBQVFVQnFJZ0JCQjBzTkFBc0xBa0FnQUVVTkFBSkFBa0FnQUVFSGNTSUNEUUFnQUNFQkRBRUxJQUJCZUhFaEFRTkFJQU1nQkMwQUFEb0FBQ0FEUVFGcUlRTWdCRUVCYWlFRUlBSkJmMm9pQWcwQUN3c2dBRUVJU1EwQUEwQWdBeUFFS1FBQU53QUFJQU5CQ0dvaEF5QUVRUWhxSVFRZ0FVRjRhaUlCRFFBTEMwR0FpZ0ZCaUk0QlFRQW9BcGlPQVVHQWpBRkJCQ0FHUVFBb0FweU9BUkFDUVFCQkFEWUNnSTRCSUFkQmdBcHFJUVFMQWtBZ0JFR0FBbW9nQlU4TkFDQUZRWUIrYWlFREEwQkJnSW9CUVlpT0FVRUFLQUtZamdFZ0JFRUVJQVpCQUNnQ25JNEJFQUlnQkVHQUFtb2lCQ0FEU1EwQUMwRUFJQVJCUUdvcEF3QTNBOENOQVVFQUlBUkJTR29wQXdBM0E4aU5BVUVBSUFSQlVHb3BBd0EzQTlDTkFVRUFJQVJCV0dvcEF3QTNBOWlOQVVFQUlBUkJZR29wQXdBM0ErQ05BVUVBSUFSQmFHb3BBd0EzQStpTkFVRUFJQVJCY0dvcEF3QTNBL0NOQVVFQUlBUkJlR29wQXdBM0EvaU5BUXRCZ0l3QklRTUNRQUpBSUFVZ0JHc2lBa0VJVHcwQUlBSWhCZ3dCQzBHQWpBRWhBeUFDSVFZRFFDQURJQVFwQXdBM0F3QWdBMEVJYWlFRElBUkJDR29oQkNBR1FYaHFJZ1pCQjBzTkFBc0xJQVpGRFFFRFFDQURJQVF0QUFBNkFBQWdBMEVCYWlFRElBUkJBV29oQkNBR1FYOXFJZ1lOQUF3Q0N3c2dBVVVOQUFKQUFrQWdBVUVIY1NJR0RRQWdBU0VDREFFTElBRkJlSEVoQWdOQUlBTWdCQzBBQURvQUFDQURRUUZxSVFNZ0JFRUJhaUVFSUFaQmYyb2lCZzBBQ3dzQ1FDQUJRUWhKRFFBRFFDQURJQVFwQUFBM0FBQWdBMEVJYWlFRElBUkJDR29oQkNBQ1FYaHFJZ0lOQUFzTFFRQW9Bb0NPQVNBQWFpRUNDMEVBSUFJMkFvQ09BUXVzRXdVRWZ3SitBWDhWZmdWL0l3QWlBQ0VCSUFCQmdBRnJRVUJ4SWdJa0FFRUFLQUt3amdFaUFFSEFpZ0VnQUJzaEF3SkFBa0JCQUNrRGtJNEJJZ1JDOFFGVURRQWdBa0VBS1FPQWlnRTNBd0FnQWtFQUtRT0lpZ0UzQXdnZ0FrRUFLUU9RaWdFM0F4QWdBa0VBS1FPWWlnRTNBeGdnQWtFQUtRT2dpZ0UzQXlBZ0FrRUFLUU9vaWdFM0F5Z2dBa0VBS1FPd2lnRWlCRGNETUNBQ1FRQXBBN2lLQVNJRk53TTRBa0FDUUVFQUtBS0FqZ0VpQmtIQUFFa05BQ0FDUVFBb0FvaU9BVFlDUUNBQ0lBSkJ3QUJxUVFBb0FwaU9BVUdBakFFZ0JrRi9ha0VHZGlBRFFRQW9BcHlPQVNJQUVBSWdBeUFBYWlJQVFYbHFLUU1BSVFjZ0FFRUphaWtEQUNFSUlBQkJHV29wQXdBaENTQUdRY0NMQVdvcEF3QWhCQ0FBUVFGcUtRTUFJUW9nQmtISWl3RnFLUU1BSVFVZ0JrSFFpd0ZxS1FNQUlRc2dBRUVSYWlrREFDRU1JQVpCMklzQmFpa0RBQ0VOSUFaQjRJc0JhaWtEQUNFT0lBQkJJV29wQXdBaER5QUdRZWlMQVdvcEF3QWhFQ0FBUVNscUtRTUFJUkVnQWlrREFDRVNJQUlwQXhBaEV5QUNLUU1nSVJRZ0Fpa0RDQ0VWSUFJcEF4Z2hGaUFDS1FNb0lSY2dBaWtETUNFWUlBSWdBaWtET0NBR1FmQ0xBV29wQXdBaUdYd2dBRUV4YWlrREFDQUdRZmlMQVdvcEF3QWlHb1VpRzBJZ2lDQWJRdi8vLy84UGczNThOd000SUFJZ0dpQVlJQkVnR1lVaUVVSWdpQ0FSUXYvLy8vOFBnMzU4ZkRjRE1DQVhJQTU4SUE4Z0VJVWlEMElnaUNBUFF2Ly8vLzhQZzM1OElROGdGaUFMZkNBTUlBMkZJZ3hDSUlnZ0RFTC8vLy8vRDROK2ZDRU1JQlVnQkh3Z0NpQUZoU0lLUWlDSUlBcEMvLy8vL3crRGZud2hDaUFRSUJRZ0NTQU9oU0lPUWlDSUlBNUMvLy8vL3crRGZueDhJUkFnRFNBVElBZ2dDNFVpQzBJZ2lDQUxRdi8vLy84UGczNThmQ0VJSUFVZ0VpQUhJQVNGSWdSQ0lJZ2dCRUwvLy8vL0Q0TitmSHdoQnd3QkN5QUdRY0NOQVdvaEhFSEFBQ0FHYXlFZElBSkJ3QUJxSVFBQ1FBSkFBa0FnQmtFNFRRMEFJQjBoSGd3QkN3SkFBa0JCT0NBR2F5SWZRUU4yUVFGcVFRZHhJaDROQUNBQ1FjQUFhaUVBSUIwaEhnd0JDeUFDUWNBQWFpRUFJQjVCQTNRaUlDRWVBMEFnQUNBY0tRTUFOd01BSUFCQkNHb2hBQ0FjUVFocUlSd2dIa0Y0YWlJZURRQUxRY0FBSUFZZ0lHcHJJUjRMQWtBZ0gwRTRTUTBBQTBBZ0FDQWNLUU1BTndNQUlBQkJDR29nSEVFSWFpa0RBRGNEQUNBQVFSQnFJQnhCRUdvcEF3QTNBd0FnQUVFWWFpQWNRUmhxS1FNQU53TUFJQUJCSUdvZ0hFRWdhaWtEQURjREFDQUFRU2hxSUJ4QktHb3BBd0EzQXdBZ0FFRXdhaUFjUVRCcUtRTUFOd01BSUFCQk9Hb2dIRUU0YWlrREFEY0RBQ0FBUWNBQWFpRUFJQnhCd0FCcUlSd2dIa0ZBYWlJZVFRZExEUUFMQ3lBZVJRMEJDeUFlUVg5cUlTQUNRQ0FlUVFkeEloOUZEUUFnSGtGNGNTRWVBMEFnQUNBY0xRQUFPZ0FBSUFCQkFXb2hBQ0FjUVFGcUlSd2dIMEYvYWlJZkRRQUxDeUFnUVFkSkRRQURRQ0FBSUJ3cEFBQTNBQUFnQUVFSWFpRUFJQnhCQ0dvaEhDQWVRWGhxSWg0TkFBc0xJQUpCd0FCcUlCMXFJUnhCZ0l3QklRQUNRQUpBQWtBZ0JrRUlTUTBBQWtBZ0JrRTRha0VEZGtFQmFrRUhjU0llRFFBTUFnc2dIa0VEZENFZlFZQ01BU0VBQTBBZ0hDQUFLUU1BTndNQUlCeEJDR29oSENBQVFRaHFJUUFnSGtGL2FpSWVEUUFMSUFZZ0gyc2hCZ3NnQmtVTkFRSkFJQVpCQjNFaUh3MEFJQVloSGd3QkN5QUdRWGh4SVI0RFFDQWNJQUF0QUFBNkFBQWdIRUVCYWlFY0lBQkJBV29oQUNBZlFYOXFJaDhOQUFzTElBWkJDRWtOQUFOQUlCd2dBQ2tBQURjQUFDQWNRUWhxSVJ3Z0FFRUlhaUVBSUI1QmVHb2lIZzBBQ3dzZ0EwRUFLQUtjamdGcUlnQkJlV29wQXdBaENTQUFRUWxxS1FNQUlSRWdBRUVaYWlrREFDRVNJQUJCQVdvcEF3QWhDaUFBUVJGcUtRTUFJUXdnQUVFaGFpa0RBQ0VQSUFCQktXb3BBd0FoRXlBQ0tRTUFJUlFnQWlrREVDRVZJQUlwQXlBaEZpQUNLUU1JSVJjZ0Fpa0RRQ0VMSUFJcEEwZ2hEU0FDS1FNWUlSZ2dBaWtEVUNFT0lBSXBBMWdoQ0NBQ0tRTW9JUmtnQWlrRFlDRVFJQUlwQTJnaEJ5QUNJQVVnQWlrRGNDSWFmQ0FBUVRGcUtRTUFJQUlwQTNnaUJZVWlHMElnaUNBYlF2Ly8vLzhQZzM1OE53TTRJQUlnQlNBVElCcUZJaE5DSUlnZ0UwTC8vLy8vRDROK0lBUjhmRGNETUNBWklCQjhJQThnQjRVaUJFSWdpQ0FFUXYvLy8vOFBnMzU4SVE4Z0dDQU9mQ0FNSUFpRklnUkNJSWdnQkVMLy8vLy9ENE4rZkNFTUlCY2dDM3dnQ2lBTmhTSUVRaUNJSUFSQy8vLy8vdytEZm53aENpQUhJQllnRWlBUWhTSUVRaUNJSUFSQy8vLy8vdytEZm54OElSQWdDQ0FWSUJFZ0RvVWlCRUlnaUNBRVF2Ly8vLzhQZzM1OGZDRUlJQTBnRkNBSklBdUZJZ1JDSUlnZ0JFTC8vLy8vRDROK2ZId2hCd3NnQXlrRFF5QUNLUU00aFNJRVF2Ly8vLzhQZ3lJRklBTXBBenNnQWlrRE1JVWlDMElnaUNJTmZpSU9Rdi8vLy84UGd5QUVRaUNJSWdRZ0MwTC8vLy8vRDRNaUMzNThJQVVnQzM0aUJVSWdpSHdpQzBJZ2hpQUZRdi8vLy84UGc0UWdEa0lnaUNBRUlBMStmQ0FMUWlDSWZJVWdBeWtETXlBUGhTSUVRdi8vLy84UGd5SUZJQU1wQXlzZ0VJVWlDMElnaUNJTmZpSU9Rdi8vLy84UGd5QUVRaUNJSWdRZ0MwTC8vLy8vRDRNaUMzNThJQVVnQzM0aUJVSWdpSHdpQzBJZ2hpQUZRdi8vLy84UGc0UWdEa0lnaUNBRUlBMStmQ0FMUWlDSWZJVWdBeWtESXlBTWhTSUVRdi8vLy84UGd5SUZJQU1wQXhzZ0NJVWlDMElnaUNJTmZpSU9Rdi8vLy84UGd5QUVRaUNJSWdRZ0MwTC8vLy8vRDRNaUMzNThJQVVnQzM0aUJVSWdpSHdpQzBJZ2hpQUZRdi8vLy84UGc0UWdEa0lnaUNBRUlBMStmQ0FMUWlDSWZJVWdBeWtERXlBS2hTSUVRdi8vLy84UGd5SUZJQU1wQXdzZ0I0VWlDMElnaUNJTmZpSU9Rdi8vLy84UGd5QUVRaUNJSWdRZ0MwTC8vLy8vRDRNaUMzNThJQVVnQzM0aUJVSWdpSHdpQzBJZ2hpQUZRdi8vLy84UGc0UWdEa0lnaUNBRUlBMStmQ0FMUWlDSWZJVkJBQ2tEa0k0QlFvZVZyNitZdHQ2Ym5uOStmSHg4ZkNJRVFpV0lJQVNGUXZuejNmR1o4cG1yRm40aUJFSWdpQ0FFaFNFRURBRUxJQVNuSVFBQ1FFRUFLUU9namdFaUJGQU5BQUpBSUFCQkVFc05BQ0FBUVlBSUlBUVFCU0VFREFJTEFrQWdBRUdBQVVzTkFDQUFRWUFJSUFRUUJpRUVEQUlMSUFCQmdBZ2dCQkFISVFRTUFRc0NRQ0FBUVJCTERRQWdBQ0FEUWdBUUJTRUVEQUVMQWtBZ0FFR0FBVXNOQUNBQUlBTkNBQkFHSVFRTUFRc2dBQ0FEUWdBUUJ5RUVDMEVBSUFSQ09JWWdCRUtBL2dPRFFpaUdoQ0FFUW9DQS9BZURRaGlHSUFSQ2dJQ0ErQStEUWdpR2hJUWdCRUlJaUVLQWdJRDRENE1nQkVJWWlFS0FnUHdIZzRRZ0JFSW9pRUtBL2dPRElBUkNPSWlFaElRM0E0QUtJQUVrQUFzR0FFR0FpZ0VMQWdBTEM4d0JBUUJCZ0FnTHhBRzQvbXc1STZSTHZud0JnU3ozSWEwYzN0UnQ2WU9RbDl0eVFLU2t0N05uSDh0NTVrN013T1Y0Z2xyUWZjei9jaUc0Q0VaMDkwTWtqdUExa09hQk9pWk1QQ2hTdTVIREFNdUkwR1dMRzFNdW8zRmtTSmVpRGZsT09CbnZScW5lck5pbytuWS80NXcwUC9uY3U4ZkhDMDhkaWxIZ1M4MjBXVEhJbjM3SjJYaHpaT3JGcklNMDArdkR4WUdnLy9vVFkrc1hEZDFSdC9EYVNkTVdWU1lwMUdpZUt4YStXSDFIb2Z5UCtMalJldEF4emtYTE9vK1ZGZ1FvcjlmN3lydExRSDVBQWdBQVwiO1xuICAgIHZhciBoYXNoJDYgPSBcIjBkY2E5MmQxXCI7XG4gICAgdmFyIHdhc21Kc29uJDYgPSB7XG4gICAgXHRuYW1lOiBuYW1lJDYsXG4gICAgXHRkYXRhOiBkYXRhJDYsXG4gICAgXHRoYXNoOiBoYXNoJDZcbiAgICB9O1xuXG4gICAgY29uc3QgbXV0ZXgkNCA9IG5ldyBNdXRleCgpO1xuICAgIGxldCB3YXNtQ2FjaGUkNCA9IG51bGw7XG4gICAgY29uc3Qgc2VlZEJ1ZmZlciQxID0gbmV3IEFycmF5QnVmZmVyKDgpO1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlU2VlZCQxKHNlZWQpIHtcbiAgICAgICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKHNlZWQpIHx8IHNlZWQgPCAwIHx8IHNlZWQgPiAweEZGRkZGRkZGKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdTZWVkIG11c3QgYmUgZ2l2ZW4gYXMgdHdvIHZhbGlkIDMyLWJpdCBsb25nIHVuc2lnbmVkIGludGVnZXJzIChsbyArIGhpZ2gpLicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBmdW5jdGlvbiB3cml0ZVNlZWQkMShhcnIsIGxvdywgaGlnaCkge1xuICAgICAgICAvLyB3cml0ZSBpbiBsaXR0bGUtZW5kaWFuIGZvcm1hdFxuICAgICAgICBjb25zdCBidWZmZXIgPSBuZXcgRGF0YVZpZXcoYXJyKTtcbiAgICAgICAgYnVmZmVyLnNldFVpbnQzMigwLCBsb3csIHRydWUpO1xuICAgICAgICBidWZmZXIuc2V0VWludDMyKDQsIGhpZ2gsIHRydWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGVzIHh4SGFzaDMgaGFzaFxuICAgICAqIEBwYXJhbSBkYXRhIElucHV0IGRhdGEgKHN0cmluZywgQnVmZmVyIG9yIFR5cGVkQXJyYXkpXG4gICAgICogQHBhcmFtIHNlZWRMb3cgTG93ZXIgMzIgYml0cyBvZiB0aGUgbnVtYmVyIHVzZWQgdG9cbiAgICAgKiAgaW5pdGlhbGl6ZSB0aGUgaW50ZXJuYWwgc3RhdGUgb2YgdGhlIGFsZ29yaXRobSAoZGVmYXVsdHMgdG8gMClcbiAgICAgKiBAcGFyYW0gc2VlZEhpZ2ggSGlnaGVyIDMyIGJpdHMgb2YgdGhlIG51bWJlciB1c2VkIHRvXG4gICAgICogIGluaXRpYWxpemUgdGhlIGludGVybmFsIHN0YXRlIG9mIHRoZSBhbGdvcml0aG0gKGRlZmF1bHRzIHRvIDApXG4gICAgICogQHJldHVybnMgQ29tcHV0ZWQgaGFzaCBhcyBhIGhleGFkZWNpbWFsIHN0cmluZ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHh4aGFzaDMoZGF0YSwgc2VlZExvdyA9IDAsIHNlZWRIaWdoID0gMCkge1xuICAgICAgICBpZiAodmFsaWRhdGVTZWVkJDEoc2VlZExvdykpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCh2YWxpZGF0ZVNlZWQkMShzZWVkTG93KSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbGlkYXRlU2VlZCQxKHNlZWRIaWdoKSkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHZhbGlkYXRlU2VlZCQxKHNlZWRIaWdoKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHdhc21DYWNoZSQ0ID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9ja2VkQ3JlYXRlKG11dGV4JDQsIHdhc21Kc29uJDYsIDgpXG4gICAgICAgICAgICAgICAgLnRoZW4oKHdhc20pID0+IHtcbiAgICAgICAgICAgICAgICB3YXNtQ2FjaGUkNCA9IHdhc207XG4gICAgICAgICAgICAgICAgd3JpdGVTZWVkJDEoc2VlZEJ1ZmZlciQxLCBzZWVkTG93LCBzZWVkSGlnaCk7XG4gICAgICAgICAgICAgICAgd2FzbUNhY2hlJDQud3JpdGVNZW1vcnkobmV3IFVpbnQ4QXJyYXkoc2VlZEJ1ZmZlciQxKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdhc21DYWNoZSQ0LmNhbGN1bGF0ZShkYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB3cml0ZVNlZWQkMShzZWVkQnVmZmVyJDEsIHNlZWRMb3csIHNlZWRIaWdoKTtcbiAgICAgICAgICAgIHdhc21DYWNoZSQ0LndyaXRlTWVtb3J5KG5ldyBVaW50OEFycmF5KHNlZWRCdWZmZXIkMSkpO1xuICAgICAgICAgICAgY29uc3QgaGFzaCA9IHdhc21DYWNoZSQ0LmNhbGN1bGF0ZShkYXRhKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoaGFzaCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyB4eEhhc2gzIGhhc2ggaW5zdGFuY2VcbiAgICAgKiBAcGFyYW0gc2VlZExvdyBMb3dlciAzMiBiaXRzIG9mIHRoZSBudW1iZXIgdXNlZCB0b1xuICAgICAqICBpbml0aWFsaXplIHRoZSBpbnRlcm5hbCBzdGF0ZSBvZiB0aGUgYWxnb3JpdGhtIChkZWZhdWx0cyB0byAwKVxuICAgICAqIEBwYXJhbSBzZWVkSGlnaCBIaWdoZXIgMzIgYml0cyBvZiB0aGUgbnVtYmVyIHVzZWQgdG9cbiAgICAgKiAgaW5pdGlhbGl6ZSB0aGUgaW50ZXJuYWwgc3RhdGUgb2YgdGhlIGFsZ29yaXRobSAoZGVmYXVsdHMgdG8gMClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVYWEhhc2gzKHNlZWRMb3cgPSAwLCBzZWVkSGlnaCA9IDApIHtcbiAgICAgICAgaWYgKHZhbGlkYXRlU2VlZCQxKHNlZWRMb3cpKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QodmFsaWRhdGVTZWVkJDEoc2VlZExvdykpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWxpZGF0ZVNlZWQkMShzZWVkSGlnaCkpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCh2YWxpZGF0ZVNlZWQkMShzZWVkSGlnaCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBXQVNNSW50ZXJmYWNlKHdhc21Kc29uJDYsIDgpLnRoZW4oKHdhc20pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGluc3RhbmNlQnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKDgpO1xuICAgICAgICAgICAgd3JpdGVTZWVkJDEoaW5zdGFuY2VCdWZmZXIsIHNlZWRMb3csIHNlZWRIaWdoKTtcbiAgICAgICAgICAgIHdhc20ud3JpdGVNZW1vcnkobmV3IFVpbnQ4QXJyYXkoaW5zdGFuY2VCdWZmZXIpKTtcbiAgICAgICAgICAgIHdhc20uaW5pdCgpO1xuICAgICAgICAgICAgY29uc3Qgb2JqID0ge1xuICAgICAgICAgICAgICAgIGluaXQ6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgd2FzbS53cml0ZU1lbW9yeShuZXcgVWludDhBcnJheShpbnN0YW5jZUJ1ZmZlcikpO1xuICAgICAgICAgICAgICAgICAgICB3YXNtLmluaXQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHVwZGF0ZTogKGRhdGEpID0+IHsgd2FzbS51cGRhdGUoZGF0YSk7IHJldHVybiBvYmo7IH0sXG4gICAgICAgICAgICAgICAgZGlnZXN0OiAob3V0cHV0VHlwZSkgPT4gd2FzbS5kaWdlc3Qob3V0cHV0VHlwZSksXG4gICAgICAgICAgICAgICAgc2F2ZTogKCkgPT4gd2FzbS5zYXZlKCksXG4gICAgICAgICAgICAgICAgbG9hZDogKGRhdGEpID0+IHsgd2FzbS5sb2FkKGRhdGEpOyByZXR1cm4gb2JqOyB9LFxuICAgICAgICAgICAgICAgIGJsb2NrU2l6ZTogNTEyLFxuICAgICAgICAgICAgICAgIGRpZ2VzdFNpemU6IDgsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdmFyIG5hbWUkNSA9IFwieHhoYXNoMTI4XCI7XG4gICAgdmFyIGRhdGEkNSA9IFwiQUdGemJRRUFBQUFCS3dkZ0FBRi9ZQVIvZjM5L0FHQUhmMzkvZjM5L2Z3QmdBMzkvZmdGK1lBUi9mMzkrQUdBQUFHQUJmd0FERFF3QUFRSURCQVFFQlFZRkFBVUZCQUVCQWdJR0RnSi9BVUhBamdVTGZ3QkJ3QWtMQjNBSUJtMWxiVzl5ZVFJQURraGhjMmhmUjJWMFFuVm1abVZ5QUFBSlNHRnphRjlKYm1sMEFBY0xTR0Z6YUY5VmNHUmhkR1VBQ0FwSVlYTm9YMFpwYm1Gc0FBa05TR0Z6YUY5SFpYUlRkR0YwWlFBS0RraGhjMmhmUTJGc1kzVnNZWFJsQUFzS1UxUkJWRVZmVTBsYVJRTUJDdXhOREFVQVFZQUtDKzhEQVJCK0FrQWdBMFVOQUNBQlFUaHFJUUVnQWtFNGFpRUNJQUFwQXpBaEJDQUFLUU00SVFVZ0FDa0RJQ0VHSUFBcEF5Z2hCeUFBS1FNUUlRZ2dBQ2tER0NFSklBQXBBd0FoQ2lBQUtRTUlJUXNEUUNBSElBRkJhR29wQXdBaURId2dBa0Z3YWlrREFDQUJRWEJxS1FNQUlnMkZJZ2RDSUlnZ0IwTC8vLy8vRDROK2ZDRUhJQWtnQVVGWWFpa0RBQ0lPZkNBQ1FXQnFLUU1BSUFGQllHb3BBd0FpRDRVaUNVSWdpQ0FKUXYvLy8vOFBnMzU4SVFrZ0N5QUJRVWhxS1FNQUloQjhJQUpCVUdvcEF3QWdBVUZRYWlrREFDSVJoU0lMUWlDSUlBdEMvLy8vL3crRGZud2hDeUFDUVhocUtRTUFJQUZCZUdvcEF3QWlFb1VpRTBJZ2lDQVRRdi8vLy84UGczNGdCSHdnQVNrREFDSVRmQ0VFSUFKQmFHb3BBd0FnRElVaURFSWdpQ0FNUXYvLy8vOFBnMzRnQm53Z0RYd2hCaUFDUVZocUtRTUFJQTZGSWd4Q0lJZ2dERUwvLy8vL0Q0TitJQWg4SUE5OElRZ2dBa0ZJYWlrREFDQVFoU0lNUWlDSUlBeEMvLy8vL3crRGZpQUtmQ0FSZkNFS0lBVWdFbndnQWlrREFDQVRoU0lGUWlDSUlBVkMvLy8vL3crRGZud2hCU0FCUWNBQWFpRUJJQUpCQ0dvaEFpQURRWDlxSWdNTkFBc2dBQ0FKTndNWUlBQWdDamNEQUNBQUlBczNBd2dnQUNBSE53TW9JQUFnQ0RjREVDQUFJQVUzQXpnZ0FDQUdOd01nSUFBZ0JEY0RNQXNMM2dJQ0FYOEJmZ0pBSUFJZ0FTZ0NBQ0lIYXlJQ0lBUkxEUUFnQUNBRElBVWdCMEVEZEdvZ0FoQUJJQUFnQlNBR2FpSUhLUU1BSUFBcEF3QWlDRUl2aUlVZ0NJVkNzZlBkOFFsK053TUFJQUFnQnlrRENDQUFLUU1JSWdoQ0w0aUZJQWlGUXJIejNmRUpmamNEQ0NBQUlBY3BBeEFnQUNrREVDSUlRaStJaFNBSWhVS3g4OTN4Q1g0M0F4QWdBQ0FIS1FNWUlBQXBBeGdpQ0VJdmlJVWdDSVZDc2ZQZDhRbCtOd01ZSUFBZ0J5a0RJQ0FBS1FNZ0lnaENMNGlGSUFpRlFySHozZkVKZmpjRElDQUFJQWNwQXlnZ0FDa0RLQ0lJUWkrSWhTQUloVUt4ODkzeENYNDNBeWdnQUNBSEtRTXdJQUFwQXpBaUNFSXZpSVVnQ0lWQ3NmUGQ4UWwrTndNd0lBQWdCeWtET0NBQUtRTTRJZ2hDTDRpRklBaUZRckh6M2ZFSmZqY0RPQ0FBSUFNZ0FrRUdkR29nQlNBRUlBSnJJZ2NRQVNBQklBYzJBZ0FQQ3lBQUlBTWdCU0FIUVFOMGFpQUVFQUVnQVNBSElBUnFOZ0lBQyswREFRVitJQUVwQXpnZ0FDa0RPSVVpQTBMLy8vLy9ENE1pQkNBQktRTXdJQUFwQXpDRklnVkNJSWdpQm40aUIwTC8vLy8vRDRNZ0EwSWdpQ0lESUFWQy8vLy8vdytESWdWK2ZDQUVJQVYrSWdSQ0lJaDhJZ1ZDSUlZZ0JFTC8vLy8vRDRPRUlBZENJSWdnQXlBR2Zud2dCVUlnaUh5RklBRXBBeWdnQUNrREtJVWlBMEwvLy8vL0Q0TWlCQ0FCS1FNZ0lBQXBBeUNGSWdWQ0lJZ2lCbjRpQjBMLy8vLy9ENE1nQTBJZ2lDSURJQVZDLy8vLy93K0RJZ1YrZkNBRUlBVitJZ1JDSUloOElnVkNJSVlnQkVMLy8vLy9ENE9FSUFkQ0lJZ2dBeUFHZm53Z0JVSWdpSHlGSUFFcEF4Z2dBQ2tER0lVaUEwTC8vLy8vRDRNaUJDQUJLUU1RSUFBcEF4Q0ZJZ1ZDSUlnaUJuNGlCMEwvLy8vL0Q0TWdBMElnaUNJRElBVkMvLy8vL3crRElnVitmQ0FFSUFWK0lnUkNJSWg4SWdWQ0lJWWdCRUwvLy8vL0Q0T0VJQWRDSUlnZ0F5QUdmbndnQlVJZ2lIeUZJQUVwQXdnZ0FDa0RDSVVpQTBMLy8vLy9ENE1pQkNBQktRTUFJQUFwQXdDRklnVkNJSWdpQm40aUIwTC8vLy8vRDRNZ0EwSWdpQ0lESUFWQy8vLy8vdytESWdWK2ZDQUVJQVYrSWdSQ0lJaDhJZ1ZDSUlZZ0JFTC8vLy8vRDRPRUlBZENJSWdnQXlBR2Zud2dCVUlnaUh5RklBSjhmSHg4SWdKQ0pZZ2dBb1ZDK2ZQZDhabnltYXNXZmlJQ1FpQ0lJQUtGQzdvSUFnVitBMzhDUUNBQlFRbEpEUUFnQUNBQlFmaUxBV29wQXdBaUJDQUNLUU00SUFJcEF6Q0ZJQU44aFNJRlF2Ly8vLzhQZzBMM2xLK3ZDSDRnQlVLQWdJQ0FjSU44UVFBcEE0Q01BU0FDS1FNb0lBSXBBeUNGSUFOOWhTQUVoU0lEUWlDSUlnUkNzZlBkOFFsK2ZDQUVRb2VWcjY4SWZpSUVRaUNJZkNBRVF2Ly8vLzhQZ3lBRFF2Ly8vLzhQZ3lJRFFySHozZkVKZm53Z0EwS0hsYSt2Q0g0aUJFSWdpSHdpQlVJZ2lId2lBMEk0aGlBRFFvRCtBNE5DS0lhRUlBTkNnSUQ4QjROQ0dJWWdBMEtBZ0lENEQ0TkNDSWFFaENBRFFnaUlRb0NBZ1BnUGd5QURRaGlJUW9DQS9BZURoQ0FEUWlpSVFvRCtBNE1nQTBJNGlJU0VoQ0FFUXYvLy8vOFBneUFCUVg5cXJVSTJob1FnQlVJZ2hueUZJZ1JDSUlnaUJVTFAxdE8rQW40aUJrTC8vLy8vRDRNZ0JFTC8vLy8vRDRNaUJFSzkzTXFWREg1OElBUkN6OWJUdmdKK0lnUkNJSWg4SWdkQ0lJWWlDRUlsaUNBSUlBUkMvLy8vL3crRGhJVkMrZlBkOFpueW1hc1dmaUlFUWlDSUlBU0ZOd01BSUFBZ0JVSzkzTXFWREg0Z0EwTFAxdE8rMHNlcjJVSitmQ0FHUWlDSWZDQUhRaUNJZkNJRFFpV0lJQU9GUXZuejNmR1o4cG1yRm40aUEwSWdpQ0FEaFRjRENBOExBa0FnQVVFRVNRMEFJQUFnQWlrREdDQUNLUU1RaFNBRHB5SUNRUmgwSUFKQmdQNERjVUVJZEhJZ0FrRUlka0dBL2dOeElBSkJHSFp5Y3ExQ0lJWWdBNFY4SUFGQi9Jc0JhalVDQUVJZ2hrRUFOUUtBakFHRWhTSURRaUNJSWdRZ0FVRUNkRUdIbGErdmVHcXRJZ1YrSWdaQ0lJZ2dCRUt4ODkzeENYNThJQVpDLy8vLy93K0RJQU5DLy8vLy93K0RJZ05Dc2ZQZDhRbCtmQ0FESUFWK0lnTkNJSWg4SWdSQ0lJaDhJQVJDSUlZZ0EwTC8vLy8vRDRPRUlnUkNBWVo4SWdOQ0pZZ2dBNFZDK2ZQZDhabnltYXNXZmlJRlFpQ0lJQVdGTndNSUlBQWdBMElEaUNBRWhTSURRaU9JSUFPRlFxVys0L1RSaklmWm4zOStJZ05DSElnZ0E0VTNBd0FQQ3dKQUlBRkZEUUFnQUNBQ0tBSUVJQUlvQWdCenJTQURmQ0lFUWlHSVFRQXRBSUNNQVVFUWRDQUJRUWgwY2lJSklBRkJBWFpCZ0l3QmFpMEFBRUVZZEhJaUNpQUJRZitMQVdvdEFBQWlBWElpQzYyRklBU0ZRcy9XMDc3U3g2dlpRbjRpQkVJZGlDQUVoVUw1ODkzeG1mYVpxeForSWdSQ0lJZ2dCSVUzQXdBZ0FDQUNLQUlNSUFJb0FnaHpyU0FEZlNJRFFpR0lJQUZCR0hRZ0MwR0EvZ054UVFoMGNpQUpRUWgyUVlEK0EzRWdDa0VZZG5KeVFRMTNyWVVnQTRWQ3o5YlR2dExIcTlsQ2ZpSURRaDJJSUFPRlF2bnozZkdaOXBtckZuNGlBMElnaUNBRGhUY0RDQThMSUFBZ0Fpa0RVQ0FDS1FOWWhTQURoU0lFUWlHSUlBU0ZRcy9XMDc3U3g2dlpRbjRpQkVJZGlDQUVoVUw1ODkzeG1mYVpxeForSWdSQ0lJZ2dCSVUzQXdnZ0FDQUNLUU5BSUFJcEEwaUZJQU9GSWdOQ0lZZ2dBNFZDejliVHZ0TEhxOWxDZmlJRFFoMklJQU9GUXZuejNmR1o5cG1yRm40aUEwSWdpQ0FEaFRjREFBdkRDZ0VLZmlBQnJTSUVRb2VWcjYrWXR0NmJubjkrSVFVQ1FBSkFJQUZCSVU4TkFFSUFJUVlNQVF0Q0FDRUhBa0FnQVVIQkFFa05BRUlBSVFjQ1FDQUJRZUVBU1EwQUlBSkIrQUJxS1FNQUlBTjlJQUZCeUlzQmFpa0RBQ0lJaFNJSFF2Ly8vLzhQZ3lJSklBSXBBM0FnQTN3Z0FVSEFpd0ZxS1FNQUlncUZJZ3RDSUlnaURINGlEVUlnaUNBSFFpQ0lJZ2NnREg1OElBMUMvLy8vL3crRElBY2dDMEwvLy8vL0Q0TWlDMzU4SUFrZ0MzNGlCMElnaUh3aUNVSWdpSHhCQUNrRHVJd0JJZ3RCQUNrRHNJd0JJZ3g4aFNBSlFpQ0dJQWRDLy8vLy93K0RoSVVoQnlBQ1FlZ0FhaWtEQUNBRGZTQUxoU0lKUXYvLy8vOFBneUlMSUFJcEEyQWdBM3dnRElVaURFSWdpQ0lOZmlJR1F2Ly8vLzhQZ3lBSlFpQ0lJZ2tnREVMLy8vLy9ENE1pREg1OElBc2dESDRpQzBJZ2lId2lERUlnaGlBTFF2Ly8vLzhQZzRRZ0JrSWdpQ0FKSUExK2ZDQU1RaUNJZklVZ0JYd2dDQ0FLZklVaEJRc2dBa0hZQUdvcEF3QWdBMzBnQVVIWWl3RnFLUU1BSWdpRklnbEMvLy8vL3crRElnb2dBaWtEVUNBRGZDQUJRZENMQVdvcEF3QWlDNFVpREVJZ2lDSU5maUlHUXYvLy8vOFBneUFKUWlDSUlna2dERUwvLy8vL0Q0TWlESDU4SUFvZ0RINGlDa0lnaUh3aURFSWdoaUFLUXYvLy8vOFBnNFFnQmtJZ2lDQUpJQTErZkNBTVFpQ0lmSVVnQjN4QkFDa0RxSXdCSWdsQkFDa0RvSXdCSWdwOGhTRUhJQUpCeUFCcUtRTUFJQU45SUFtRklnbEMvLy8vL3crRElnd2dBaWtEUUNBRGZDQUtoU0lLUWlDSUlnMStJZ1pDLy8vLy93K0RJQWxDSUlnaUNTQUtRdi8vLy84UGd5SUtmbndnRENBS2ZpSUtRaUNJZkNJTVFpQ0dJQXBDLy8vLy93K0RoQ0FHUWlDSUlBa2dEWDU4SUF4Q0lJaDhoU0FGZkNBSUlBdDhoU0VGQ3lBQ1FUaHFLUU1BSUFOOUlBRkI2SXNCYWlrREFDSUloU0lKUXYvLy8vOFBneUlLSUFJcEF6QWdBM3dnQVVIZ2l3RnFLUU1BSWd1RklneENJSWdpRFg0aUJrTC8vLy8vRDRNZ0NVSWdpQ0lKSUF4Qy8vLy8vdytESWd4K2ZDQUtJQXgrSWdwQ0lJaDhJZ3hDSUlZZ0NrTC8vLy8vRDRPRUlBWkNJSWdnQ1NBTmZud2dERUlnaUh5RklBZDhRUUFwQTVpTUFTSUhRUUFwQTVDTUFTSUpmSVVoQmlBQ1FTaHFLUU1BSUFOOUlBZUZJZ2RDLy8vLy93K0RJZ29nQWlrRElDQURmQ0FKaFNJSlFpQ0lJZ3grSWcxQy8vLy8vdytESUFkQ0lJZ2lCeUFKUXYvLy8vOFBneUlKZm53Z0NpQUpmaUlKUWlDSWZDSUtRaUNHSUFsQy8vLy8vdytEaENBTlFpQ0lJQWNnREg1OElBcENJSWg4aFNBRmZDQUlJQXQ4aFNFRkN5QUFJQUpCR0dvcEF3QWdBMzBnQVVINGl3RnFLUU1BSWdlRklnaEMvLy8vL3crRElna2dBaWtERUNBRGZDQUJRZkNMQVdvcEF3QWlDb1VpQzBJZ2lDSU1maUlOUXYvLy8vOFBneUFJUWlDSUlnZ2dDMEwvLy8vL0Q0TWlDMzU4SUFrZ0MzNGlDVUlnaUh3aUMwSWdoaUFKUXYvLy8vOFBnNFFnRFVJZ2lDQUlJQXgrZkNBTFFpQ0lmSVVnQm54QkFDa0RpSXdCSWdoQkFDa0RnSXdCSWdsOGhTSUxJQUpCQ0dvcEF3QWdBMzBnQ0lVaUNFTC8vLy8vRDRNaURDQUNLUU1BSUFOOElBbUZJZ2xDSUlnaURYNGlCa0wvLy8vL0Q0TWdDRUlnaUNJSUlBbEMvLy8vL3crRElnbCtmQ0FNSUFsK0lnbENJSWg4SWd4Q0lJWWdDVUwvLy8vL0Q0T0VJQVpDSUlnZ0NDQU5mbndnREVJZ2lIeUZJQVY4SUFjZ0NueUZJZ1Y4SWdkQ0pZZ2dCNFZDK2ZQZDhabnltYXNXZmlJSFFpQ0lJQWVGTndNQUlBQkNBQ0FGUW9lVnI2K1l0dDZibm45K0lBUWdBMzFDejliVHZ0TEhxOWxDZm53Z0MwTGozTXFWL003eTlZVi9mbndpQTBJbGlDQURoVUw1ODkzeG1mS1pxeForSWdOQ0lJZ2dBNFY5TndNSUM2RVBBd0YvRkg0Q2YwRUFJUVFnQWtINEFHb3BBd0FnQTMxQkFDa0QrSXdCSWdXRklnWkMvLy8vL3crRElnY2dBaWtEY0NBRGZFRUFLUVB3akFFaUNJVWlDVUlnaUNJS2ZpSUxRdi8vLy84UGd5QUdRaUNJSWdZZ0NVTC8vLy8vRDRNaUNYNThJQWNnQ1g0aUIwSWdpSHdpQ1VJZ2hpQUhRdi8vLy84UGc0UWdDMElnaUNBR0lBcCtmQ0FKUWlDSWZJVWdBa0hZQUdvcEF3QWdBMzFCQUNrRDJJd0JJZ2VGSWdaQy8vLy8vdytESWdrZ0Fpa0RVQ0FEZkVFQUtRUFFqQUVpQ29VaUMwSWdpQ0lNZmlJTlF2Ly8vLzhQZ3lBR1FpQ0lJZ1lnQzBMLy8vLy9ENE1pQzM1OElBa2dDMzRpQ1VJZ2lId2lDMElnaGlBSlF2Ly8vLzhQZzRRZ0RVSWdpQ0FHSUF4K2ZDQUxRaUNJZklVZ0FrRTRhaWtEQUNBRGZVRUFLUU80akFFaUNZVWlCa0wvLy8vL0Q0TWlDeUFDS1FNd0lBTjhRUUFwQTdDTUFTSU1oU0lOUWlDSUlnNStJZzlDLy8vLy93K0RJQVpDSUlnaUJpQU5Rdi8vLy84UGd5SU5mbndnQ3lBTmZpSUxRaUNJZkNJTlFpQ0dJQXRDLy8vLy93K0RoQ0FQUWlDSUlBWWdEbjU4SUExQ0lJaDhoU0FDUVJocUtRTUFJQU45UVFBcEE1aU1BU0lMaFNJR1F2Ly8vLzhQZ3lJTklBSXBBeEFnQTN4QkFDa0RrSXdCSWc2RklnOUNJSWdpRUg0aUVVTC8vLy8vRDRNZ0JrSWdpQ0lHSUE5Qy8vLy8vdytESWc5K2ZDQU5JQTkrSWcxQ0lJaDhJZzlDSUlZZ0RVTC8vLy8vRDRPRUlCRkNJSWdnQmlBUWZud2dEMElnaUh5RlFRQXBBNGlNQVNJTlFRQXBBNENNQVNJUGZJVjhRUUFwQTZpTUFTSVFRUUFwQTZDTUFTSVJmSVY4UVFBcEE4aU1BU0lTUVFBcEE4Q01BU0lUZklWOFFRQXBBK2lNQVNJVVFRQXBBK0NNQVNJVmZJVWlCa0lsaUNBR2hVTDU4OTN4bWZLWnF4WitJZ1pDSUlnZ0JvVWhCaUFDUWVnQWFpa0RBQ0FEZlNBVWhTSVVRdi8vLy84UGd5SVdJQUlwQTJBZ0Ezd2dGWVVpRlVJZ2lDSVhmaUlZUXYvLy8vOFBneUFVUWlDSUloUWdGVUwvLy8vL0Q0TWlGWDU4SUJZZ0ZYNGlGVUlnaUh3aUZrSWdoaUFWUXYvLy8vOFBnNFFnR0VJZ2lDQVVJQmQrZkNBV1FpQ0lmSVVnQWtISUFHb3BBd0FnQTMwZ0VvVWlFa0wvLy8vL0Q0TWlGQ0FDS1FOQUlBTjhJQk9GSWhOQ0lJZ2lGWDRpRmtMLy8vLy9ENE1nRWtJZ2lDSVNJQk5DLy8vLy93K0RJaE4rZkNBVUlCTitJaE5DSUloOEloUkNJSVlnRTBMLy8vLy9ENE9FSUJaQ0lJZ2dFaUFWZm53Z0ZFSWdpSHlGSUFKQktHb3BBd0FnQTMwZ0VJVWlFRUwvLy8vL0Q0TWlFaUFDS1FNZ0lBTjhJQkdGSWhGQ0lJZ2lFMzRpRkVMLy8vLy9ENE1nRUVJZ2lDSVFJQkZDLy8vLy93K0RJaEYrZkNBU0lCRitJaEZDSUloOEloSkNJSVlnRVVMLy8vLy9ENE9FSUJSQ0lJZ2dFQ0FUZm53Z0VrSWdpSHlGSUFKQkNHb3BBd0FnQTMwZ0RZVWlEVUwvLy8vL0Q0TWlFQ0FDS1FNQUlBTjhJQStGSWc5Q0lJZ2lFWDRpRWtMLy8vLy9ENE1nRFVJZ2lDSU5JQTlDLy8vLy93K0RJZzkrZkNBUUlBOStJZzlDSUloOEloQkNJSVlnRDBMLy8vLy9ENE9FSUJKQ0lJZ2dEU0FSZm53Z0VFSWdpSHlGSUFHdElnOUNoNVd2cjVpMjNwdWVmMzU4SUFzZ0RueUZmQ0FKSUF4OGhYd2dCeUFLZklWOElBVWdDSHlGSWdWQ0pZZ2dCWVZDK2ZQZDhabnltYXNXZmlJRlFpQ0lJQVdGSVFVQ1FDQUJRYUFCU0EwQUlBRkJCWFpCZkdvaEdRTkFJQUlnQkdvaUdrRWJhaWtEQUNBRGZTQUVRWmlOQVdvcEF3QWlCNFVpQ0VMLy8vLy9ENE1pQ1NBYVFSTnFLUU1BSUFOOElBUkJrSTBCYWlrREFDSUtoU0lMUWlDSUlneCtJZzFDLy8vLy93K0RJQWhDSUlnaUNDQUxRdi8vLy84UGd5SUxmbndnQ1NBTGZpSUpRaUNJZkNJTFFpQ0dJQWxDLy8vLy93K0RoQ0FOUWlDSUlBZ2dESDU4SUF0Q0lJaDhoU0FHZkNBRVFZaU5BV29wQXdBaUNDQUVRWUNOQVdvcEF3QWlDWHlGSVFZZ0drRUxhaWtEQUNBRGZTQUloU0lJUXYvLy8vOFBneUlMSUJwQkEyb3BBd0FnQTN3Z0NZVWlDVUlnaUNJTWZpSU5Rdi8vLy84UGd5QUlRaUNJSWdnZ0NVTC8vLy8vRDRNaUNYNThJQXNnQ1g0aUNVSWdpSHdpQzBJZ2hpQUpRdi8vLy84UGc0UWdEVUlnaUNBSUlBeCtmQ0FMUWlDSWZJVWdCWHdnQnlBS2ZJVWhCU0FFUVNCcUlRUWdHVUYvYWlJWkRRQUxDeUFBSUFKQi93QnFLUU1BSUFOOElBRkI2SXNCYWlrREFDSUhoU0lJUXYvLy8vOFBneUlKSUFJcEEzY2dBMzBnQVVIZ2l3RnFLUU1BSWdxRklndENJSWdpREg0aURVTC8vLy8vRDRNZ0NFSWdpQ0lJSUF0Qy8vLy8vdytESWd0K2ZDQUpJQXQrSWdsQ0lJaDhJZ3RDSUlZZ0NVTC8vLy8vRDRPRUlBMUNJSWdnQ0NBTWZud2dDMElnaUh5RklBWjhJQUZCK0lzQmFpa0RBQ0lHSUFGQjhJc0JhaWtEQUNJSWZJVWlDU0FDUWU4QWFpa0RBQ0FEZkNBR2hTSUdRdi8vLy84UGd5SUxJQUlwQTJjZ0EzMGdDSVVpQ0VJZ2lDSU1maUlOUXYvLy8vOFBneUFHUWlDSUlnWWdDRUwvLy8vL0Q0TWlDSDU4SUFzZ0NINGlDRUlnaUh3aUMwSWdoaUFJUXYvLy8vOFBnNFFnRFVJZ2lDQUdJQXgrZkNBTFFpQ0lmSVVnQlh3Z0J5QUtmSVVpQm53aUJVSWxpQ0FGaFVMNTg5M3htZktacXhaK0lnVkNJSWdnQllVM0F3QWdBRUlBSUFaQ2g1V3ZyNWkyM3B1ZWYzNGdEeUFEZlVMUDF0Tyswc2VyMlVKK2ZDQUpRdVBjeXBYOHp2TDFoWDkrZkNJRFFpV0lJQU9GUXZuejNmR1o4cG1yRm40aUEwSWdpQ0FEaFgwM0F3Z0wzd1VDQVg0QmZ3SkFBa0JCQUNrRGdBb2lBRkJGRFFCQmdBZ2hBVUlBSVFBTUFRc0NRRUVBS1FPZ2pnRWdBRklOQUVFQUlRRU1BUXRCQUNFQlFRQkNyNi92MTd6M2txRCtBQ0FBZlRjRCtJc0JRUUFnQUVMRmx1djUyTktGZ2loOE53UHdpd0ZCQUVLUDhlT05yWS8wbUU0Z0FIMDNBK2lMQVVFQUlBQkNxNno0eGRYdjBkQjhmRGNENElzQlFRQkMwNjNVc3BLRnRiU2VmeUFBZlRjRDJJc0JRUUFnQUVLWG12U085WmE4N2NrQWZEY0QwSXNCUVFCQ3hZT0MvYS8veExGcklBQjlOd1BJaXdGQkFDQUFRdXFMczUzSTV2VDFRM3czQThDTEFVRUFRc2kvK3N1Y205NjU1QUFnQUgwM0E3aUxBVUVBSUFCQ2lxT0IzOVNaN2F3eGZEY0RzSXNCUVFCQytibnZ2Zno0d3FjZElBQjlOd09vaXdGQkFDQUFRcWoxMi91em5LZWFQM3czQTZDTEFVRUFRcml5dkxlVTFiZldXQ0FBZlRjRG1Jc0JRUUFnQUVMeHlLRzZxYlREL000QWZEY0RrSXNCUVFCQ2lLR1gyN2pqbEplamZ5QUFmVGNEaUlzQlFRQWdBRUs4ME1qYW0vS3dnRXQ4TndPQWl3RkJBRUxnNjhDMG50Q09rOHdBSUFCOU53UDRpZ0ZCQUNBQVFyaVJtS0wzL3BDU2puOThOd1B3aWdGQkFFS0N0Y0h1eC9tL3VTRWdBSDAzQStpS0FVRUFJQUJDeS9PWjk4U1o4UEw0QUh3M0ErQ0tBVUVBUXZLQWthWDY5dXl6SHlBQWZUY0QySW9CUVFBZ0FFTGVxYmZMdnBEa3kxdDhOd1BRaWdGQkFFTDhnb1RrOHI3STFod2dBSDAzQThpS0FVRUFJQUJDdVAyenk3T0U2YVcrZjN3M0E4Q0tBUXRCQUVJQU53T1FqZ0ZCQUVJQU53T0lqZ0ZCQUVJQU53T0FqZ0ZCQUVLOTNNcVZERGNEZ0lvQlFRQkNoNVd2cjVpMjNwdWVmemNEaUlvQlFRQkN6OWJUdnRMSHE5bENOd09RaWdGQkFFTDU4OTN4bWZhWnF4WTNBNWlLQVVFQVF1UGN5cFg4enZMMWhYODNBNkNLQVVFQVF2ZVVyNjhJTndPb2lnRkJBRUxGejlteThlVzY2aWMzQTdDS0FVRUFRckh6M2ZFSk53TzRpZ0ZCQUNBQU53T2dqZ0ZCQUNBQk5nS3dqZ0ZCQUVLUWdJQ0FnQkEzQTVpT0FRdUNDZ0VJZjBFQVFRQXBBNUNPQVNBQXJYdzNBNUNPQVFKQUFrQUNRRUVBS0FLQWpnRWlBU0FBYWlJQ1FZQUNTdzBBSUFGQmdJd0JhaUVEUVlBS0lRUUNRQ0FBUVFoUERRQWdBQ0VCREFJTEFrQUNRQ0FBUVhocUlnVkJBM1pCQVdwQkIzRWlCZzBBUVlBS0lRUWdBQ0VCREFFTElBWkJBM1FoQVVHQUNpRUVBMEFnQXlBRUtRTUFOd01BSUFOQkNHb2hBeUFFUVFocUlRUWdCa0YvYWlJR0RRQUxJQUFnQVdzaEFRc2dCVUU0U1EwQkEwQWdBeUFFS1FNQU53TUFJQU5CQ0dvZ0JFRUlhaWtEQURjREFDQURRUkJxSUFSQkVHb3BBd0EzQXdBZ0EwRVlhaUFFUVJocUtRTUFOd01BSUFOQklHb2dCRUVnYWlrREFEY0RBQ0FEUVNocUlBUkJLR29wQXdBM0F3QWdBMEV3YWlBRVFUQnFLUU1BTndNQUlBTkJPR29nQkVFNGFpa0RBRGNEQUNBRFFjQUFhaUVESUFSQndBQnFJUVFnQVVGQWFpSUJRUWRMRFFBTUFnc0xRWUFLSVFRZ0FFR0FDbW9oQlVFQUtBS3dqZ0VpQTBIQWlnRWdBeHNoQmdKQUlBRkZEUUFnQVVHQWpBRnFJUU5CZ0FvaEJBSkFBa0JCZ0FJZ0FXc2lCMEVJVHcwQUlBY2hBQXdCQ3dKQUFrQkIrQUVnQVdzaUNFRURka0VCYWtFSGNTSUNEUUJCZ0FvaEJDQUhJUUFNQVF0QmdBb2hCQ0FDUVFOMElnQWhBZ05BSUFNZ0JDa0RBRGNEQUNBRFFRaHFJUU1nQkVFSWFpRUVJQUpCZUdvaUFnMEFDMEdBQWlBQklBQnFheUVBQ3lBSVFUaEpEUUFEUUNBRElBUXBBd0EzQXdBZ0EwRUlhaUFFUVFocUtRTUFOd01BSUFOQkVHb2dCRUVRYWlrREFEY0RBQ0FEUVJocUlBUkJHR29wQXdBM0F3QWdBMEVnYWlBRVFTQnFLUU1BTndNQUlBTkJLR29nQkVFb2Fpa0RBRGNEQUNBRFFUQnFJQVJCTUdvcEF3QTNBd0FnQTBFNGFpQUVRVGhxS1FNQU53TUFJQU5Cd0FCcUlRTWdCRUhBQUdvaEJDQUFRVUJxSWdCQkIwc05BQXNMQWtBZ0FFVU5BQUpBQWtBZ0FFRUhjU0lDRFFBZ0FDRUJEQUVMSUFCQmVIRWhBUU5BSUFNZ0JDMEFBRG9BQUNBRFFRRnFJUU1nQkVFQmFpRUVJQUpCZjJvaUFnMEFDd3NnQUVFSVNRMEFBMEFnQXlBRUtRQUFOd0FBSUFOQkNHb2hBeUFFUVFocUlRUWdBVUY0YWlJQkRRQUxDMEdBaWdGQmlJNEJRUUFvQXBpT0FVR0FqQUZCQkNBR1FRQW9BcHlPQVJBQ1FRQkJBRFlDZ0k0QklBZEJnQXBxSVFRTEFrQWdCRUdBQW1vZ0JVOE5BQ0FGUVlCK2FpRURBMEJCZ0lvQlFZaU9BVUVBS0FLWWpnRWdCRUVFSUFaQkFDZ0NuSTRCRUFJZ0JFR0FBbW9pQkNBRFNRMEFDMEVBSUFSQlFHb3BBd0EzQThDTkFVRUFJQVJCU0dvcEF3QTNBOGlOQVVFQUlBUkJVR29wQXdBM0E5Q05BVUVBSUFSQldHb3BBd0EzQTlpTkFVRUFJQVJCWUdvcEF3QTNBK0NOQVVFQUlBUkJhR29wQXdBM0EraU5BVUVBSUFSQmNHb3BBd0EzQS9DTkFVRUFJQVJCZUdvcEF3QTNBL2lOQVF0QmdJd0JJUU1DUUFKQUlBVWdCR3NpQWtFSVR3MEFJQUloQmd3QkMwR0FqQUVoQXlBQ0lRWURRQ0FESUFRcEF3QTNBd0FnQTBFSWFpRURJQVJCQ0dvaEJDQUdRWGhxSWdaQkIwc05BQXNMSUFaRkRRRURRQ0FESUFRdEFBQTZBQUFnQTBFQmFpRURJQVJCQVdvaEJDQUdRWDlxSWdZTkFBd0NDd3NnQVVVTkFBSkFBa0FnQVVFSGNTSUdEUUFnQVNFQ0RBRUxJQUZCZUhFaEFnTkFJQU1nQkMwQUFEb0FBQ0FEUVFGcUlRTWdCRUVCYWlFRUlBWkJmMm9pQmcwQUN3c0NRQ0FCUVFoSkRRQURRQ0FESUFRcEFBQTNBQUFnQTBFSWFpRURJQVJCQ0dvaEJDQUNRWGhxSWdJTkFBc0xRUUFvQW9DT0FTQUFhaUVDQzBFQUlBSTJBb0NPQVF1UUVRWUVmd0orQVg4RGZnVi9BbjRqQUNJQUlRRWdBRUdBQVd0QlFIRWlBaVFBUVFBb0FyQ09BU0lBUWNDS0FTQUFHeUVEQWtBQ1FFRUFLUU9RamdFaUJFTHhBVlFOQUNBQ1FRQXBBNENLQVRjREFDQUNRUUFwQTRpS0FUY0RDQ0FDUVFBcEE1Q0tBVGNERUNBQ1FRQXBBNWlLQVRjREdDQUNRUUFwQTZDS0FUY0RJQ0FDUVFBcEE2aUtBVGNES0NBQ1FRQXBBN0NLQVNJRU53TXdJQUpCQUNrRHVJb0JJZ1UzQXpnQ1FBSkFRUUFvQW9DT0FTSUdRY0FBU1EwQUlBSkJBQ2dDaUk0Qk5nSkFJQUlnQWtIQUFHcEJBQ2dDbUk0QlFZQ01BU0FHUVg5cVFRWjJJQU5CQUNnQ25JNEJJZ0FRQWlBQ0lBSXBBd2dnQmtIQWl3RnFLUU1BSWdSOElBTWdBR29pQUVFQmFpa0RBQ0FHUWNpTEFXb3BBd0FpQllVaUIwSWdpQ0FIUXYvLy8vOFBnMzU4TndNSUlBSWdBaWtER0NBR1FkQ0xBV29wQXdBaUIzd2dBRUVSYWlrREFDQUdRZGlMQVdvcEF3QWlDSVVpQ1VJZ2lDQUpRdi8vLy84UGczNThOd01ZSUFJZ0JTQUVJQUJCZVdvcEF3Q0ZJZ1JDSUlnZ0JFTC8vLy8vRDROK0lBSXBBd0I4ZkRjREFDQUNJQWdnQnlBQVFRbHFLUU1BaFNJRVFpQ0lJQVJDLy8vLy93K0RmaUFDS1FNUWZIdzNBeEFnQUVFWmFpa0RBQ0VFSUFJcEF5QWhCU0FDSUFJcEF5Z2dCa0hnaXdGcUtRTUFJZ2Q4SUFCQklXb3BBd0FnQmtIb2l3RnFLUU1BSWdpRklnbENJSWdnQ1VMLy8vLy9ENE4rZkRjREtDQUNJQWdnQlNBRUlBZUZJZ1JDSUlnZ0JFTC8vLy8vRDROK2ZIdzNBeUFnQWlBQ0tRTTRJQVpCOElzQmFpa0RBQ0lFZkNBQVFURnFLUU1BSUFaQitJc0JhaWtEQUNJRmhTSUhRaUNJSUFkQy8vLy8vdytEZm53M0F6Z2dBaUFGSUFRZ0FFRXBhaWtEQUlVaUJFSWdpQ0FFUXYvLy8vOFBnMzRnQWlrRE1IeDhOd013REFFTElBWkJ3STBCYWlFS1FjQUFJQVpySVFzZ0FrSEFBR29oQUFKQUFrQUNRQ0FHUVRoTkRRQWdDeUVNREFFTEFrQUNRRUU0SUFacklnMUJBM1pCQVdwQkIzRWlEQTBBSUFKQndBQnFJUUFnQ3lFTURBRUxJQUpCd0FCcUlRQWdERUVEZENJT0lRd0RRQ0FBSUFvcEF3QTNBd0FnQUVFSWFpRUFJQXBCQ0dvaENpQU1RWGhxSWd3TkFBdEJ3QUFnQmlBT2Ftc2hEQXNDUUNBTlFUaEpEUUFEUUNBQUlBb3BBd0EzQXdBZ0FFRUlhaUFLUVFocUtRTUFOd01BSUFCQkVHb2dDa0VRYWlrREFEY0RBQ0FBUVJocUlBcEJHR29wQXdBM0F3QWdBRUVnYWlBS1FTQnFLUU1BTndNQUlBQkJLR29nQ2tFb2Fpa0RBRGNEQUNBQVFUQnFJQXBCTUdvcEF3QTNBd0FnQUVFNGFpQUtRVGhxS1FNQU53TUFJQUJCd0FCcUlRQWdDa0hBQUdvaENpQU1RVUJxSWd4QkIwc05BQXNMSUF4RkRRRUxJQXhCZjJvaERnSkFJQXhCQjNFaURVVU5BQ0FNUVhoeElRd0RRQ0FBSUFvdEFBQTZBQUFnQUVFQmFpRUFJQXBCQVdvaENpQU5RWDlxSWcwTkFBc0xJQTVCQjBrTkFBTkFJQUFnQ2lrQUFEY0FBQ0FBUVFocUlRQWdDa0VJYWlFS0lBeEJlR29pREEwQUN3c2dBa0hBQUdvZ0Myb2hDa0dBakFFaEFBSkFBa0FDUUNBR1FRaEpEUUFDUUNBR1FUaHFRUU4yUVFGcVFRZHhJZ3dOQUF3Q0N5QU1RUU4wSVExQmdJd0JJUUFEUUNBS0lBQXBBd0EzQXdBZ0NrRUlhaUVLSUFCQkNHb2hBQ0FNUVg5cUlnd05BQXNnQmlBTmF5RUdDeUFHUlEwQkFrQWdCa0VIY1NJTkRRQWdCaUVNREFFTElBWkJlSEVoREFOQUlBb2dBQzBBQURvQUFDQUtRUUZxSVFvZ0FFRUJhaUVBSUExQmYyb2lEUTBBQ3dzZ0JrRUlTUTBBQTBBZ0NpQUFLUUFBTndBQUlBcEJDR29oQ2lBQVFRaHFJUUFnREVGNGFpSU1EUUFMQ3lBQ0lBSXBBd2dnQWlrRFFDSUhmQ0FEUVFBb0FweU9BV29pQUVFQmFpa0RBQ0FDS1FOSUlnaUZJZ2xDSUlnZ0NVTC8vLy8vRDROK2ZEY0RDQ0FDSUFJcEF4Z2dBaWtEVUNJSmZDQUFRUkZxS1FNQUlBSXBBMWdpRDRVaUVFSWdpQ0FRUXYvLy8vOFBnMzU4TndNWUlBSWdDQ0FISUFCQmVXb3BBd0NGSWdkQ0lJZ2dCMEwvLy8vL0Q0TitJQUlwQXdCOGZEY0RBQ0FDSUE4Z0NTQUFRUWxxS1FNQWhTSUhRaUNJSUFkQy8vLy8vdytEZmlBQ0tRTVFmSHczQXhBZ0FFRVphaWtEQUNFSElBSXBBeUFoQ0NBQ0lBSXBBeWdnQWlrRFlDSUpmQ0FBUVNGcUtRTUFJQUlwQTJnaUQ0VWlFRUlnaUNBUVF2Ly8vLzhQZzM1OE53TW9JQUlnRHlBSUlBY2dDWVVpQjBJZ2lDQUhRdi8vLy84UGczNThmRGNESUNBQ0lBVWdBaWtEY0NJSGZDQUFRVEZxS1FNQUlBSXBBM2dpQllVaUNFSWdpQ0FJUXYvLy8vOFBnMzU4TndNNElBSWdCU0FISUFCQktXb3BBd0NGSWdkQ0lJZ2dCMEwvLy8vL0Q0TitJQVI4ZkRjRE1Bc2dBaUFDSUFOQkMycEJBQ2tEa0k0QklnUkNoNVd2cjVpMjNwdWVmMzRRQXpjRFFDQUNJQUlnQTBFQUtBS2NqZ0ZxUVhWcUlBUkN6OWJUdnRMSHE5bENma0ovaFJBRE53TklEQUVMSUFTbklRQUNRRUVBS1FPZ2pnRWlCRkFOQUFKQUlBQkJFRXNOQUNBQ1FjQUFhaUFBUVlBSUlBUVFCQXdDQ3dKQUlBQkJnQUZMRFFBZ0FrSEFBR29nQUVHQUNDQUVFQVVNQWdzZ0FrSEFBR29nQUVHQUNDQUVFQVlNQVFzQ1FDQUFRUkJMRFFBZ0FrSEFBR29nQUNBRFFnQVFCQXdCQ3dKQUlBQkJnQUZMRFFBZ0FrSEFBR29nQUNBRFFnQVFCUXdCQ3lBQ1FjQUFhaUFBSUFOQ0FCQUdDMEVBSUFJcEEzQTNBN2dLUVFBZ0Fpa0RZRGNEcUFwQkFDQUNLUU5RTndPWUNrRUFJQUpCK0FCcUtRTUFOd1BBQ2tFQUlBSkI2QUJxS1FNQU53T3dDa0VBSUFKQjJBQnFLUU1BTndPZ0NrRUFJQUlwQTBnaUJFSTRoaUFFUW9EK0E0TkNLSWFFSUFSQ2dJRDhCNE5DR0lZZ0JFS0FnSUQ0RDROQ0NJYUVoQ0FFUWdpSVFvQ0FnUGdQZ3lBRVFoaUlRb0NBL0FlRGhDQUVRaWlJUW9EK0E0TWdCRUk0aUlTRWhDSUVOd09BQ2tFQUlBUTNBNUFLUVFBZ0Fpa0RRQ0lFUWppR0lBUkNnUDREZzBJb2hvUWdCRUtBZ1B3SGcwSVloaUFFUW9DQWdQZ1BnMElJaG9TRUlBUkNDSWhDZ0lDQStBK0RJQVJDR0loQ2dJRDhCNE9FSUFSQ0tJaENnUDREZ3lBRVFqaUloSVNFTndPSUNpQUJKQUFMQmdCQmdJb0JDd0lBQ3d2TUFRRUFRWUFJQzhRQnVQNXNPU09rUzc1OEFZRXM5eUd0SE43VWJlbURrSmZiY2tDa3BMZXpaeC9MZWVaT3pNRGxlSUphMEgzTS8zSWh1QWhHZFBkREpJN2dOWkRtZ1RvbVREd29VcnVSd3dETGlOQmxpeHRUTHFOeFpFaVhvZzM1VGpnWjcwYXAzcXpZcVBwMlArT2NORC81M0x2SHh3dFBIWXBSNEV2TnRGa3h5SjkreWRsNGMyVHF4YXlETk5Qcnc4V0JvUC82RTJQckZ3M2RVYmZ3MmtuVEZsVW1LZFJvbmlzV3ZsaDlSNkg4ai9pNDBYclFNYzVGeXpxUGxSWUVLSy9YKzhxN1MwQitRQUlBQUE9PVwiO1xuICAgIHZhciBoYXNoJDUgPSBcIjFmNjgyZDkxXCI7XG4gICAgdmFyIHdhc21Kc29uJDUgPSB7XG4gICAgXHRuYW1lOiBuYW1lJDUsXG4gICAgXHRkYXRhOiBkYXRhJDUsXG4gICAgXHRoYXNoOiBoYXNoJDVcbiAgICB9O1xuXG4gICAgY29uc3QgbXV0ZXgkMyA9IG5ldyBNdXRleCgpO1xuICAgIGxldCB3YXNtQ2FjaGUkMyA9IG51bGw7XG4gICAgY29uc3Qgc2VlZEJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcig4KTtcbiAgICBmdW5jdGlvbiB2YWxpZGF0ZVNlZWQoc2VlZCkge1xuICAgICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIoc2VlZCkgfHwgc2VlZCA8IDAgfHwgc2VlZCA+IDB4RkZGRkZGRkYpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ1NlZWQgbXVzdCBiZSBnaXZlbiBhcyB0d28gdmFsaWQgMzItYml0IGxvbmcgdW5zaWduZWQgaW50ZWdlcnMgKGxvICsgaGlnaCkuJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHdyaXRlU2VlZChhcnIsIGxvdywgaGlnaCkge1xuICAgICAgICAvLyB3cml0ZSBpbiBsaXR0bGUtZW5kaWFuIGZvcm1hdFxuICAgICAgICBjb25zdCBidWZmZXIgPSBuZXcgRGF0YVZpZXcoYXJyKTtcbiAgICAgICAgYnVmZmVyLnNldFVpbnQzMigwLCBsb3csIHRydWUpO1xuICAgICAgICBidWZmZXIuc2V0VWludDMyKDQsIGhpZ2gsIHRydWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGVzIHh4SGFzaDEyOCBoYXNoXG4gICAgICogQHBhcmFtIGRhdGEgSW5wdXQgZGF0YSAoc3RyaW5nLCBCdWZmZXIgb3IgVHlwZWRBcnJheSlcbiAgICAgKiBAcGFyYW0gc2VlZExvdyBMb3dlciAzMiBiaXRzIG9mIHRoZSBudW1iZXIgdXNlZCB0b1xuICAgICAqICBpbml0aWFsaXplIHRoZSBpbnRlcm5hbCBzdGF0ZSBvZiB0aGUgYWxnb3JpdGhtIChkZWZhdWx0cyB0byAwKVxuICAgICAqIEBwYXJhbSBzZWVkSGlnaCBIaWdoZXIgMzIgYml0cyBvZiB0aGUgbnVtYmVyIHVzZWQgdG9cbiAgICAgKiAgaW5pdGlhbGl6ZSB0aGUgaW50ZXJuYWwgc3RhdGUgb2YgdGhlIGFsZ29yaXRobSAoZGVmYXVsdHMgdG8gMClcbiAgICAgKiBAcmV0dXJucyBDb21wdXRlZCBoYXNoIGFzIGEgaGV4YWRlY2ltYWwgc3RyaW5nXG4gICAgICovXG4gICAgZnVuY3Rpb24geHhoYXNoMTI4KGRhdGEsIHNlZWRMb3cgPSAwLCBzZWVkSGlnaCA9IDApIHtcbiAgICAgICAgaWYgKHZhbGlkYXRlU2VlZChzZWVkTG93KSkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHZhbGlkYXRlU2VlZChzZWVkTG93KSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbGlkYXRlU2VlZChzZWVkSGlnaCkpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCh2YWxpZGF0ZVNlZWQoc2VlZEhpZ2gpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAod2FzbUNhY2hlJDMgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NrZWRDcmVhdGUobXV0ZXgkMywgd2FzbUpzb24kNSwgMTYpXG4gICAgICAgICAgICAgICAgLnRoZW4oKHdhc20pID0+IHtcbiAgICAgICAgICAgICAgICB3YXNtQ2FjaGUkMyA9IHdhc207XG4gICAgICAgICAgICAgICAgd3JpdGVTZWVkKHNlZWRCdWZmZXIsIHNlZWRMb3csIHNlZWRIaWdoKTtcbiAgICAgICAgICAgICAgICB3YXNtQ2FjaGUkMy53cml0ZU1lbW9yeShuZXcgVWludDhBcnJheShzZWVkQnVmZmVyKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdhc21DYWNoZSQzLmNhbGN1bGF0ZShkYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB3cml0ZVNlZWQoc2VlZEJ1ZmZlciwgc2VlZExvdywgc2VlZEhpZ2gpO1xuICAgICAgICAgICAgd2FzbUNhY2hlJDMud3JpdGVNZW1vcnkobmV3IFVpbnQ4QXJyYXkoc2VlZEJ1ZmZlcikpO1xuICAgICAgICAgICAgY29uc3QgaGFzaCA9IHdhc21DYWNoZSQzLmNhbGN1bGF0ZShkYXRhKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoaGFzaCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyB4eEhhc2gxMjggaGFzaCBpbnN0YW5jZVxuICAgICAqIEBwYXJhbSBzZWVkTG93IExvd2VyIDMyIGJpdHMgb2YgdGhlIG51bWJlciB1c2VkIHRvXG4gICAgICogIGluaXRpYWxpemUgdGhlIGludGVybmFsIHN0YXRlIG9mIHRoZSBhbGdvcml0aG0gKGRlZmF1bHRzIHRvIDApXG4gICAgICogQHBhcmFtIHNlZWRIaWdoIEhpZ2hlciAzMiBiaXRzIG9mIHRoZSBudW1iZXIgdXNlZCB0b1xuICAgICAqICBpbml0aWFsaXplIHRoZSBpbnRlcm5hbCBzdGF0ZSBvZiB0aGUgYWxnb3JpdGhtIChkZWZhdWx0cyB0byAwKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVhYSGFzaDEyOChzZWVkTG93ID0gMCwgc2VlZEhpZ2ggPSAwKSB7XG4gICAgICAgIGlmICh2YWxpZGF0ZVNlZWQoc2VlZExvdykpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCh2YWxpZGF0ZVNlZWQoc2VlZExvdykpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWxpZGF0ZVNlZWQoc2VlZEhpZ2gpKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QodmFsaWRhdGVTZWVkKHNlZWRIaWdoKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFdBU01JbnRlcmZhY2Uod2FzbUpzb24kNSwgMTYpLnRoZW4oKHdhc20pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGluc3RhbmNlQnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKDgpO1xuICAgICAgICAgICAgd3JpdGVTZWVkKGluc3RhbmNlQnVmZmVyLCBzZWVkTG93LCBzZWVkSGlnaCk7XG4gICAgICAgICAgICB3YXNtLndyaXRlTWVtb3J5KG5ldyBVaW50OEFycmF5KGluc3RhbmNlQnVmZmVyKSk7XG4gICAgICAgICAgICB3YXNtLmluaXQoKTtcbiAgICAgICAgICAgIGNvbnN0IG9iaiA9IHtcbiAgICAgICAgICAgICAgICBpbml0OiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHdhc20ud3JpdGVNZW1vcnkobmV3IFVpbnQ4QXJyYXkoaW5zdGFuY2VCdWZmZXIpKTtcbiAgICAgICAgICAgICAgICAgICAgd2FzbS5pbml0KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB1cGRhdGU6IChkYXRhKSA9PiB7IHdhc20udXBkYXRlKGRhdGEpOyByZXR1cm4gb2JqOyB9LFxuICAgICAgICAgICAgICAgIGRpZ2VzdDogKG91dHB1dFR5cGUpID0+IHdhc20uZGlnZXN0KG91dHB1dFR5cGUpLFxuICAgICAgICAgICAgICAgIHNhdmU6ICgpID0+IHdhc20uc2F2ZSgpLFxuICAgICAgICAgICAgICAgIGxvYWQ6IChkYXRhKSA9PiB7IHdhc20ubG9hZChkYXRhKTsgcmV0dXJuIG9iajsgfSxcbiAgICAgICAgICAgICAgICBibG9ja1NpemU6IDUxMixcbiAgICAgICAgICAgICAgICBkaWdlc3RTaXplOiAxNixcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgbmFtZSQ0ID0gXCJyaXBlbWQxNjBcIjtcbiAgICB2YXIgZGF0YSQ0ID0gXCJBR0Z6YlFFQUFBQUJFUVJnQUFGL1lBQUFZQUYvQUdBQ2YzOEFBd2tJQUFFQ0F3SUJBQUlGQkFFQkFnSUdEZ0ovQVVIZ2lRVUxmd0JCZ0FnTEI0TUJDUVp0WlcxdmNua0NBQTVJWVhOb1gwZGxkRUoxWm1abGNnQUFDVWhoYzJoZlNXNXBkQUFCRUhKcGNHVnRaREUyTUY5MWNHUmhkR1VBQXd0SVlYTm9YMVZ3WkdGMFpRQUVDa2hoYzJoZlJtbHVZV3dBQlExSVlYTm9YMGRsZEZOMFlYUmxBQVlPU0dGemFGOURZV3hqZFd4aGRHVUFCd3BUVkVGVVJWOVRTVnBGQXdFS3p6SUlCUUJCZ0FrTE9nQkJBRUh3dzh1ZWZEWUNtSWtCUVFCQy9ybnJ4ZW1PbFprUU53S1FpUUZCQUVLQnhwUzZsdkhxNW04M0FvaUpBVUVBUWdBM0FvQ0pBUXVQTEFFaGYwRUFJQUFvQWlRaUFTQUFLQUlBSWdJZ0FDZ0NFQ0lESUFJZ0FDZ0NMQ0lFSUFBb0Fnd2lCU0FBS0FJRUlnWWdBQ2dDUENJSElBSWdBQ2dDTUNJSUlBY2dBQ2dDQ0NJSlFRQW9Bb2lKQVNJS1FRQW9BcENKQVNJTFFRQW9BcFNKQVNJTVFYOXpja0VBS0FLTWlRRWlEWE5xSUFBb0FoUWlEbXBCNXBlS2hRVnFRUWgzUVFBb0FwaUpBU0lQYWlJUVFRcDNJaEZxSUFFZ0RVRUtkeUlTYWlBQ0lBdEJDbmNpRTJvZ0RDQUFLQUljSWhScUlBOGdBQ2dDT0NJVmFpQVFJQTBnRTBGL2MzSnpha0htbDRxRkJXcEJDWGNnREdvaUZpQVFJQkpCZjNOeWMycEI1cGVLaFFWcVFRbDNJQk5xSWhBZ0ZpQVJRWDl6Y25OcVFlYVhpb1VGYWtFTGR5QVNhaUlYSUJBZ0ZrRUtkeUlXUVg5emNuTnFRZWFYaW9VRmFrRU5keUFSYWlJWUlCY2dFRUVLZHlJWlFYOXpjbk5xUWVhWGlvVUZha0VQZHlBV2FpSWFRUXAzSWh0cUlBQW9BaGdpRUNBWVFRcDNJaHhxSUFBb0FqUWlFU0FYUVFwM0loZHFJQU1nR1dvZ0JDQVdhaUFhSUJnZ0YwRi9jM0p6YWtIbWw0cUZCV3BCRDNjZ0dXb2lGaUFhSUJ4QmYzTnljMnBCNXBlS2hRVnFRUVYzSUJkcUloY2dGaUFiUVg5emNuTnFRZWFYaW9VRmFrRUhkeUFjYWlJWUlCY2dGa0VLZHlJWlFYOXpjbk5xUWVhWGlvVUZha0VIZHlBYmFpSWFJQmdnRjBFS2R5SVhRWDl6Y25OcVFlYVhpb1VGYWtFSWR5QVphaUliUVFwM0loeHFJQVVnR2tFS2R5SWRhaUFBS0FJb0loWWdHRUVLZHlJWWFpQUdJQmRxSUFBb0FpQWlBQ0FaYWlBYklCb2dHRUYvYzNKemFrSG1sNHFGQldwQkMzY2dGMm9pRnlBYklCMUJmM055YzJwQjVwZUtoUVZxUVE1M0lCaHFJaGdnRnlBY1FYOXpjbk5xUWVhWGlvVUZha0VPZHlBZGFpSVpJQmdnRjBFS2R5SWFRWDl6Y25OcVFlYVhpb1VGYWtFTWR5QWNhaUliSUJrZ0dFRUtkeUljUVg5emNuTnFRZWFYaW9VRmFrRUdkeUFhYWlJZFFRcDNJaGRxSUFVZ0dVRUtkeUlZYWlBUUlCcHFJQnNnR0VGL2MzRnFJQjBnR0hGcVFhU2l0K0lGYWtFSmR5QWNhaUlhSUJkQmYzTnhhaUFFSUJ4cUlCMGdHMEVLZHlJWlFYOXpjV29nR2lBWmNXcEJwS0szNGdWcVFRMTNJQmhxSWhzZ0YzRnFRYVNpdCtJRmFrRVBkeUFaYWlJY0lCdEJDbmNpR0VGL2MzRnFJQlFnR1dvZ0d5QWFRUXAzSWhsQmYzTnhhaUFjSUJseGFrR2tvcmZpQldwQkIzY2dGMm9pR3lBWWNXcEJwS0szNGdWcVFReDNJQmxxSWgxQkNuY2lGMm9nRmlBY1FRcDNJaHBxSUJFZ0dXb2dHeUFhUVg5emNXb2dIU0FhY1dwQnBLSzM0Z1ZxUVFoM0lCaHFJaHdnRjBGL2MzRnFJQTRnR0dvZ0hTQWJRUXAzSWhoQmYzTnhhaUFjSUJoeGFrR2tvcmZpQldwQkNYY2dHbW9pR2lBWGNXcEJwS0szNGdWcVFRdDNJQmhxSWhzZ0drRUtkeUlaUVg5emNXb2dGU0FZYWlBYUlCeEJDbmNpR0VGL2MzRnFJQnNnR0hGcVFhU2l0K0lGYWtFSGR5QVhhaUljSUJseGFrR2tvcmZpQldwQkIzY2dHR29pSFVFS2R5SVhhaUFESUJ0QkNuY2lHbW9nQUNBWWFpQWNJQnBCZjNOeGFpQWRJQnB4YWtHa29yZmlCV3BCREhjZ0dXb2lHeUFYUVg5emNXb2dDQ0FaYWlBZElCeEJDbmNpR0VGL2MzRnFJQnNnR0hGcVFhU2l0K0lGYWtFSGR5QWFhaUlhSUJkeGFrR2tvcmZpQldwQkJuY2dHR29pSENBYVFRcDNJaGxCZjNOeGFpQUJJQmhxSUJvZ0cwRUtkeUlZUVg5emNXb2dIQ0FZY1dwQnBLSzM0Z1ZxUVE5M0lCZHFJaG9nR1hGcVFhU2l0K0lGYWtFTmR5QVlhaUliUVFwM0loMXFJQVlnR2tFS2R5SWVhaUFPSUJ4QkNuY2lGMm9nQnlBWmFpQUpJQmhxSUJvZ0YwRi9jM0ZxSUJzZ0YzRnFRYVNpdCtJRmFrRUxkeUFaYWlJWUlCdEJmM055SUI1emFrSHovY0RyQm1wQkNYY2dGMm9pRnlBWVFYOXpjaUFkYzJwQjgvM0E2d1pxUVFkM0lCNXFJaGtnRjBGL2MzSWdHRUVLZHlJWWMycEI4LzNBNndacVFROTNJQjFxSWhvZ0dVRi9jM0lnRjBFS2R5SVhjMnBCOC8zQTZ3WnFRUXQzSUJocUlodEJDbmNpSEdvZ0FTQWFRUXAzSWgxcUlCQWdHVUVLZHlJWmFpQVZJQmRxSUJRZ0dHb2dHeUFhUVg5emNpQVpjMnBCOC8zQTZ3WnFRUWgzSUJkcUloY2dHMEYvYzNJZ0hYTnFRZlA5d09zR2FrRUdkeUFaYWlJWUlCZEJmM055SUJ4emFrSHovY0RyQm1wQkJuY2dIV29pR1NBWVFYOXpjaUFYUVFwM0loZHpha0h6L2NEckJtcEJEbmNnSEdvaUdpQVpRWDl6Y2lBWVFRcDNJaGh6YWtIei9jRHJCbXBCREhjZ0Yyb2lHMEVLZHlJY2FpQVdJQnBCQ25jaUhXb2dDU0FaUVFwM0lobHFJQWdnR0dvZ0FDQVhhaUFiSUJwQmYzTnlJQmx6YWtIei9jRHJCbXBCRFhjZ0dHb2lGeUFiUVg5emNpQWRjMnBCOC8zQTZ3WnFRUVYzSUJscUloZ2dGMEYvYzNJZ0hITnFRZlA5d09zR2FrRU9keUFkYWlJWklCaEJmM055SUJkQkNuY2lGM05xUWZQOXdPc0dha0VOZHlBY2FpSWFJQmxCZjNOeUlCaEJDbmNpR0hOcVFmUDl3T3NHYWtFTmR5QVhhaUliUVFwM0loeHFJQkVnR0dvZ0F5QVhhaUFiSUJwQmYzTnlJQmxCQ25jaUdYTnFRZlA5d09zR2FrRUhkeUFZYWlJWUlCdEJmM055SUJwQkNuY2lHbk5xUWZQOXdPc0dha0VGZHlBWmFpSVhRUXAzSWhzZ0VDQWFhaUFZUVFwM0loMGdBQ0FaYWlBY0lCZEJmM054YWlBWElCaHhha0hwN2JYVEIycEJEM2NnR21vaUdFRi9jM0ZxSUJnZ0YzRnFRZW50dGRNSGFrRUZkeUFjYWlJWFFYOXpjV29nRnlBWWNXcEI2ZTIxMHdkcVFRaDNJQjFxSWhsQkNuY2lHbW9nQlNBYmFpQVhRUXAzSWh3Z0JpQWRhaUFZUVFwM0loMGdHVUYvYzNGcUlCa2dGM0ZxUWVudHRkTUhha0VMZHlBYmFpSVhRWDl6Y1dvZ0Z5QVpjV3BCNmUyMTB3ZHFRUTUzSUIxcUloaEJDbmNpR3lBSElCeHFJQmRCQ25jaUhpQUVJQjFxSUJvZ0dFRi9jM0ZxSUJnZ0YzRnFRZW50dGRNSGFrRU9keUFjYWlJWFFYOXpjV29nRnlBWWNXcEI2ZTIxMHdkcVFRWjNJQnBxSWhoQmYzTnhhaUFZSUJkeGFrSHA3YlhUQjJwQkRuY2dIbW9pR1VFS2R5SWFhaUFJSUJ0cUlCaEJDbmNpSENBT0lCNXFJQmRCQ25jaUhTQVpRWDl6Y1dvZ0dTQVljV3BCNmUyMTB3ZHFRUVozSUJ0cUloZEJmM054YWlBWElCbHhha0hwN2JYVEIycEJDWGNnSFdvaUdFRUtkeUliSUJFZ0hHb2dGMEVLZHlJZUlBa2dIV29nR2lBWVFYOXpjV29nR0NBWGNXcEI2ZTIxMHdkcVFReDNJQnhxSWhkQmYzTnhhaUFYSUJoeGFrSHA3YlhUQjJwQkNYY2dHbW9pR0VGL2MzRnFJQmdnRjNGcVFlbnR0ZE1IYWtFTWR5QWVhaUlaUVFwM0lob2dCMm9nRlNBWFFRcDNJaHhxSUJvZ0ZpQWJhaUFZUVFwM0loMGdGQ0FlYWlBY0lCbEJmM054YWlBWklCaHhha0hwN2JYVEIycEJCWGNnRzJvaUYwRi9jM0ZxSUJjZ0dYRnFRZW50dGRNSGFrRVBkeUFjYWlJWVFYOXpjV29nR0NBWGNXcEI2ZTIxMHdkcVFRaDNJQjFxSWhrZ0dFRUtkeUliY3lBZElBaHFJQmdnRjBFS2R5SVhjeUFaYzJwQkNIY2dHbW9pR0hOcVFRVjNJQmRxSWhwQkNuY2lIQ0FBYWlBWlFRcDNJaGtnQm1vZ0Z5QVdhaUFZSUJseklCcHpha0VNZHlBYmFpSVhJQnh6SUJzZ0Eyb2dHaUFZUVFwM0loaHpJQmR6YWtFSmR5QVphaUlaYzJwQkRIY2dHR29pR2lBWlFRcDNJaHR6SUJnZ0Rtb2dHU0FYUVFwM0loZHpJQnB6YWtFRmR5QWNhaUlZYzJwQkRuY2dGMm9pR1VFS2R5SWNJQlZxSUJwQkNuY2lHaUFKYWlBWElCUnFJQmdnR25NZ0dYTnFRUVozSUJ0cUloY2dISE1nR3lBUWFpQVpJQmhCQ25jaUdITWdGM05xUVFoM0lCcHFJaGx6YWtFTmR5QVlhaUlhSUJsQkNuY2lHM01nR0NBUmFpQVpJQmRCQ25jaUdITWdHbk5xUVFaM0lCeHFJaGx6YWtFRmR5QVlhaUljUVFwM0loMGdER29nQkNBV0lBNGdEaUFSSUJZZ0RpQVVJQUVnQUNBQklCQWdGQ0FFSUJBZ0JpQVBhaUFUSUExeklBc2dEWE1nREhNZ0Ntb2dBbXBCQzNjZ0Qyb2lGM05xUVE1M0lBeHFJaDVCQ25jaUgyb2dBeUFTYWlBSklBeHFJQmNnRW5NZ0huTnFRUTkzSUJOcUlnd2dIM01nQlNBVGFpQWVJQmRCQ25jaUUzTWdESE5xUVF4M0lCSnFJaEp6YWtFRmR5QVRhaUlYSUJKQkNuY2lIbk1nRXlBT2FpQVNJQXhCQ25jaURITWdGM05xUVFoM0lCOXFJaEp6YWtFSGR5QU1haUlUUVFwM0loOXFJQUVnRjBFS2R5SVhhaUFNSUJScUlCSWdGM01nRTNOcVFRbDNJQjVxSWd3Z0gzTWdIaUFBYWlBVElCSkJDbmNpRW5NZ0RITnFRUXQzSUJkcUloTnpha0VOZHlBU2FpSVhJQk5CQ25jaUhuTWdFaUFXYWlBVElBeEJDbmNpREhNZ0YzTnFRUTUzSUI5cUloSnpha0VQZHlBTWFpSVRRUXAzSWg5cUlCNGdFV29nRXlBU1FRcDNJaUJ6SUF3Z0NHb2dFaUFYUVFwM0lneHpJQk56YWtFR2R5QWVhaUlTYzJwQkIzY2dER29pRTBFS2R5SVhJQ0FnQjJvZ0V5QVNRUXAzSWg1eklBd2dGV29nRWlBZmN5QVRjMnBCQ1hjZ0lHb2lFM05xUVFoM0lCOXFJZ3hCZjNOeGFpQU1JQk54YWtHWjg0blVCV3BCQjNjZ0htb2lFa0VLZHlJZmFpQVJJQmRxSUF4QkNuY2lJQ0FESUI1cUlCTkJDbmNpRXlBU1FYOXpjV29nRWlBTWNXcEJtZk9KMUFWcVFRWjNJQmRxSWd4QmYzTnhhaUFNSUJKeGFrR1o4NG5VQldwQkNIY2dFMm9pRWtFS2R5SVhJQllnSUdvZ0RFRUtkeUllSUFZZ0Uyb2dIeUFTUVg5emNXb2dFaUFNY1dwQm1mT0oxQVZxUVExM0lDQnFJZ3hCZjNOeGFpQU1JQkp4YWtHWjg0blVCV3BCQzNjZ0gyb2lFa0YvYzNGcUlCSWdESEZxUVpuemlkUUZha0VKZHlBZWFpSVRRUXAzSWg5cUlBVWdGMm9nRWtFS2R5SWdJQWNnSG1vZ0RFRUtkeUllSUJOQmYzTnhhaUFUSUJKeGFrR1o4NG5VQldwQkIzY2dGMm9pREVGL2MzRnFJQXdnRTNGcVFabnppZFFGYWtFUGR5QWVhaUlTUVFwM0loY2dBaUFnYWlBTVFRcDNJaUVnQ0NBZWFpQWZJQkpCZjNOeGFpQVNJQXh4YWtHWjg0blVCV3BCQjNjZ0lHb2lERUYvYzNGcUlBd2dFbkZxUVpuemlkUUZha0VNZHlBZmFpSVNRWDl6Y1dvZ0VpQU1jV3BCbWZPSjFBVnFRUTkzSUNGcUloTkJDbmNpSG1vZ0NTQVhhaUFTUVFwM0loOGdEaUFoYWlBTVFRcDNJaUFnRTBGL2MzRnFJQk1nRW5GcVFabnppZFFGYWtFSmR5QVhhaUlNUVg5emNXb2dEQ0FUY1dwQm1mT0oxQVZxUVF0M0lDQnFJaEpCQ25jaUV5QUVJQjlxSUF4QkNuY2lGeUFWSUNCcUlCNGdFa0YvYzNGcUlCSWdESEZxUVpuemlkUUZha0VIZHlBZmFpSU1RWDl6Y1dvZ0RDQVNjV3BCbWZPSjFBVnFRUTEzSUI1cUloSkJmM01pSUhGcUlCSWdESEZxUVpuemlkUUZha0VNZHlBWGFpSWVRUXAzSWg5cUlBTWdFa0VLZHlJU2FpQVZJQXhCQ25jaURHb2dGaUFUYWlBRklCZHFJQjRnSUhJZ0RITnFRYUhYNS9ZR2FrRUxkeUFUYWlJVElCNUJmM055SUJKemFrR2gxK2YyQm1wQkRYY2dER29pRENBVFFYOXpjaUFmYzJwQm9kZm45Z1pxUVFaM0lCSnFJaElnREVGL2MzSWdFMEVLZHlJVGMycEJvZGZuOWdacVFRZDNJQjlxSWhjZ0VrRi9jM0lnREVFS2R5SU1jMnBCb2RmbjlnWnFRUTUzSUJOcUloNUJDbmNpSDJvZ0NTQVhRUXAzSWlCcUlBWWdFa0VLZHlJU2FpQUFJQXhxSUFjZ0Uyb2dIaUFYUVg5emNpQVNjMnBCb2RmbjlnWnFRUWwzSUF4cUlnd2dIa0YvYzNJZ0lITnFRYUhYNS9ZR2FrRU5keUFTYWlJU0lBeEJmM055SUI5emFrR2gxK2YyQm1wQkQzY2dJR29pRXlBU1FYOXpjaUFNUVFwM0lneHpha0doMStmMkJtcEJEbmNnSDJvaUZ5QVRRWDl6Y2lBU1FRcDNJaEp6YWtHaDErZjJCbXBCQ0hjZ0RHb2lIa0VLZHlJZmFpQUVJQmRCQ25jaUlHb2dFU0FUUVFwM0loTnFJQkFnRW1vZ0FpQU1haUFlSUJkQmYzTnlJQk56YWtHaDErZjJCbXBCRFhjZ0Vtb2lEQ0FlUVg5emNpQWdjMnBCb2RmbjlnWnFRUVozSUJOcUloSWdERUYvYzNJZ0gzTnFRYUhYNS9ZR2FrRUZkeUFnYWlJVElCSkJmM055SUF4QkNuY2lGM05xUWFIWDUvWUdha0VNZHlBZmFpSWVJQk5CZjNOeUlCSkJDbmNpRW5OcVFhSFg1L1lHYWtFSGR5QVhhaUlmUVFwM0lneHFJQUVnRTBFS2R5SVRhaUFJSUJkcUlCOGdIa0YvYzNJZ0UzTnFRYUhYNS9ZR2FrRUZkeUFTYWlJWElBeEJmM054YWlBR0lCSnFJQjhnSGtFS2R5SVNRWDl6Y1dvZ0Z5QVNjV3BCM1BudStIaHFRUXQzSUJOcUloNGdESEZxUWR6NTd2aDRha0VNZHlBU2FpSWZJQjVCQ25jaUUwRi9jM0ZxSUFRZ0Vtb2dIaUFYUVFwM0loSkJmM054YWlBZklCSnhha0hjK2U3NGVHcEJEbmNnREdvaUhpQVRjV3BCM1BudStIaHFRUTkzSUJKcUlpQkJDbmNpREdvZ0NDQWZRUXAzSWhkcUlBSWdFbW9nSGlBWFFYOXpjV29nSUNBWGNXcEIzUG51K0hocVFRNTNJQk5xSWg4Z0RFRi9jM0ZxSUFBZ0Uyb2dJQ0FlUVFwM0loSkJmM054YWlBZklCSnhha0hjK2U3NGVHcEJEM2NnRjJvaUZ5QU1jV3BCM1BudStIaHFRUWwzSUJKcUloNGdGMEVLZHlJVFFYOXpjV29nQXlBU2FpQVhJQjlCQ25jaUVrRi9jM0ZxSUI0Z0VuRnFRZHo1N3ZoNGFrRUlkeUFNYWlJZklCTnhha0hjK2U3NGVHcEJDWGNnRW1vaUlFRUtkeUlNYWlBSElCNUJDbmNpRjJvZ0JTQVNhaUFmSUJkQmYzTnhhaUFnSUJkeGFrSGMrZTc0ZUdwQkRuY2dFMm9pSGlBTVFYOXpjV29nRkNBVGFpQWdJQjlCQ25jaUVrRi9jM0ZxSUI0Z0VuRnFRZHo1N3ZoNGFrRUZkeUFYYWlJWElBeHhha0hjK2U3NGVHcEJCbmNnRW1vaUh5QVhRUXAzSWhOQmYzTnhhaUFWSUJKcUlCY2dIa0VLZHlJU1FYOXpjV29nSHlBU2NXcEIzUG51K0hocVFRaDNJQXhxSWhjZ0UzRnFRZHo1N3ZoNGFrRUdkeUFTYWlJZVFRcDNJaUJxSUFJZ0YwRUtkeUlPYWlBRElCOUJDbmNpREdvZ0NTQVRhaUFlSUE1QmYzTnhhaUFRSUJKcUlCY2dERUYvYzNGcUlCNGdESEZxUWR6NTd2aDRha0VGZHlBVGFpSURJQTV4YWtIYytlNzRlR3BCREhjZ0RHb2lEQ0FESUNCQmYzTnljMnBCenZyUHlucHFRUWwzSUE1cUlnNGdEQ0FEUVFwM0lnTkJmM055YzJwQnp2clB5bnBxUVE5M0lDQnFJaElnRGlBTVFRcDNJZ3hCZjNOeWMycEJ6dnJQeW5wcVFRVjNJQU5xSWhOQkNuY2lGMm9nQ1NBU1FRcDNJaFpxSUFnZ0RrRUtkeUlKYWlBVUlBeHFJQUVnQTJvZ0V5QVNJQWxCZjNOeWMycEJ6dnJQeW5wcVFRdDNJQXhxSWdNZ0V5QVdRWDl6Y25OcVFjNzZ6OHA2YWtFR2R5QUphaUlJSUFNZ0YwRi9jM0p6YWtITytzL0tlbXBCQ0hjZ0Ztb2lDU0FJSUFOQkNuY2lBMEYvYzNKemFrSE8rcy9LZW1wQkRYY2dGMm9pRGlBSklBaEJDbmNpQ0VGL2MzSnpha0hPK3MvS2VtcEJESGNnQTJvaUZFRUtkeUlXYWlBQUlBNUJDbmNpREdvZ0JTQUpRUXAzSWdCcUlBWWdDR29nRlNBRGFpQVVJQTRnQUVGL2MzSnpha0hPK3MvS2VtcEJCWGNnQ0dvaUF5QVVJQXhCZjNOeWMycEJ6dnJQeW5wcVFReDNJQUJxSWdBZ0F5QVdRWDl6Y25OcVFjNzZ6OHA2YWtFTmR5QU1haUlHSUFBZ0EwRUtkeUlEUVg5emNuTnFRYzc2ejhwNmFrRU9keUFXYWlJSUlBWWdBRUVLZHlJQVFYOXpjbk5xUWM3Nno4cDZha0VMZHlBRGFpSUpRUXAzSWhWcU5nS1FpUUZCQUNBTElCZ2dBbW9nR1NBYVFRcDNJZ0p6SUJ4emFrRVBkeUFiYWlJT1FRcDNJaFpxSUJBZ0Eyb2dDU0FJSUFaQkNuY2lBMEYvYzNKemFrSE8rcy9LZW1wQkNIY2dBR29pQmtFS2QybzJBb3lKQVVFQUlBMGdHeUFGYWlBY0lCbEJDbmNpQlhNZ0RuTnFRUTEzSUFKcUloUkJDbmRxSUFjZ0FHb2dCaUFKSUFoQkNuY2lBRUYvYzNKemFrSE8rcy9LZW1wQkJYY2dBMm9pQjJvMkFvaUpBVUVBSUFBZ0Ntb2dBaUFCYWlBT0lCMXpJQlJ6YWtFTGR5QUZhaUlCYWlBUklBTnFJQWNnQmlBVlFYOXpjbk5xUWM3Nno4cDZha0VHZDJvMkFwaUpBVUVBSUFBZ0Qyb2dIV29nQlNBRWFpQVVJQlp6SUFGemFrRUxkMm8yQXBTSkFRdWlBd0VJZndKQUlBRkZEUUJCQUNFQ1FRQkJBQ2dDZ0lrQklnTWdBV29pQkRZQ2dJa0JJQU5CUDNFaEJRSkFJQVFnQTA4TkFFRUFRUUFvQW9TSkFVRUJhallDaElrQkN3SkFJQVZGRFFBQ1FFSEFBQ0FGYXlJR0lBRk5EUUFnQlNFQ0RBRUxJQVpCQTNFaEIwRUFJUU1DUUNBRlFUOXpRUU5KRFFBZ0JVR0FpUUZxSVFnZ0JrSDhBSEVoQ1VFQUlRTURRQ0FJSUFOcUlnSkJIR29nQUNBRGFpSUVMUUFBT2dBQUlBSkJIV29nQkVFQmFpMEFBRG9BQUNBQ1FSNXFJQVJCQW1vdEFBQTZBQUFnQWtFZmFpQUVRUU5xTFFBQU9nQUFJQWtnQTBFRWFpSURSdzBBQ3dzQ1FDQUhSUTBBSUFBZ0Eyb2hBaUFESUFWcVFaeUpBV29oQXdOQUlBTWdBaTBBQURvQUFDQUNRUUZxSVFJZ0EwRUJhaUVESUFkQmYyb2lCdzBBQ3d0Qm5Ja0JFQUlnQVNBR2F5RUJJQUFnQm1vaEFFRUFJUUlMQWtBZ0FVSEFBRWtOQUFOQUlBQVFBaUFBUWNBQWFpRUFJQUZCUUdvaUFVRS9TdzBBQ3dzZ0FVVU5BQ0FDUVp5SkFXb2hBMEVBSVFJRFFDQURJQUF0QUFBNkFBQWdBRUVCYWlFQUlBTkJBV29oQXlBQklBSkJBV29pQWtIL0FYRkxEUUFMQ3dzSkFFR0FDU0FBRUFNTGdnRUJBbjhqQUVFUWF5SUFKQUFnQUVFQUtBS0FpUUVpQVVFRGREWUNDQ0FBUVFBb0FvU0pBVUVEZENBQlFSMTJjallDREVHUUNFRTRRZmdBSUFGQlAzRWlBVUU0U1JzZ0FXc1FBeUFBUVFocVFRZ1FBMEVBUVFBb0FvaUpBVFlDZ0FsQkFFRUFLUUtNaVFFM0FvUUpRUUJCQUNrQ2xJa0JOd0tNQ1NBQVFSQnFKQUFMQmdCQmdJa0JDOEVCQVFGL0l3QkJFR3NpQVNRQVFRQkI4TVBMbm53MkFwaUpBVUVBUXY2NTY4WHBqcFdaRURjQ2tJa0JRUUJDZ2NhVXVwYng2dVp2TndLSWlRRkJBRUlBTndLQWlRRkJnQWtnQUJBRElBRkJBQ2dDZ0lrQklnQkJBM1EyQWdnZ0FVRUFLQUtFaVFGQkEzUWdBRUVkZG5JMkFneEJrQWhCT0VINEFDQUFRVDl4SWdCQk9Fa2JJQUJyRUFNZ0FVRUlha0VJRUFOQkFFRUFLQUtJaVFFMkFvQUpRUUJCQUNrQ2pJa0JOd0tFQ1VFQVFRQXBBcFNKQVRjQ2pBa2dBVUVRYWlRQUN3dFhBUUJCZ0FnTFVGd0FBQUFBQUFBQUFBQUFBQUFBQUFDQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQVwiO1xuICAgIHZhciBoYXNoJDQgPSBcImMwODlhN2NhXCI7XG4gICAgdmFyIHdhc21Kc29uJDQgPSB7XG4gICAgXHRuYW1lOiBuYW1lJDQsXG4gICAgXHRkYXRhOiBkYXRhJDQsXG4gICAgXHRoYXNoOiBoYXNoJDRcbiAgICB9O1xuXG4gICAgY29uc3QgbXV0ZXgkMiA9IG5ldyBNdXRleCgpO1xuICAgIGxldCB3YXNtQ2FjaGUkMiA9IG51bGw7XG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlcyBSSVBFTUQtMTYwIGhhc2hcbiAgICAgKiBAcGFyYW0gZGF0YSBJbnB1dCBkYXRhIChzdHJpbmcsIEJ1ZmZlciBvciBUeXBlZEFycmF5KVxuICAgICAqIEByZXR1cm5zIENvbXB1dGVkIGhhc2ggYXMgYSBoZXhhZGVjaW1hbCBzdHJpbmdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByaXBlbWQxNjAoZGF0YSkge1xuICAgICAgICBpZiAod2FzbUNhY2hlJDIgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NrZWRDcmVhdGUobXV0ZXgkMiwgd2FzbUpzb24kNCwgMjApXG4gICAgICAgICAgICAgICAgLnRoZW4oKHdhc20pID0+IHtcbiAgICAgICAgICAgICAgICB3YXNtQ2FjaGUkMiA9IHdhc207XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdhc21DYWNoZSQyLmNhbGN1bGF0ZShkYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBoYXNoID0gd2FzbUNhY2hlJDIuY2FsY3VsYXRlKGRhdGEpO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShoYXNoKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IFJJUEVNRC0xNjAgaGFzaCBpbnN0YW5jZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJJUEVNRDE2MCgpIHtcbiAgICAgICAgcmV0dXJuIFdBU01JbnRlcmZhY2Uod2FzbUpzb24kNCwgMjApLnRoZW4oKHdhc20pID0+IHtcbiAgICAgICAgICAgIHdhc20uaW5pdCgpO1xuICAgICAgICAgICAgY29uc3Qgb2JqID0ge1xuICAgICAgICAgICAgICAgIGluaXQ6ICgpID0+IHsgd2FzbS5pbml0KCk7IHJldHVybiBvYmo7IH0sXG4gICAgICAgICAgICAgICAgdXBkYXRlOiAoZGF0YSkgPT4geyB3YXNtLnVwZGF0ZShkYXRhKTsgcmV0dXJuIG9iajsgfSxcbiAgICAgICAgICAgICAgICBkaWdlc3Q6IChvdXRwdXRUeXBlKSA9PiB3YXNtLmRpZ2VzdChvdXRwdXRUeXBlKSxcbiAgICAgICAgICAgICAgICBzYXZlOiAoKSA9PiB3YXNtLnNhdmUoKSxcbiAgICAgICAgICAgICAgICBsb2FkOiAoZGF0YSkgPT4geyB3YXNtLmxvYWQoZGF0YSk7IHJldHVybiBvYmo7IH0sXG4gICAgICAgICAgICAgICAgYmxvY2tTaXplOiA2NCxcbiAgICAgICAgICAgICAgICBkaWdlc3RTaXplOiAyMCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYWxjdWxhdGVLZXlCdWZmZXIoaGFzaGVyLCBrZXkpIHtcbiAgICAgICAgY29uc3QgeyBibG9ja1NpemUgfSA9IGhhc2hlcjtcbiAgICAgICAgY29uc3QgYnVmID0gZ2V0VUludDhCdWZmZXIoa2V5KTtcbiAgICAgICAgaWYgKGJ1Zi5sZW5ndGggPiBibG9ja1NpemUpIHtcbiAgICAgICAgICAgIGhhc2hlci51cGRhdGUoYnVmKTtcbiAgICAgICAgICAgIGNvbnN0IHVpbnRBcnIgPSBoYXNoZXIuZGlnZXN0KCdiaW5hcnknKTtcbiAgICAgICAgICAgIGhhc2hlci5pbml0KCk7XG4gICAgICAgICAgICByZXR1cm4gdWludEFycjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYnVmLmJ1ZmZlciwgYnVmLmJ5dGVPZmZzZXQsIGJ1Zi5sZW5ndGgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjYWxjdWxhdGVIbWFjKGhhc2hlciwga2V5KSB7XG4gICAgICAgIGhhc2hlci5pbml0KCk7XG4gICAgICAgIGNvbnN0IHsgYmxvY2tTaXplIH0gPSBoYXNoZXI7XG4gICAgICAgIGNvbnN0IGtleUJ1ZiA9IGNhbGN1bGF0ZUtleUJ1ZmZlcihoYXNoZXIsIGtleSk7XG4gICAgICAgIGNvbnN0IGtleUJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KGJsb2NrU2l6ZSk7XG4gICAgICAgIGtleUJ1ZmZlci5zZXQoa2V5QnVmKTtcbiAgICAgICAgY29uc3Qgb3BhZCA9IG5ldyBVaW50OEFycmF5KGJsb2NrU2l6ZSk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmxvY2tTaXplOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHYgPSBrZXlCdWZmZXJbaV07XG4gICAgICAgICAgICBvcGFkW2ldID0gdiBeIDB4NUM7XG4gICAgICAgICAgICBrZXlCdWZmZXJbaV0gPSB2IF4gMHgzNjtcbiAgICAgICAgfVxuICAgICAgICBoYXNoZXIudXBkYXRlKGtleUJ1ZmZlcik7XG4gICAgICAgIGNvbnN0IG9iaiA9IHtcbiAgICAgICAgICAgIGluaXQ6ICgpID0+IHtcbiAgICAgICAgICAgICAgICBoYXNoZXIuaW5pdCgpO1xuICAgICAgICAgICAgICAgIGhhc2hlci51cGRhdGUoa2V5QnVmZmVyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHVwZGF0ZTogKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICBoYXNoZXIudXBkYXRlKGRhdGEpO1xuICAgICAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGlnZXN0OiAoKG91dHB1dFR5cGUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB1aW50QXJyID0gaGFzaGVyLmRpZ2VzdCgnYmluYXJ5Jyk7XG4gICAgICAgICAgICAgICAgaGFzaGVyLmluaXQoKTtcbiAgICAgICAgICAgICAgICBoYXNoZXIudXBkYXRlKG9wYWQpO1xuICAgICAgICAgICAgICAgIGhhc2hlci51cGRhdGUodWludEFycik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhhc2hlci5kaWdlc3Qob3V0cHV0VHlwZSk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHNhdmU6ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3NhdmUoKSBub3Qgc3VwcG9ydGVkJyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbG9hZDogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbG9hZCgpIG5vdCBzdXBwb3J0ZWQnKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBibG9ja1NpemU6IGhhc2hlci5ibG9ja1NpemUsXG4gICAgICAgICAgICBkaWdlc3RTaXplOiBoYXNoZXIuZGlnZXN0U2l6ZSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlcyBITUFDIGhhc2hcbiAgICAgKiBAcGFyYW0gaGFzaCBIYXNoIGFsZ29yaXRobSB0byB1c2UuIEl0IGhhcyB0byBiZSB0aGUgcmV0dXJuIHZhbHVlIG9mIGEgZnVuY3Rpb24gbGlrZSBjcmVhdGVTSEExKClcbiAgICAgKiBAcGFyYW0ga2V5IEtleSAoc3RyaW5nLCBCdWZmZXIgb3IgVHlwZWRBcnJheSlcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVITUFDKGhhc2gsIGtleSkge1xuICAgICAgICBpZiAoIWhhc2ggfHwgIWhhc2gudGhlbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGhhc2ggZnVuY3Rpb24gaXMgcHJvdmlkZWQhIFVzYWdlOiBjcmVhdGVITUFDKGNyZWF0ZU1ENSgpLCBcImtleVwiKS4nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGFzaC50aGVuKChoYXNoZXIpID0+IGNhbGN1bGF0ZUhtYWMoaGFzaGVyLCBrZXkpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYWxjdWxhdGVQQktERjIoZGlnZXN0LCBzYWx0LCBpdGVyYXRpb25zLCBoYXNoTGVuZ3RoLCBvdXRwdXRUeXBlKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCBESyA9IG5ldyBVaW50OEFycmF5KGhhc2hMZW5ndGgpO1xuICAgICAgICAgICAgY29uc3QgYmxvY2sxID0gbmV3IFVpbnQ4QXJyYXkoc2FsdC5sZW5ndGggKyA0KTtcbiAgICAgICAgICAgIGNvbnN0IGJsb2NrMVZpZXcgPSBuZXcgRGF0YVZpZXcoYmxvY2sxLmJ1ZmZlcik7XG4gICAgICAgICAgICBjb25zdCBzYWx0QnVmZmVyID0gZ2V0VUludDhCdWZmZXIoc2FsdCk7XG4gICAgICAgICAgICBjb25zdCBzYWx0VUludEJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KHNhbHRCdWZmZXIuYnVmZmVyLCBzYWx0QnVmZmVyLmJ5dGVPZmZzZXQsIHNhbHRCdWZmZXIubGVuZ3RoKTtcbiAgICAgICAgICAgIGJsb2NrMS5zZXQoc2FsdFVJbnRCdWZmZXIpO1xuICAgICAgICAgICAgbGV0IGRlc3RQb3MgPSAwO1xuICAgICAgICAgICAgY29uc3QgaExlbiA9IGRpZ2VzdC5kaWdlc3RTaXplO1xuICAgICAgICAgICAgY29uc3QgbCA9IE1hdGguY2VpbChoYXNoTGVuZ3RoIC8gaExlbik7XG4gICAgICAgICAgICBsZXQgVCA9IG51bGw7XG4gICAgICAgICAgICBsZXQgVSA9IG51bGw7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8PSBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICBibG9jazFWaWV3LnNldFVpbnQzMihzYWx0Lmxlbmd0aCwgaSk7XG4gICAgICAgICAgICAgICAgZGlnZXN0LmluaXQoKTtcbiAgICAgICAgICAgICAgICBkaWdlc3QudXBkYXRlKGJsb2NrMSk7XG4gICAgICAgICAgICAgICAgVCA9IGRpZ2VzdC5kaWdlc3QoJ2JpbmFyeScpO1xuICAgICAgICAgICAgICAgIFUgPSBULnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDE7IGogPCBpdGVyYXRpb25zOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgZGlnZXN0LmluaXQoKTtcbiAgICAgICAgICAgICAgICAgICAgZGlnZXN0LnVwZGF0ZShVKTtcbiAgICAgICAgICAgICAgICAgICAgVSA9IGRpZ2VzdC5kaWdlc3QoJ2JpbmFyeScpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IGhMZW47IGsrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgVFtrXSBePSBVW2tdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIERLLnNldChULnN1YmFycmF5KDAsIGhhc2hMZW5ndGggLSBkZXN0UG9zKSwgZGVzdFBvcyk7XG4gICAgICAgICAgICAgICAgZGVzdFBvcyArPSBoTGVuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG91dHB1dFR5cGUgPT09ICdiaW5hcnknKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIERLO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZGlnZXN0Q2hhcnMgPSBuZXcgVWludDhBcnJheShoYXNoTGVuZ3RoICogMik7XG4gICAgICAgICAgICByZXR1cm4gZ2V0RGlnZXN0SGV4KGRpZ2VzdENoYXJzLCBESywgaGFzaExlbmd0aCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCB2YWxpZGF0ZU9wdGlvbnMkMiA9IChvcHRpb25zKSA9PiB7XG4gICAgICAgIGlmICghb3B0aW9ucyB8fCB0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBvcHRpb25zIHBhcmFtZXRlci4gSXQgcmVxdWlyZXMgYW4gb2JqZWN0LicpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghb3B0aW9ucy5oYXNoRnVuY3Rpb24gfHwgIW9wdGlvbnMuaGFzaEZ1bmN0aW9uLnRoZW4pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBoYXNoIGZ1bmN0aW9uIGlzIHByb3ZpZGVkISBVc2FnZTogcGJrZGYyKFwicGFzc3dvcmRcIiwgXCJzYWx0XCIsIDEwMDAsIDMyLCBjcmVhdGVTSEExKCkpLicpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihvcHRpb25zLml0ZXJhdGlvbnMpIHx8IG9wdGlvbnMuaXRlcmF0aW9ucyA8IDEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSXRlcmF0aW9ucyBzaG91bGQgYmUgYSBwb3NpdGl2ZSBudW1iZXInKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIob3B0aW9ucy5oYXNoTGVuZ3RoKSB8fCBvcHRpb25zLmhhc2hMZW5ndGggPCAxKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0hhc2ggbGVuZ3RoIHNob3VsZCBiZSBhIHBvc2l0aXZlIG51bWJlcicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLm91dHB1dFR5cGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgb3B0aW9ucy5vdXRwdXRUeXBlID0gJ2hleCc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFbJ2hleCcsICdiaW5hcnknXS5pbmNsdWRlcyhvcHRpb25zLm91dHB1dFR5cGUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEluc3VwcG9ydGVkIG91dHB1dCB0eXBlICR7b3B0aW9ucy5vdXRwdXRUeXBlfS4gVmFsaWQgdmFsdWVzOiBbJ2hleCcsICdiaW5hcnknXWApO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSBuZXcgUEJLREYyIGhhc2ggZm9yIHRoZSBzdXBwbGllZCBwYXNzd29yZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBia2RmMihvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YWxpZGF0ZU9wdGlvbnMkMihvcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IGhtYWMgPSB5aWVsZCBjcmVhdGVITUFDKG9wdGlvbnMuaGFzaEZ1bmN0aW9uLCBvcHRpb25zLnBhc3N3b3JkKTtcbiAgICAgICAgICAgIHJldHVybiBjYWxjdWxhdGVQQktERjIoaG1hYywgb3B0aW9ucy5zYWx0LCBvcHRpb25zLml0ZXJhdGlvbnMsIG9wdGlvbnMuaGFzaExlbmd0aCwgb3B0aW9ucy5vdXRwdXRUeXBlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdmFyIG5hbWUkMyA9IFwic2NyeXB0XCI7XG4gICAgdmFyIGRhdGEkMyA9IFwiQUdGemJRRUFBQUFCR3dWZ0FYOEJmMkFBQVg5Z0JIOS9mMzhBWUFGL0FHQURmMzkvQUFNR0JRQUJBZ01FQlFZQkFRS0FnQUlHQ0FGL0FVR1FpQVFMQnprRUJtMWxiVzl5ZVFJQUVraGhjMmhmVTJWMFRXVnRiM0o1VTJsNlpRQUFEa2hoYzJoZlIyVjBRblZtWm1WeUFBRUdjMk55ZVhCMEFBUUt4eVlGV0FFQ2YwRUFJUUVDUUVFQUtBS0lDQ0lDSUFCR0RRQUNRQ0FBSUFKcklnQkJFSFlnQUVHQWdIeHhJQUJKYWlJQVFBQkJmMGNOQUVIL0FjQVBDMEVBSVFGQkFFRUFLUU9JQ0NBQVFSQjByWHczQTRnSUN5QUJ3QXR3QVFKL0FrQkJBQ2dDZ0FnaUFBMEFRUUEvQUVFUWRDSUFOZ0tBQ0VFQUtBS0lDQ0lCUVlDQUlFWU5BQUpBUVlDQUlDQUJheUlBUVJCMklBQkJnSUI4Y1NBQVNXb2lBRUFBUVg5SERRQkJBQThMUVFCQkFDa0RpQWdnQUVFUWRLMThOd09JQ0VFQUtBS0FDQ0VBQ3lBQUM2c0ZBUU4vSUFJZ0EwRUhkQ0FBYWtGQWFpSUVLUU1BTndNQUlBSWdCQ2tEQ0RjRENDQUNJQVFwQXhBM0F4QWdBaUFFS1FNWU53TVlJQUlnQkNrRElEY0RJQ0FDSUFRcEF5ZzNBeWdnQWlBRUtRTXdOd013SUFJZ0JDa0RPRGNET0FKQUlBTkZEUUFnQTBFQmRDRUZJQUJCK0FCcUlRUWdBMEVHZENFR1FRQWhBQU5BSUFJZ0Fpa0RBQ0FFUVloL2Fpa0RBSVUzQXdBZ0FpQUNLUU1JSUFSQmtIOXFLUU1BaFRjRENDQUNJQUlwQXhBZ0JFR1lmMm9wQXdDRk53TVFJQUlnQWlrREdDQUVRYUIvYWlrREFJVTNBeGdnQWlBQ0tRTWdJQVJCcUg5cUtRTUFoVGNESUNBQ0lBSXBBeWdnQkVHd2Yyb3BBd0NGTndNb0lBSWdBaWtETUNBRVFiaC9haWtEQUlVM0F6QWdBaUFDS1FNNElBUkJRR29wQXdDRk53TTRJQUlRQXlBQklBSXBBd0EzQXdBZ0FVRUlhaUFDS1FNSU53TUFJQUZCRUdvZ0Fpa0RFRGNEQUNBQlFSaHFJQUlwQXhnM0F3QWdBVUVnYWlBQ0tRTWdOd01BSUFGQktHb2dBaWtES0RjREFDQUJRVEJxSUFJcEF6QTNBd0FnQVVFNGFpQUNLUU00TndNQUlBSWdBaWtEQUNBRVFVaHFLUU1BaFRjREFDQUNJQUlwQXdnZ0JFRlFhaWtEQUlVM0F3Z2dBaUFDS1FNUUlBUkJXR29wQXdDRk53TVFJQUlnQWlrREdDQUVRV0JxS1FNQWhUY0RHQ0FDSUFJcEF5QWdCRUZvYWlrREFJVTNBeUFnQWlBQ0tRTW9JQVJCY0dvcEF3Q0ZOd01vSUFJZ0Fpa0RNQ0FFUVhocUtRTUFoVGNETUNBQ0lBSXBBemdnQkNrREFJVTNBemdnQWhBRElBRWdCbW9pQXlBQ0tRTUFOd01BSUFOQkNHb2dBaWtEQ0RjREFDQURRUkJxSUFJcEF4QTNBd0FnQTBFWWFpQUNLUU1ZTndNQUlBTkJJR29nQWlrRElEY0RBQ0FEUVNocUlBSXBBeWczQXdBZ0EwRXdhaUFDS1FNd053TUFJQU5CT0dvZ0Fpa0RPRGNEQUNBRVFZQUJhaUVFSUFGQndBQnFJUUVnQUVFQ2FpSUFJQVZKRFFBTEN3dTZEUWdCZmdGL0FYNEJmd0YrQVg4QmZoSi9JQUFnQUNnQ0JDQUFLUU1vSWdGQ0lJaW5JZ0lnQUNrRE9DSURRaUNJcHlJRWFrRUhkeUFBS1FNSUlnVkNJSWluY3lJR0lBUnFRUWwzSUFBcEF4Z2lCMElnaUtkeklnZ2dCbXBCRFhjZ0FuTWlDU0FIcHlJS0lBR25JZ3RxUVFkM0lBT25jeUlDSUF0cVFRbDNJQVduY3lJTUlBSnFRUTEzSUFweklnMGdER3BCRW5jZ0MzTWlEaUFBS1FNQUlnRkNJSWluSWc4Z0FDa0RFQ0lEUWlDSXB5SVFha0VIZHlBQUtRTWdJZ1ZDSUlpbmN5SUxha0VIZDNNaUNpQUpJQWhxUVJKM0lBUnpJaEVnQW1wQkIzY2dBQ2tETUNJSHB5SUpJQUduSWhKcVFRZDNJQU9uY3lJRUlCSnFRUWwzSUFXbmN5SVRJQVJxUVExM0lBbHpJaFJ6SWdrZ0VXcEJDWGNnQ3lBUWFrRUpkeUFIUWlDSXAzTWlGWE1pRmlBSmFrRU5keUFDY3lJWElCWnFRUkozSUJGekloRnFRUWQzSUFZZ0ZDQVRha0VTZHlBU2N5SVNha0VIZHlBVklBdHFRUTEzSUE5ekloUnpJZ0lnRW1wQkNYY2dESE1pRHlBQ2FrRU5keUFHY3lJWWN5SUdJQkZxUVFsM0lBZ2dEU0FVSUJWcVFSSjNJQkJ6SWhBZ0JHcEJCM2R6SWd3Z0VHcEJDWGR6SWdoekloVWdCbXBCRFhjZ0NuTWlGQ0FNSUFvZ0RtcEJDWGNnRTNNaUV5QUtha0VOZHlBTGN5SVpJQk5xUVJKM0lBNXpJZ3BxUVFkM0lCZHpJZ3NnQ21wQkNYY2dEM01pRGlBTGFrRU5keUFNY3lJWElBNXFRUkozSUFweklnMGdBaUFJSUF4cVFRMTNJQVJ6SWd3Z0NHcEJFbmNnRUhNaUNHcEJCM2NnR1hNaUNtcEJCM2R6SWdRZ0ZDQVZha0VTZHlBUmN5SVFJQXRxUVFkM0lBa2dHQ0FQYWtFU2R5QVNjeUlSYWtFSGR5QU1jeUlNSUJGcVFRbDNJQk56SWhJZ0RHcEJEWGNnQ1hNaUQzTWlDU0FRYWtFSmR5QUtJQWhxUVFsM0lCWnpJaE56SWhZZ0NXcEJEWGNnQzNNaUZDQVdha0VTZHlBUWN5SVFha0VIZHlBR0lBOGdFbXBCRW5jZ0VYTWlFV3BCQjNjZ0V5QUtha0VOZHlBQ2N5SUxjeUlDSUJGcVFRbDNJQTV6SWc0Z0FtcEJEWGNnQm5NaUdITWlCaUFRYWtFSmR5QVZJQmNnQ3lBVGFrRVNkeUFJY3lJSUlBeHFRUWQzY3lJTElBaHFRUWwzY3lJVGN5SVZJQVpxUVExM0lBUnpJaGNnQ3lBRUlBMXFRUWwzSUJKekloSWdCR3BCRFhjZ0NuTWlHU0FTYWtFU2R5QU5jeUlFYWtFSGR5QVVjeUlLSUFScVFRbDNJQTV6SWc4Z0NtcEJEWGNnQzNNaUZDQVBha0VTZHlBRWN5SU5JQUlnRXlBTGFrRU5keUFNY3lJTUlCTnFRUkozSUFoeklnaHFRUWQzSUJseklndHFRUWQzY3lJRUlCY2dGV3BCRW5jZ0VITWlFQ0FLYWtFSGR5QUpJQmdnRG1wQkVuY2dFWE1pRG1wQkIzY2dESE1pRENBT2FrRUpkeUFTY3lJUklBeHFRUTEzSUFsekloZHpJZ2tnRUdwQkNYY2dDeUFJYWtFSmR5QVdjeUlTY3lJVElBbHFRUTEzSUFwekloZ2dFMnBCRW5jZ0VITWlFR3BCQjNjZ0JpQVhJQkZxUVJKM0lBNXpJZ3BxUVFkM0lCSWdDMnBCRFhjZ0FuTWlGM01pQWlBS2FrRUpkeUFQY3lJT0lBSnFRUTEzSUFaekloWnpJZ1lnQ1NBV0lBNXFRUkozSUFwekloWnFRUWQzSUJVZ0ZDQVhJQkpxUVJKM0lBaHpJZ2dnREdwQkIzZHpJZ29nQ0dwQkNYZHpJaElnQ21wQkRYY2dESE1pRDNNaURDQVdha0VKZHlBRUlBMXFRUWwzSUJGekloRnpJaFVnREdwQkRYY2dDWE1pRkNBVmFrRVNkeUFXY3lJSmFrRUhkeUFDSUE4Z0VtcEJFbmNnQ0hNaUNHcEJCM2NnRVNBRWFrRU5keUFMY3lJUGN5SUxJQWhxUVFsM0lCTnpJaE1nQzJwQkRYY2dBbk1pRjNNaUZtbzJBZ1FnQUNBQUtBSUlJQllnQ1dwQkNYY2dDaUFQSUJGcVFSSjNJQTF6SWhGcVFRZDNJQmh6SWdJZ0VXcEJDWGNnRG5NaURuTWlEMm8yQWdnZ0FDQUFLQUlNSUE4Z0ZtcEJEWGNnQm5NaURXbzJBZ3dnQUNBQUtBSVFJQVlnRUdwQkNYY2dFbk1pRWlBT0lBSnFRUTEzSUFwekloZ2dGeUFUYWtFU2R5QUljeUlLSUF4cVFRZDNjeUlJSUFwcVFRbDNjeUlXSUFocVFRMTNJQXh6SWd4cU5nSVFJQUFnQUNnQ0FDQU5JQTlxUVJKM0lBbHphallDQUNBQUlBQW9BaFFnRENBV2FrRVNkeUFLYzJvMkFoUWdBQ0FBS0FJWUlBaHFOZ0lZSUFBZ0FDZ0NIQ0FXYWpZQ0hDQUFJQUFvQWlBZ0VpQUdha0VOZHlBRWN5SUpJQmdnRG1wQkVuY2dFWE1pQmlBTGFrRUhkM01pQ2lBR2FrRUpkeUFWY3lJRWFqWUNJQ0FBSUFBb0FpUWdCQ0FLYWtFTmR5QUxjeUlMYWpZQ0pDQUFJQUFvQWlnZ0N5QUVha0VTZHlBR2MybzJBaWdnQUNBQUtBSXNJQXBxTmdJc0lBQWdBQ2dDTUNBSklCSnFRUkozSUJCeklnWWdBbXBCQjNjZ0ZITWlDMm8yQWpBZ0FDQUFLQUkwSUFzZ0JtcEJDWGNnRTNNaUNtbzJBalFnQUNBQUtBSTRJQW9nQzJwQkRYY2dBbk1pQW1vMkFqZ2dBQ0FBS0FJOElBSWdDbXBCRW5jZ0JuTnFOZ0k4QzVFU0F3NS9BWDRPZndKQUlBSkZEUUFnQUVFSGRDSURRVUJxSWdSQkFDZ0NnQWdpQlNBRElBSnNJZ1pxSUFNZ0FXeHFJZ2NnQTJvaUNHb2hDU0FBSUFKQkIzUWlDaUFCUVFkMGFpSUxiQ0VNSUFBZ0MwR0FBV3BzSVEwZ0FFRUZkQ0lMUVFFZ0MwRUJTeHNpQzBGZ2NTRU9JQXRCQVhFaER5QUhRVUJxSVJBZ0FhMUNmM3doRVNBRUlBZHFJUklnQnlBQVFRaDBJaE5xSVJRZ0FDQUtRWUFCYW13aEZTQUxRWDlxUVFOSklSWkJBQ0VYUVFBaEdBTkFRUUFvQW9BSUloa2dBeUFZYkdvaEdnSkFJQUJGRFFCQkFDRWJBa0FnRmcwQUlCa2dGMm9oSEVFQUlRdEJBQ0ViQTBBZ0J5QUxhaUlFSUJ3Z0Myb2lIU2dDQURZQ0FDQUVRUVJxSUIxQkJHb29BZ0EyQWdBZ0JFRUlhaUFkUVFocUtBSUFOZ0lBSUFSQkRHb2dIVUVNYWlnQ0FEWUNBQ0FMUVJCcUlRc2dEaUFiUVFScUlodEhEUUFMQ3lBUFJRMEFJQWNnRzBFQ2RDSUxhaUFhSUF0cUtBSUFOZ0lBQ3dKQUlBRkZEUUJCQUNFZUlCVWhIQ0FHSVI4RFFDQUZJUjBnQUNFYkFrQUNRQ0FBRFFBZ0ZDQVFLUU1BTndNQUlCUWdFQ2tEQ0RjRENDQVVJQkFwQXhBM0F4QWdGQ0FRS1FNWU53TVlJQlFnRUNrRElEY0RJQ0FVSUJBcEF5ZzNBeWdnRkNBUUtRTXdOd013SUJRZ0VDa0RPRGNET0F3QkN3TkFJQjBnSDJvaUN5QWRJQXhxSWdRcEF3QTNBd0FnQzBFSWFpQUVRUWhxS1FNQU53TUFJQXRCRUdvZ0JFRVFhaWtEQURjREFDQUxRUmhxSUFSQkdHb3BBd0EzQXdBZ0MwRWdhaUFFUVNCcUtRTUFOd01BSUF0QktHb2dCRUVvYWlrREFEY0RBQ0FMUVRCcUlBUkJNR29wQXdBM0F3QWdDMEU0YWlBRVFUaHFLUU1BTndNQUlBdEJ3QUJxSUFSQndBQnFLUU1BTndNQUlBdEJ5QUJxSUFSQnlBQnFLUU1BTndNQUlBdEIwQUJxSUFSQjBBQnFLUU1BTndNQUlBdEIyQUJxSUFSQjJBQnFLUU1BTndNQUlBdEI0QUJxSUFSQjRBQnFLUU1BTndNQUlBdEI2QUJxSUFSQjZBQnFLUU1BTndNQUlBdEI4QUJxSUFSQjhBQnFLUU1BTndNQUlBdEIrQUJxSUFSQitBQnFLUU1BTndNQUlCMUJnQUZxSVIwZ0cwRi9haUliRFFBTElBY2dDQ0FVSUFBUUFpQUZJUjBnQUNFYkEwQWdIU0FjYWlJTElCMGdEV29pQkNrREFEY0RBQ0FMUVFocUlBUkJDR29wQXdBM0F3QWdDMEVRYWlBRVFSQnFLUU1BTndNQUlBdEJHR29nQkVFWWFpa0RBRGNEQUNBTFFTQnFJQVJCSUdvcEF3QTNBd0FnQzBFb2FpQUVRU2hxS1FNQU53TUFJQXRCTUdvZ0JFRXdhaWtEQURjREFDQUxRVGhxSUFSQk9Hb3BBd0EzQXdBZ0MwSEFBR29nQkVIQUFHb3BBd0EzQXdBZ0MwSElBR29nQkVISUFHb3BBd0EzQXdBZ0MwSFFBR29nQkVIUUFHb3BBd0EzQXdBZ0MwSFlBR29nQkVIWUFHb3BBd0EzQXdBZ0MwSGdBR29nQkVIZ0FHb3BBd0EzQXdBZ0MwSG9BR29nQkVIb0FHb3BBd0EzQXdBZ0MwSHdBR29nQkVId0FHb3BBd0EzQXdBZ0MwSDRBR29nQkVINEFHb3BBd0EzQXdBZ0hVR0FBV29oSFNBYlFYOXFJaHNOQUFzTElBZ2dCeUFVSUFBUUFpQWNJQk5xSVJ3Z0h5QVRhaUVmSUI1QkFtb2lIaUFCU1EwQUMwRUFJUjREUUFKQUFrQWdBQTBBSUJRZ0VDa0RBRGNEQUNBVUlCQXBBd2czQXdnZ0ZDQVFLUU1RTndNUUlCUWdFQ2tER0RjREdDQVVJQkFwQXlBM0F5QWdGQ0FRS1FNb053TW9JQlFnRUNrRE1EY0RNQ0FVSUJBcEF6ZzNBemdNQVFzZ0FDQUtJQklwQWdBZ0VZT25RUWQwYW13aEh5QUZJUjBnQUNFYkEwQWdIU0FNYWlJTElBc3BBd0FnSFNBZmFpSUVLUU1BaFRjREFDQUxRUWhxSWh3Z0hDa0RBQ0FFUVFocUtRTUFoVGNEQUNBTFFSQnFJaHdnSENrREFDQUVRUkJxS1FNQWhUY0RBQ0FMUVJocUlod2dIQ2tEQUNBRVFSaHFLUU1BaFRjREFDQUxRU0JxSWh3Z0hDa0RBQ0FFUVNCcUtRTUFoVGNEQUNBTFFTaHFJaHdnSENrREFDQUVRU2hxS1FNQWhUY0RBQ0FMUVRCcUlod2dIQ2tEQUNBRVFUQnFLUU1BaFRjREFDQUxRVGhxSWh3Z0hDa0RBQ0FFUVRocUtRTUFoVGNEQUNBTFFjQUFhaUljSUJ3cEF3QWdCRUhBQUdvcEF3Q0ZOd01BSUF0QnlBQnFJaHdnSENrREFDQUVRY2dBYWlrREFJVTNBd0FnQzBIUUFHb2lIQ0FjS1FNQUlBUkIwQUJxS1FNQWhUY0RBQ0FMUWRnQWFpSWNJQndwQXdBZ0JFSFlBR29wQXdDRk53TUFJQXRCNEFCcUlod2dIQ2tEQUNBRVFlQUFhaWtEQUlVM0F3QWdDMEhvQUdvaUhDQWNLUU1BSUFSQjZBQnFLUU1BaFRjREFDQUxRZkFBYWlJY0lCd3BBd0FnQkVId0FHb3BBd0NGTndNQUlBdEIrQUJxSWdzZ0N5a0RBQ0FFUWZnQWFpa0RBSVUzQXdBZ0hVR0FBV29oSFNBYlFYOXFJaHNOQUFzZ0J5QUlJQlFnQUJBQ0lBQWdDaUFKS1FJQUlCR0RwMEVIZEdwc0lSOGdCU0VkSUFBaEd3TkFJQjBnRFdvaUN5QUxLUU1BSUIwZ0gyb2lCQ2tEQUlVM0F3QWdDMEVJYWlJY0lCd3BBd0FnQkVFSWFpa0RBSVUzQXdBZ0MwRVFhaUljSUJ3cEF3QWdCRUVRYWlrREFJVTNBd0FnQzBFWWFpSWNJQndwQXdBZ0JFRVlhaWtEQUlVM0F3QWdDMEVnYWlJY0lCd3BBd0FnQkVFZ2Fpa0RBSVUzQXdBZ0MwRW9haUljSUJ3cEF3QWdCRUVvYWlrREFJVTNBd0FnQzBFd2FpSWNJQndwQXdBZ0JFRXdhaWtEQUlVM0F3QWdDMEU0YWlJY0lCd3BBd0FnQkVFNGFpa0RBSVUzQXdBZ0MwSEFBR29pSENBY0tRTUFJQVJCd0FCcUtRTUFoVGNEQUNBTFFjZ0FhaUljSUJ3cEF3QWdCRUhJQUdvcEF3Q0ZOd01BSUF0QjBBQnFJaHdnSENrREFDQUVRZEFBYWlrREFJVTNBd0FnQzBIWUFHb2lIQ0FjS1FNQUlBUkIyQUJxS1FNQWhUY0RBQ0FMUWVBQWFpSWNJQndwQXdBZ0JFSGdBR29wQXdDRk53TUFJQXRCNkFCcUlod2dIQ2tEQUNBRVFlZ0FhaWtEQUlVM0F3QWdDMEh3QUdvaUhDQWNLUU1BSUFSQjhBQnFLUU1BaFRjREFDQUxRZmdBYWlJTElBc3BBd0FnQkVINEFHb3BBd0NGTndNQUlCMUJnQUZxSVIwZ0cwRi9haUliRFFBTEN5QUlJQWNnRkNBQUVBSWdIa0VDYWlJZUlBRkpEUUFMQ3dKQUlBQkZEUUJCQUNFYkFrQWdGZzBBSUJrZ0Yyb2hIRUVBSVF0QkFDRWJBMEFnSENBTGFpSUVJQWNnQzJvaUhTZ0NBRFlDQUNBRVFRUnFJQjFCQkdvb0FnQTJBZ0FnQkVFSWFpQWRRUWhxS0FJQU5nSUFJQVJCREdvZ0hVRU1haWdDQURZQ0FDQUxRUkJxSVFzZ0RpQWJRUVJxSWh0SERRQUxDeUFQUlEwQUlCb2dHMEVDZENJTGFpQUhJQXRxS0FJQU5nSUFDeUFYSUFOcUlSY2dHRUVCYWlJWUlBSkhEUUFMQ3dzPVwiO1xuICAgIHZhciBoYXNoJDMgPSBcImM1MWI4YmY3XCI7XG4gICAgdmFyIHdhc21Kc29uJDMgPSB7XG4gICAgXHRuYW1lOiBuYW1lJDMsXG4gICAgXHRkYXRhOiBkYXRhJDMsXG4gICAgXHRoYXNoOiBoYXNoJDNcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gc2NyeXB0SW50ZXJuYWwob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgeyBjb3N0RmFjdG9yLCBibG9ja1NpemUsIHBhcmFsbGVsaXNtLCBoYXNoTGVuZ3RoLCB9ID0gb3B0aW9ucztcbiAgICAgICAgICAgIGNvbnN0IFNIQTI1Nkhhc2hlciA9IGNyZWF0ZVNIQTI1NigpO1xuICAgICAgICAgICAgY29uc3QgYmxvY2tEYXRhID0geWllbGQgcGJrZGYyKHtcbiAgICAgICAgICAgICAgICBwYXNzd29yZDogb3B0aW9ucy5wYXNzd29yZCxcbiAgICAgICAgICAgICAgICBzYWx0OiBvcHRpb25zLnNhbHQsXG4gICAgICAgICAgICAgICAgaXRlcmF0aW9uczogMSxcbiAgICAgICAgICAgICAgICBoYXNoTGVuZ3RoOiAxMjggKiBibG9ja1NpemUgKiBwYXJhbGxlbGlzbSxcbiAgICAgICAgICAgICAgICBoYXNoRnVuY3Rpb246IFNIQTI1Nkhhc2hlcixcbiAgICAgICAgICAgICAgICBvdXRwdXRUeXBlOiAnYmluYXJ5JyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3Qgc2NyeXB0SW50ZXJmYWNlID0geWllbGQgV0FTTUludGVyZmFjZSh3YXNtSnNvbiQzLCAwKTtcbiAgICAgICAgICAgIC8vIGxhc3QgYmxvY2sgaXMgZm9yIHN0b3JpbmcgdGhlIHRlbXBvcmFyeSB2ZWN0b3JzXG4gICAgICAgICAgICBjb25zdCBWU2l6ZSA9IDEyOCAqIGJsb2NrU2l6ZSAqIGNvc3RGYWN0b3I7XG4gICAgICAgICAgICBjb25zdCBYWVNpemUgPSAyNTYgKiBibG9ja1NpemU7XG4gICAgICAgICAgICBzY3J5cHRJbnRlcmZhY2Uuc2V0TWVtb3J5U2l6ZShibG9ja0RhdGEubGVuZ3RoICsgVlNpemUgKyBYWVNpemUpO1xuICAgICAgICAgICAgc2NyeXB0SW50ZXJmYWNlLndyaXRlTWVtb3J5KGJsb2NrRGF0YSwgMCk7XG4gICAgICAgICAgICAvLyBtaXggYmxvY2tzXG4gICAgICAgICAgICBzY3J5cHRJbnRlcmZhY2UuZ2V0RXhwb3J0cygpLnNjcnlwdChibG9ja1NpemUsIGNvc3RGYWN0b3IsIHBhcmFsbGVsaXNtKTtcbiAgICAgICAgICAgIGNvbnN0IGV4cGVuc2l2ZVNhbHQgPSBzY3J5cHRJbnRlcmZhY2VcbiAgICAgICAgICAgICAgICAuZ2V0TWVtb3J5KClcbiAgICAgICAgICAgICAgICAuc3ViYXJyYXkoMCwgMTI4ICogYmxvY2tTaXplICogcGFyYWxsZWxpc20pO1xuICAgICAgICAgICAgY29uc3Qgb3V0cHV0RGF0YSA9IHlpZWxkIHBia2RmMih7XG4gICAgICAgICAgICAgICAgcGFzc3dvcmQ6IG9wdGlvbnMucGFzc3dvcmQsXG4gICAgICAgICAgICAgICAgc2FsdDogZXhwZW5zaXZlU2FsdCxcbiAgICAgICAgICAgICAgICBpdGVyYXRpb25zOiAxLFxuICAgICAgICAgICAgICAgIGhhc2hMZW5ndGgsXG4gICAgICAgICAgICAgICAgaGFzaEZ1bmN0aW9uOiBTSEEyNTZIYXNoZXIsXG4gICAgICAgICAgICAgICAgb3V0cHV0VHlwZTogJ2JpbmFyeScsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLm91dHB1dFR5cGUgPT09ICdoZXgnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGlnZXN0Q2hhcnMgPSBuZXcgVWludDhBcnJheShoYXNoTGVuZ3RoICogMik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldERpZ2VzdEhleChkaWdlc3RDaGFycywgb3V0cHV0RGF0YSwgaGFzaExlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyByZXR1cm4gYmluYXJ5IGZvcm1hdFxuICAgICAgICAgICAgcmV0dXJuIG91dHB1dERhdGE7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYml0d2lzZVxuICAgIGNvbnN0IGlzUG93ZXJPZlR3byA9ICh2KSA9PiB2ICYmICEodiAmICh2IC0gMSkpO1xuICAgIGNvbnN0IHZhbGlkYXRlT3B0aW9ucyQxID0gKG9wdGlvbnMpID0+IHtcbiAgICAgICAgaWYgKCFvcHRpb25zIHx8IHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIG9wdGlvbnMgcGFyYW1ldGVyLiBJdCByZXF1aXJlcyBhbiBvYmplY3QuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKG9wdGlvbnMuYmxvY2tTaXplKSB8fCBvcHRpb25zLmJsb2NrU2l6ZSA8IDEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQmxvY2sgc2l6ZSBzaG91bGQgYmUgYSBwb3NpdGl2ZSBudW1iZXInKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIob3B0aW9ucy5jb3N0RmFjdG9yKVxuICAgICAgICAgICAgfHwgb3B0aW9ucy5jb3N0RmFjdG9yIDwgMlxuICAgICAgICAgICAgfHwgIWlzUG93ZXJPZlR3byhvcHRpb25zLmNvc3RGYWN0b3IpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nvc3QgZmFjdG9yIHNob3VsZCBiZSBhIHBvd2VyIG9mIDIsIGdyZWF0ZXIgdGhhbiAxJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKG9wdGlvbnMucGFyYWxsZWxpc20pIHx8IG9wdGlvbnMucGFyYWxsZWxpc20gPCAxKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1BhcmFsbGVsaXNtIHNob3VsZCBiZSBhIHBvc2l0aXZlIG51bWJlcicpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihvcHRpb25zLmhhc2hMZW5ndGgpIHx8IG9wdGlvbnMuaGFzaExlbmd0aCA8IDEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSGFzaCBsZW5ndGggc2hvdWxkIGJlIGEgcG9zaXRpdmUgbnVtYmVyLicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLm91dHB1dFR5cGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgb3B0aW9ucy5vdXRwdXRUeXBlID0gJ2hleCc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFbJ2hleCcsICdiaW5hcnknXS5pbmNsdWRlcyhvcHRpb25zLm91dHB1dFR5cGUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEluc3VwcG9ydGVkIG91dHB1dCB0eXBlICR7b3B0aW9ucy5vdXRwdXRUeXBlfS4gVmFsaWQgdmFsdWVzOiBbJ2hleCcsICdiaW5hcnknXWApO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGVzIGhhc2ggdXNpbmcgdGhlIHNjcnlwdCBwYXNzd29yZC1iYXNlZCBrZXkgZGVyaXZhdGlvbiBmdW5jdGlvblxuICAgICAqIEByZXR1cm5zIENvbXB1dGVkIGhhc2ggYXMgYSBoZXhhZGVjaW1hbCBzdHJpbmcgb3IgYXNcbiAgICAgKiAgICAgICAgICBVaW50OEFycmF5IGRlcGVuZGluZyBvbiB0aGUgb3V0cHV0VHlwZSBvcHRpb25cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzY3J5cHQob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFsaWRhdGVPcHRpb25zJDEob3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gc2NyeXB0SW50ZXJuYWwob3B0aW9ucyk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBuYW1lJDIgPSBcImJjcnlwdFwiO1xuICAgIHZhciBkYXRhJDIgPSBcIkFHRnpiUUVBQUFBQkZ3UmdBQUYvWUFSL2YzOS9BR0FEZjM5L0FHQUJmd0YvQXdVRUFBRUNBd1VFQVFFQ0FnWUlBWDhCUVpDckJRc0hOQVFHYldWdGIzSjVBZ0FPU0dGemFGOUhaWFJDZFdabVpYSUFBQVppWTNKNWNIUUFBZzFpWTNKNWNIUmZkbVZ5YVdaNUFBTUsrR0FFQlFCQmdDc0wzbGtFRkg4QmZnaC9BWDRqQUVId0FHc2hCQ0FDUVFBNkFBSWdBa0dxNEFBN0FBQUNRQ0FCTFFBQVFTcEhEUUFnQVMwQUFVRXdSdzBBSUFKQk1Ub0FBUXNDUUNBQkxBQUZJQUVzQUFSQkNteHFRZkI3YWlJRlFRUkpEUUFnQVMwQUIwRmdhaUlHUWQ4QVN3MEFJQVpCa0FscUxRQUFJZ1pCUDBzTkFDQUJMUUFJUVdCcUlnZEIzd0JMRFFBZ0IwR1FDV290QUFBaUIwRS9TdzBBSUFRZ0IwRUVkaUFHUVFKMGNqb0FDQ0FCTFFBSlFXQnFJZ1pCM3dCTERRQWdCa0dRQ1dvdEFBQWlCa0UvU3cwQUlBUWdCa0VDZGlBSFFRUjBjam9BQ1NBQkxRQUtRV0JxSWdkQjN3QkxEUUFnQjBHUUNXb3RBQUFpQjBFL1N3MEFJQVFnQnlBR1FRWjBjam9BQ2lBQkxRQUxRV0JxSWdaQjN3QkxEUUFnQmtHUUNXb3RBQUFpQmtFL1N3MEFJQUV0QUF4QllHb2lCMEhmQUVzTkFDQUhRWkFKYWkwQUFDSUhRVDlMRFFBZ0JDQUhRUVIySUFaQkFuUnlPZ0FMSUFFdEFBMUJZR29pQmtIZkFFc05BQ0FHUVpBSmFpMEFBQ0lHUVQ5TERRQWdCQ0FHUVFKMklBZEJCSFJ5T2dBTUlBRXRBQTVCWUdvaUIwSGZBRXNOQUNBSFFaQUphaTBBQUNJSFFUOUxEUUFnQkNBSElBWkJCblJ5T2dBTklBRXRBQTlCWUdvaUJrSGZBRXNOQUNBR1FaQUphaTBBQUNJR1FUOUxEUUFnQVMwQUVFRmdhaUlIUWQ4QVN3MEFJQWRCa0FscUxRQUFJZ2RCUDBzTkFDQUVJQWRCQkhZZ0JrRUNkSEk2QUE0Z0FTMEFFVUZnYWlJR1FkOEFTdzBBSUFaQmtBbHFMUUFBSWdaQlAwc05BQ0FFSUFaQkFuWWdCMEVFZEhJNkFBOGdBUzBBRWtGZ2FpSUhRZDhBU3cwQUlBZEJrQWxxTFFBQUlnZEJQMHNOQUNBRUlBY2dCa0VHZEhJNkFCQWdBUzBBRTBGZ2FpSUdRZDhBU3cwQUlBWkJrQWxxTFFBQUlnWkJQMHNOQUNBQkxRQVVRV0JxSWdkQjN3QkxEUUFnQjBHUUNXb3RBQUFpQjBFL1N3MEFJQVFnQjBFRWRpQUdRUUowY2pvQUVTQUJMUUFWUVdCcUlnWkIzd0JMRFFBZ0JrR1FDV290QUFBaUJrRS9TdzBBSUFRZ0JrRUNkaUFIUVFSMGNqb0FFaUFCTFFBV1FXQnFJZ2RCM3dCTERRQWdCMEdRQ1dvdEFBQWlCMEUvU3cwQUlBUWdCeUFHUVFaMGNqb0FFeUFCTFFBWFFXQnFJZ1pCM3dCTERRQWdCa0dRQ1dvdEFBQWlCa0UvU3cwQUlBRXRBQmhCWUdvaUIwSGZBRXNOQUNBSFFaQUphaTBBQUNJSFFUOUxEUUFnQkNBSFFRUjJJQVpCQW5SeU9nQVVJQUV0QUJsQllHb2lCa0hmQUVzTkFDQUdRWkFKYWkwQUFDSUdRVDlMRFFBZ0JDQUdRUUoySUFkQkJIUnlPZ0FWSUFFdEFCcEJZR29pQjBIZkFFc05BQ0FIUVpBSmFpMEFBQ0lIUVQ5TERRQWdCQ0FISUFaQkJuUnlPZ0FXSUFFdEFCdEJZR29pQmtIZkFFc05BQ0FHUVpBSmFpMEFBQ0lHUVQ5TERRQWdBUzBBSEVGZ2FpSUhRZDhBU3cwQUlBZEJrQWxxTFFBQUlnZEJQMHNOQUVFQklBVjBJUWdnQkNBSFFRUjJJQVpCQW5SeU9nQVhJQVFnQkNnQ0NDSUZRUmgwSUFWQmdQNERjVUVJZEhJZ0JVRUlka0dBL2dOeElBVkJHSFp5Y2lJSk5nSUlJQVFnQkNnQ0RDSUZRUmgwSUFWQmdQNERjVUVJZEhJZ0JVRUlka0dBL2dOeElBVkJHSFp5Y2lJS05nSU1JQVFnQkNnQ0VDSUZRUmgwSUFWQmdQNERjVUVJZEhJZ0JVRUlka0dBL2dOeElBVkJHSFp5Y2lJTE5nSVFJQVFnQkNnQ0ZDSUZRUmgwSUFWQmdQNERjVUVJZEhJZ0JVRUlka0dBL2dOeElBVkJHSFp5Y2lJTU5nSVVJQVJCNkFCcUlBRXRBQUpCbndkcUxRQUFJZzFCQVhGQkFuUnFJUTVCQUNFR1FRQWhEMEVBSVJBZ0FDRUZBMEFnQkVJQU53Sm9JQVV0QUFBaEJ5QUVRUUEyQW13Z0JDQUhOZ0pvSUFRZ0JTd0FBQ0lSTmdKc0lBVXRBQUFoRWlBRUlBZEJDSFFpQnpZQ2FDQUVJQWNnQlVFQmFpQUFJQkliSWdVdEFBQnlJZ2MyQW1nZ0JDQVJRUWgwSWhFMkFtd2dCQ0FSSUFVc0FBQWlFbklpRVRZQ2JDQUZMUUFBSVJNZ0JDQUhRUWgwSWdjMkFtZ2dCQ0FISUFWQkFXb2dBQ0FUR3lJRkxRQUFjaUlITmdKb0lBUWdFVUVJZENJUk5nSnNJQVFnRVNBRkxBQUFJaE55SWhFMkFtd2dCUzBBQUNFVUlBUWdCMEVJZENJSE5nSm9JQVFnQnlBRlFRRnFJQUFnRkJzaUJTMEFBSElpQnpZQ2FDQUVJQkZCQ0hRaUVUWUNiQ0FFSUJFZ0JTd0FBQ0lVY2lJUk5nSnNJQVV0QUFBaEZTQUVRU0JxSUFacUlBNG9BZ0FpRmpZQ0FDQUdRZkFwYWlJWElCWWdGeWdDQUhNMkFnQWdFU0FIY3lBUGNpRVBJQVZCQVdvZ0FDQVZHeUVGSUJRZ0V5QVNjbkpCZ0FGeElCQnlJUkFnQmtFRWFpSUdRY2dBUncwQUMwRUFRUUFvQXZBcElCQkJDWFFnRFVFUGRIRkJnSUFFSUE5Qi8vOERjU0FQUVJCMmNtdHhjellDOENsQ0FDRVlRWDRoQmtId0tTRUhBMEJCQUNnQ3JDcEJBQ2dDcUNwQkFDZ0NwQ3BCQUNnQ29DcEJBQ2dDbkNwQkFDZ0NtQ3BCQUNnQ2xDcEJBQ2dDa0NwQkFDZ0NqQ3BCQUNnQ2lDcEJBQ2dDaENwQkFDZ0NnQ3BCQUNnQy9DbEJBQ2dDK0NsQkFDZ0M5Q2tnQkVFSWFpQUdRUUpxSWdaQkFuRkJBblJxS1FNQUlCaUZJaGhDSUlpbmMwRUFLQUx3S1NBWXAzTWlBRUVXZGtIOEIzRkI4QWxxS0FJQUlBQkJEblpCL0FkeFFmQVJhaWdDQUdvZ0FFRUdka0g4QjNGQjhCbHFLQUlBY3lBQVFmOEJjVUVDZEVId0lXb29BZ0JxY3lJRlFSWjJRZndIY1VId0NXb29BZ0FnQlVFT2RrSDhCM0ZCOEJGcUtBSUFhaUFGUVFaMlFmd0hjVUh3R1dvb0FnQnpJQVZCL3dGeFFRSjBRZkFoYWlnQ0FHcHpJQUJ6SWdCQkZuWkIvQWR4UWZBSmFpZ0NBQ0FBUVE1MlFmd0hjVUh3RVdvb0FnQnFJQUJCQm5aQi9BZHhRZkFaYWlnQ0FITWdBRUgvQVhGQkFuUkI4Q0ZxS0FJQWFuTWdCWE1pQlVFV2RrSDhCM0ZCOEFscUtBSUFJQVZCRG5aQi9BZHhRZkFSYWlnQ0FHb2dCVUVHZGtIOEIzRkI4QmxxS0FJQWN5QUZRZjhCY1VFQ2RFSHdJV29vQWdCcWN5QUFjeUlBUVJaMlFmd0hjVUh3Q1dvb0FnQWdBRUVPZGtIOEIzRkI4QkZxS0FJQWFpQUFRUVoyUWZ3SGNVSHdHV29vQWdCeklBQkIvd0Z4UVFKMFFmQWhhaWdDQUdweklBVnpJZ1ZCRm5aQi9BZHhRZkFKYWlnQ0FDQUZRUTUyUWZ3SGNVSHdFV29vQWdCcUlBVkJCblpCL0FkeFFmQVphaWdDQUhNZ0JVSC9BWEZCQW5SQjhDRnFLQUlBYW5NZ0FITWlBRUVXZGtIOEIzRkI4QWxxS0FJQUlBQkJEblpCL0FkeFFmQVJhaWdDQUdvZ0FFRUdka0g4QjNGQjhCbHFLQUlBY3lBQVFmOEJjVUVDZEVId0lXb29BZ0JxY3lBRmN5SUZRUloyUWZ3SGNVSHdDV29vQWdBZ0JVRU9ka0g4QjNGQjhCRnFLQUlBYWlBRlFRWjJRZndIY1VId0dXb29BZ0J6SUFWQi93RnhRUUowUWZBaGFpZ0NBR3B6SUFCeklnQkJGblpCL0FkeFFmQUphaWdDQUNBQVFRNTJRZndIY1VId0VXb29BZ0JxSUFCQkJuWkIvQWR4UWZBWmFpZ0NBSE1nQUVIL0FYRkJBblJCOENGcUtBSUFhbk1nQlhNaUJVRVdka0g4QjNGQjhBbHFLQUlBSUFWQkRuWkIvQWR4UWZBUmFpZ0NBR29nQlVFR2RrSDhCM0ZCOEJscUtBSUFjeUFGUWY4QmNVRUNkRUh3SVdvb0FnQnFjeUFBY3lJQVFSWjJRZndIY1VId0NXb29BZ0FnQUVFT2RrSDhCM0ZCOEJGcUtBSUFhaUFBUVFaMlFmd0hjVUh3R1dvb0FnQnpJQUJCL3dGeFFRSjBRZkFoYWlnQ0FHcHpJQVZ6SWdWQkZuWkIvQWR4UWZBSmFpZ0NBQ0FGUVE1MlFmd0hjVUh3RVdvb0FnQnFJQVZCQm5aQi9BZHhRZkFaYWlnQ0FITWdCVUgvQVhGQkFuUkI4Q0ZxS0FJQWFuTWdBSE1pQUVFV2RrSDhCM0ZCOEFscUtBSUFJQUJCRG5aQi9BZHhRZkFSYWlnQ0FHb2dBRUVHZGtIOEIzRkI4QmxxS0FJQWN5QUFRZjhCY1VFQ2RFSHdJV29vQWdCcWN5QUZjeUlGUVJaMlFmd0hjVUh3Q1dvb0FnQWdCVUVPZGtIOEIzRkI4QkZxS0FJQWFpQUZRUVoyUWZ3SGNVSHdHV29vQWdCeklBVkIvd0Z4UVFKMFFmQWhhaWdDQUdweklBQnpJZ0JCRm5aQi9BZHhRZkFKYWlnQ0FDQUFRUTUyUWZ3SGNVSHdFV29vQWdCcUlBQkJCblpCL0FkeFFmQVphaWdDQUhNZ0FFSC9BWEZCQW5SQjhDRnFLQUlBYW5NZ0JYTWlCVUgvQVhGQkFuUkI4Q0ZxS0FJQUlROGdCVUVHZGtIOEIzRkI4QmxxS0FJQUlSQWdCVUVXZGtIOEIzRkI4QWxxS0FJQUlSRWdCVUVPZGtIOEIzRkI4QkZxS0FJQUlSSkJBQ2dDc0NvaEUwRUFRUUFvQXJRcUlBVnpOZ0tBcXdGQkFDQVRJQThnRUNBUklCSnFjMnB6SUFCek5nS0Vxd0VnQjBFQUtRT0Fxd0VpR0RjQ0FDQUhRUWhxSVFjZ0JrRVFTUTBBQ3lBWVFpQ0lweUVGSUJpbklRWkI4QWtoQUFOQVFRQW9BcXdxUVFBb0FxZ3FRUUFvQXFRcVFRQW9BcUFxUVFBb0Fwd3FRUUFvQXBncVFRQW9BcFFxUVFBb0FwQXFRUUFvQW93cVFRQW9Bb2dxUVFBb0FvUXFRUUFvQW9BcVFRQW9BdndwUVFBb0F2Z3BJQVZCQUNnQzlDbHpJQVpCQUNnQzhDbHpJQXR6SWdWQkZuWkIvQWR4UWZBSmFpZ0NBQ0FGUVE1MlFmd0hjVUh3RVdvb0FnQnFJQVZCQm5aQi9BZHhRZkFaYWlnQ0FITWdCVUgvQVhGQkFuUkI4Q0ZxS0FJQWFuTWdESE1pQmtFV2RrSDhCM0ZCOEFscUtBSUFJQVpCRG5aQi9BZHhRZkFSYWlnQ0FHb2dCa0VHZGtIOEIzRkI4QmxxS0FJQWN5QUdRZjhCY1VFQ2RFSHdJV29vQWdCcWN5QUZjeUlGUVJaMlFmd0hjVUh3Q1dvb0FnQWdCVUVPZGtIOEIzRkI4QkZxS0FJQWFpQUZRUVoyUWZ3SGNVSHdHV29vQWdCeklBVkIvd0Z4UVFKMFFmQWhhaWdDQUdweklBWnpJZ1pCRm5aQi9BZHhRZkFKYWlnQ0FDQUdRUTUyUWZ3SGNVSHdFV29vQWdCcUlBWkJCblpCL0FkeFFmQVphaWdDQUhNZ0JrSC9BWEZCQW5SQjhDRnFLQUlBYW5NZ0JYTWlCVUVXZGtIOEIzRkI4QWxxS0FJQUlBVkJEblpCL0FkeFFmQVJhaWdDQUdvZ0JVRUdka0g4QjNGQjhCbHFLQUlBY3lBRlFmOEJjVUVDZEVId0lXb29BZ0JxY3lBR2N5SUdRUloyUWZ3SGNVSHdDV29vQWdBZ0JrRU9ka0g4QjNGQjhCRnFLQUlBYWlBR1FRWjJRZndIY1VId0dXb29BZ0J6SUFaQi93RnhRUUowUWZBaGFpZ0NBR3B6SUFWeklnVkJGblpCL0FkeFFmQUphaWdDQUNBRlFRNTJRZndIY1VId0VXb29BZ0JxSUFWQkJuWkIvQWR4UWZBWmFpZ0NBSE1nQlVIL0FYRkJBblJCOENGcUtBSUFhbk1nQm5NaUJrRVdka0g4QjNGQjhBbHFLQUlBSUFaQkRuWkIvQWR4UWZBUmFpZ0NBR29nQmtFR2RrSDhCM0ZCOEJscUtBSUFjeUFHUWY4QmNVRUNkRUh3SVdvb0FnQnFjeUFGY3lJRlFSWjJRZndIY1VId0NXb29BZ0FnQlVFT2RrSDhCM0ZCOEJGcUtBSUFhaUFGUVFaMlFmd0hjVUh3R1dvb0FnQnpJQVZCL3dGeFFRSjBRZkFoYWlnQ0FHcHpJQVp6SWdaQkZuWkIvQWR4UWZBSmFpZ0NBQ0FHUVE1MlFmd0hjVUh3RVdvb0FnQnFJQVpCQm5aQi9BZHhRZkFaYWlnQ0FITWdCa0gvQVhGQkFuUkI4Q0ZxS0FJQWFuTWdCWE1pQlVFV2RrSDhCM0ZCOEFscUtBSUFJQVZCRG5aQi9BZHhRZkFSYWlnQ0FHb2dCVUVHZGtIOEIzRkI4QmxxS0FJQWN5QUZRZjhCY1VFQ2RFSHdJV29vQWdCcWN5QUdjeUlHUVJaMlFmd0hjVUh3Q1dvb0FnQWdCa0VPZGtIOEIzRkI4QkZxS0FJQWFpQUdRUVoyUWZ3SGNVSHdHV29vQWdCeklBWkIvd0Z4UVFKMFFmQWhhaWdDQUdweklBVnpJZ1ZCRm5aQi9BZHhRZkFKYWlnQ0FDQUZRUTUyUWZ3SGNVSHdFV29vQWdCcUlBVkJCblpCL0FkeFFmQVphaWdDQUhNZ0JVSC9BWEZCQW5SQjhDRnFLQUlBYW5NZ0JuTWlCa0VXZGtIOEIzRkI4QWxxS0FJQUlBWkJEblpCL0FkeFFmQVJhaWdDQUdvZ0JrRUdka0g4QjNGQjhCbHFLQUlBY3lBR1FmOEJjVUVDZEVId0lXb29BZ0JxY3lBRmN5SUZRUloyUWZ3SGNVSHdDV29vQWdBZ0JVRU9ka0g4QjNGQjhCRnFLQUlBYWlBRlFRWjJRZndIY1VId0dXb29BZ0J6SUFWQi93RnhRUUowUWZBaGFpZ0NBR3B6SUFaeklnWkIvd0Z4UVFKMFFmQWhhaWdDQUNFSElBWkJCblpCL0FkeFFmQVphaWdDQUNFUElBWkJGblpCL0FkeFFmQUphaWdDQUNFUUlBWkJEblpCL0FkeFFmQVJhaWdDQUNFUlFRQW9BckFxSVJJZ0FFRUFLQUswS2lBR2N5SUdOZ0lBSUFCQkJHb2dFaUFISUE4Z0VDQVJhbk5xY3lBRmN5SUhOZ0lBUVFBb0Fxd3FRUUFvQXFncVFRQW9BcVFxUVFBb0FxQXFRUUFvQXB3cVFRQW9BcGdxUVFBb0FwUXFRUUFvQXBBcVFRQW9Bb3dxUVFBb0FvZ3FRUUFvQW9RcVFRQW9Bb0FxUVFBb0F2d3BRUUFvQXZncFFRQW9BdlFwSUFsQkFDZ0M4Q2x6SUFaeklnVkJGblpCL0FkeFFmQUphaWdDQUNBRlFRNTJRZndIY1VId0VXb29BZ0JxSUFWQkJuWkIvQWR4UWZBWmFpZ0NBSE1nQlVIL0FYRkJBblJCOENGcUtBSUFhbk1nQ25NZ0IzTWlCa0VXZGtIOEIzRkI4QWxxS0FJQUlBWkJEblpCL0FkeFFmQVJhaWdDQUdvZ0JrRUdka0g4QjNGQjhCbHFLQUlBY3lBR1FmOEJjVUVDZEVId0lXb29BZ0JxY3lBRmN5SUZRUloyUWZ3SGNVSHdDV29vQWdBZ0JVRU9ka0g4QjNGQjhCRnFLQUlBYWlBRlFRWjJRZndIY1VId0dXb29BZ0J6SUFWQi93RnhRUUowUWZBaGFpZ0NBR3B6SUFaeklnWkJGblpCL0FkeFFmQUphaWdDQUNBR1FRNTJRZndIY1VId0VXb29BZ0JxSUFaQkJuWkIvQWR4UWZBWmFpZ0NBSE1nQmtIL0FYRkJBblJCOENGcUtBSUFhbk1nQlhNaUJVRVdka0g4QjNGQjhBbHFLQUlBSUFWQkRuWkIvQWR4UWZBUmFpZ0NBR29nQlVFR2RrSDhCM0ZCOEJscUtBSUFjeUFGUWY4QmNVRUNkRUh3SVdvb0FnQnFjeUFHY3lJR1FSWjJRZndIY1VId0NXb29BZ0FnQmtFT2RrSDhCM0ZCOEJGcUtBSUFhaUFHUVFaMlFmd0hjVUh3R1dvb0FnQnpJQVpCL3dGeFFRSjBRZkFoYWlnQ0FHcHpJQVZ6SWdWQkZuWkIvQWR4UWZBSmFpZ0NBQ0FGUVE1MlFmd0hjVUh3RVdvb0FnQnFJQVZCQm5aQi9BZHhRZkFaYWlnQ0FITWdCVUgvQVhGQkFuUkI4Q0ZxS0FJQWFuTWdCbk1pQmtFV2RrSDhCM0ZCOEFscUtBSUFJQVpCRG5aQi9BZHhRZkFSYWlnQ0FHb2dCa0VHZGtIOEIzRkI4QmxxS0FJQWN5QUdRZjhCY1VFQ2RFSHdJV29vQWdCcWN5QUZjeUlGUVJaMlFmd0hjVUh3Q1dvb0FnQWdCVUVPZGtIOEIzRkI4QkZxS0FJQWFpQUZRUVoyUWZ3SGNVSHdHV29vQWdCeklBVkIvd0Z4UVFKMFFmQWhhaWdDQUdweklBWnpJZ1pCRm5aQi9BZHhRZkFKYWlnQ0FDQUdRUTUyUWZ3SGNVSHdFV29vQWdCcUlBWkJCblpCL0FkeFFmQVphaWdDQUhNZ0JrSC9BWEZCQW5SQjhDRnFLQUlBYW5NZ0JYTWlCVUVXZGtIOEIzRkI4QWxxS0FJQUlBVkJEblpCL0FkeFFmQVJhaWdDQUdvZ0JVRUdka0g4QjNGQjhCbHFLQUlBY3lBRlFmOEJjVUVDZEVId0lXb29BZ0JxY3lBR2N5SUdRUloyUWZ3SGNVSHdDV29vQWdBZ0JrRU9ka0g4QjNGQjhCRnFLQUlBYWlBR1FRWjJRZndIY1VId0dXb29BZ0J6SUFaQi93RnhRUUowUWZBaGFpZ0NBR3B6SUFWeklnVkJGblpCL0FkeFFmQUphaWdDQUNBRlFRNTJRZndIY1VId0VXb29BZ0JxSUFWQkJuWkIvQWR4UWZBWmFpZ0NBSE1nQlVIL0FYRkJBblJCOENGcUtBSUFhbk1nQm5NaUJrRVdka0g4QjNGQjhBbHFLQUlBSUFaQkRuWkIvQWR4UWZBUmFpZ0NBR29nQmtFR2RrSDhCM0ZCOEJscUtBSUFjeUFHUWY4QmNVRUNkRUh3SVdvb0FnQnFjeUFGY3lJRlFSWjJRZndIY1VId0NXb29BZ0FnQlVFT2RrSDhCM0ZCOEJGcUtBSUFhaUFGUVFaMlFmd0hjVUh3R1dvb0FnQnpJQVZCL3dGeFFRSjBRZkFoYWlnQ0FHcHpJQVp6SWdaQi93RnhRUUowUWZBaGFpZ0NBQ0VISUFaQkJuWkIvQWR4UWZBWmFpZ0NBQ0VQSUFaQkZuWkIvQWR4UWZBSmFpZ0NBQ0VRSUFaQkRuWkIvQWR4UWZBUmFpZ0NBQ0VSUVFBb0FyQXFJUklnQUVFSWFrRUFLQUswS2lBR2N5SUdOZ0lBSUFCQkRHb2dFaUFISUE4Z0VDQVJhbk5xY3lBRmN5SUZOZ0lBSUFCQkVHb2lBRUhzS1VrTkFBdEJBQ0FGTmdLRXF3RkJBQ0FHTmdLQXF3RWdCQ2dDWkNFVUlBUW9BbUFoRlNBRUtBSmNJUllnQkNnQ1dDRVhJQVFvQWxRaENTQUVLQUpRSVFvZ0JDZ0NUQ0VMSUFRb0FrZ2hEQ0FFS0FKRUlRNGdCQ2dDUUNFTklBUW9BandoR1NBRUtBSTRJUm9nQkNnQ05DRWJJQVFvQWpBaEhDQUVLQUlzSVIwZ0JDZ0NLQ0VlSUFRb0FpUWhIeUFFS0FJZ0lTQWdCQ2tERUNFaElBUXBBd2doR0FOQVFRQkJBQ2dDOENrZ0lITTJBdkFwUVFCQkFDZ0M5Q2tnSDNNMkF2UXBRUUJCQUNnQytDa2dIbk0yQXZncFFRQkJBQ2dDL0NrZ0hYTTJBdndwUVFCQkFDZ0NnQ29nSEhNMkFvQXFRUUJCQUNnQ2hDb2dHM00yQW9RcVFRQkJBQ2dDaUNvZ0duTTJBb2dxUVFCQkFDZ0NqQ29nR1hNMkFvd3FRUUJCQUNnQ2tDb2dEWE0yQXBBcVFRQkJBQ2dDbENvZ0RuTTJBcFFxUVFCQkFDZ0NtQ29nREhNMkFwZ3FRUUJCQUNnQ25Db2dDM00yQXB3cVFRQkJBQ2dDb0NvZ0NuTTJBcUFxUVFCQkFDZ0NwQ29nQ1hNMkFxUXFRUUJCQUNnQ3FDb2dGM00yQXFncVFRQkJBQ2dDckNvZ0ZuTTJBcXdxUVFCQkFDZ0NzQ29nRlhNMkFyQXFRUUJCQUNnQ3RDb2dGSE0yQXJRcVFRRWhFd05BUVFBaEFFRUFRZ0EzQTRDckFVSHdLU0VHUVFBaEJRTkFRUUFvQXF3cVFRQW9BcWdxUVFBb0FxUXFRUUFvQXFBcVFRQW9BcHdxUVFBb0FwZ3FRUUFvQXBRcVFRQW9BcEFxUVFBb0Fvd3FRUUFvQW9ncVFRQW9Bb1FxUVFBb0FvQXFRUUFvQXZ3cFFRQW9BdmdwUVFBb0F2UXBJQUJ6UVFBb0F2QXBJQVZ6SWdCQkZuWkIvQWR4UWZBSmFpZ0NBQ0FBUVE1MlFmd0hjVUh3RVdvb0FnQnFJQUJCQm5aQi9BZHhRZkFaYWlnQ0FITWdBRUgvQVhGQkFuUkI4Q0ZxS0FJQWFuTWlCVUVXZGtIOEIzRkI4QWxxS0FJQUlBVkJEblpCL0FkeFFmQVJhaWdDQUdvZ0JVRUdka0g4QjNGQjhCbHFLQUlBY3lBRlFmOEJjVUVDZEVId0lXb29BZ0JxY3lBQWN5SUFRUloyUWZ3SGNVSHdDV29vQWdBZ0FFRU9ka0g4QjNGQjhCRnFLQUlBYWlBQVFRWjJRZndIY1VId0dXb29BZ0J6SUFCQi93RnhRUUowUWZBaGFpZ0NBR3B6SUFWeklnVkJGblpCL0FkeFFmQUphaWdDQUNBRlFRNTJRZndIY1VId0VXb29BZ0JxSUFWQkJuWkIvQWR4UWZBWmFpZ0NBSE1nQlVIL0FYRkJBblJCOENGcUtBSUFhbk1nQUhNaUFFRVdka0g4QjNGQjhBbHFLQUlBSUFCQkRuWkIvQWR4UWZBUmFpZ0NBR29nQUVFR2RrSDhCM0ZCOEJscUtBSUFjeUFBUWY4QmNVRUNkRUh3SVdvb0FnQnFjeUFGY3lJRlFSWjJRZndIY1VId0NXb29BZ0FnQlVFT2RrSDhCM0ZCOEJGcUtBSUFhaUFGUVFaMlFmd0hjVUh3R1dvb0FnQnpJQVZCL3dGeFFRSjBRZkFoYWlnQ0FHcHpJQUJ6SWdCQkZuWkIvQWR4UWZBSmFpZ0NBQ0FBUVE1MlFmd0hjVUh3RVdvb0FnQnFJQUJCQm5aQi9BZHhRZkFaYWlnQ0FITWdBRUgvQVhGQkFuUkI4Q0ZxS0FJQWFuTWdCWE1pQlVFV2RrSDhCM0ZCOEFscUtBSUFJQVZCRG5aQi9BZHhRZkFSYWlnQ0FHb2dCVUVHZGtIOEIzRkI4QmxxS0FJQWN5QUZRZjhCY1VFQ2RFSHdJV29vQWdCcWN5QUFjeUlBUVJaMlFmd0hjVUh3Q1dvb0FnQWdBRUVPZGtIOEIzRkI4QkZxS0FJQWFpQUFRUVoyUWZ3SGNVSHdHV29vQWdCeklBQkIvd0Z4UVFKMFFmQWhhaWdDQUdweklBVnpJZ1ZCRm5aQi9BZHhRZkFKYWlnQ0FDQUZRUTUyUWZ3SGNVSHdFV29vQWdCcUlBVkJCblpCL0FkeFFmQVphaWdDQUhNZ0JVSC9BWEZCQW5SQjhDRnFLQUlBYW5NZ0FITWlBRUVXZGtIOEIzRkI4QWxxS0FJQUlBQkJEblpCL0FkeFFmQVJhaWdDQUdvZ0FFRUdka0g4QjNGQjhCbHFLQUlBY3lBQVFmOEJjVUVDZEVId0lXb29BZ0JxY3lBRmN5SUZRUloyUWZ3SGNVSHdDV29vQWdBZ0JVRU9ka0g4QjNGQjhCRnFLQUlBYWlBRlFRWjJRZndIY1VId0dXb29BZ0J6SUFWQi93RnhRUUowUWZBaGFpZ0NBR3B6SUFCeklnQkJGblpCL0FkeFFmQUphaWdDQUNBQVFRNTJRZndIY1VId0VXb29BZ0JxSUFCQkJuWkIvQWR4UWZBWmFpZ0NBSE1nQUVIL0FYRkJBblJCOENGcUtBSUFhbk1nQlhNaUJVRVdka0g4QjNGQjhBbHFLQUlBSUFWQkRuWkIvQWR4UWZBUmFpZ0NBR29nQlVFR2RrSDhCM0ZCOEJscUtBSUFjeUFGUWY4QmNVRUNkRUh3SVdvb0FnQnFjeUFBY3lJQVFSWjJRZndIY1VId0NXb29BZ0FnQUVFT2RrSDhCM0ZCOEJGcUtBSUFhaUFBUVFaMlFmd0hjVUh3R1dvb0FnQnpJQUJCL3dGeFFRSjBRZkFoYWlnQ0FHcHpJQVZ6SWdWQi93RnhRUUowUWZBaGFpZ0NBQ0VISUFWQkJuWkIvQWR4UWZBWmFpZ0NBQ0VQSUFWQkZuWkIvQWR4UWZBSmFpZ0NBQ0VRSUFWQkRuWkIvQWR4UWZBUmFpZ0NBQ0VSUVFBb0FyQXFJUklnQmtFQUtBSzBLaUFGY3lJRk5nSUFJQVpCQkdvZ0VpQUhJQThnRUNBUmFuTnFjeUFBY3lJQU5nSUFJQVpCQ0dvaUJrRzRLa2tOQUF0QjhBa2hCZ05BUVFBb0Fxd3FRUUFvQXFncVFRQW9BcVFxUVFBb0FxQXFRUUFvQXB3cVFRQW9BcGdxUVFBb0FwUXFRUUFvQXBBcVFRQW9Bb3dxUVFBb0FvZ3FRUUFvQW9RcVFRQW9Bb0FxUVFBb0F2d3BRUUFvQXZncFFRQW9BdlFwSUFCelFRQW9BdkFwSUFWeklnQkJGblpCL0FkeFFmQUphaWdDQUNBQVFRNTJRZndIY1VId0VXb29BZ0JxSUFCQkJuWkIvQWR4UWZBWmFpZ0NBSE1nQUVIL0FYRkJBblJCOENGcUtBSUFhbk1pQlVFV2RrSDhCM0ZCOEFscUtBSUFJQVZCRG5aQi9BZHhRZkFSYWlnQ0FHb2dCVUVHZGtIOEIzRkI4QmxxS0FJQWN5QUZRZjhCY1VFQ2RFSHdJV29vQWdCcWN5QUFjeUlBUVJaMlFmd0hjVUh3Q1dvb0FnQWdBRUVPZGtIOEIzRkI4QkZxS0FJQWFpQUFRUVoyUWZ3SGNVSHdHV29vQWdCeklBQkIvd0Z4UVFKMFFmQWhhaWdDQUdweklBVnpJZ1ZCRm5aQi9BZHhRZkFKYWlnQ0FDQUZRUTUyUWZ3SGNVSHdFV29vQWdCcUlBVkJCblpCL0FkeFFmQVphaWdDQUhNZ0JVSC9BWEZCQW5SQjhDRnFLQUlBYW5NZ0FITWlBRUVXZGtIOEIzRkI4QWxxS0FJQUlBQkJEblpCL0FkeFFmQVJhaWdDQUdvZ0FFRUdka0g4QjNGQjhCbHFLQUlBY3lBQVFmOEJjVUVDZEVId0lXb29BZ0JxY3lBRmN5SUZRUloyUWZ3SGNVSHdDV29vQWdBZ0JVRU9ka0g4QjNGQjhCRnFLQUlBYWlBRlFRWjJRZndIY1VId0dXb29BZ0J6SUFWQi93RnhRUUowUWZBaGFpZ0NBR3B6SUFCeklnQkJGblpCL0FkeFFmQUphaWdDQUNBQVFRNTJRZndIY1VId0VXb29BZ0JxSUFCQkJuWkIvQWR4UWZBWmFpZ0NBSE1nQUVIL0FYRkJBblJCOENGcUtBSUFhbk1nQlhNaUJVRVdka0g4QjNGQjhBbHFLQUlBSUFWQkRuWkIvQWR4UWZBUmFpZ0NBR29nQlVFR2RrSDhCM0ZCOEJscUtBSUFjeUFGUWY4QmNVRUNkRUh3SVdvb0FnQnFjeUFBY3lJQVFSWjJRZndIY1VId0NXb29BZ0FnQUVFT2RrSDhCM0ZCOEJGcUtBSUFhaUFBUVFaMlFmd0hjVUh3R1dvb0FnQnpJQUJCL3dGeFFRSjBRZkFoYWlnQ0FHcHpJQVZ6SWdWQkZuWkIvQWR4UWZBSmFpZ0NBQ0FGUVE1MlFmd0hjVUh3RVdvb0FnQnFJQVZCQm5aQi9BZHhRZkFaYWlnQ0FITWdCVUgvQVhGQkFuUkI4Q0ZxS0FJQWFuTWdBSE1pQUVFV2RrSDhCM0ZCOEFscUtBSUFJQUJCRG5aQi9BZHhRZkFSYWlnQ0FHb2dBRUVHZGtIOEIzRkI4QmxxS0FJQWN5QUFRZjhCY1VFQ2RFSHdJV29vQWdCcWN5QUZjeUlGUVJaMlFmd0hjVUh3Q1dvb0FnQWdCVUVPZGtIOEIzRkI4QkZxS0FJQWFpQUZRUVoyUWZ3SGNVSHdHV29vQWdCeklBVkIvd0Z4UVFKMFFmQWhhaWdDQUdweklBQnpJZ0JCRm5aQi9BZHhRZkFKYWlnQ0FDQUFRUTUyUWZ3SGNVSHdFV29vQWdCcUlBQkJCblpCL0FkeFFmQVphaWdDQUhNZ0FFSC9BWEZCQW5SQjhDRnFLQUlBYW5NZ0JYTWlCVUVXZGtIOEIzRkI4QWxxS0FJQUlBVkJEblpCL0FkeFFmQVJhaWdDQUdvZ0JVRUdka0g4QjNGQjhCbHFLQUlBY3lBRlFmOEJjVUVDZEVId0lXb29BZ0JxY3lBQWN5SUFRUloyUWZ3SGNVSHdDV29vQWdBZ0FFRU9ka0g4QjNGQjhCRnFLQUlBYWlBQVFRWjJRZndIY1VId0dXb29BZ0J6SUFCQi93RnhRUUowUWZBaGFpZ0NBR3B6SUFWeklnVkIvd0Z4UVFKMFFmQWhhaWdDQUNFSElBVkJCblpCL0FkeFFmQVphaWdDQUNFUElBVkJGblpCL0FkeFFmQUphaWdDQUNFUUlBVkJEblpCL0FkeFFmQVJhaWdDQUNFUlFRQW9BckFxSVJJZ0JrRUFLQUswS2lBRmN5SUZOZ0lBSUFaQkJHb2dFaUFISUE4Z0VDQVJhbk5xY3lBQWN5SUFOZ0lBSUFaQkNHb2lCa0hzS1VrTkFBdEJBQ0FBTmdLRXF3RkJBQ0FGTmdLQXF3RUNRQ0FUUVFGeFJRMEFRUUFoRTBFQVFRQXBBdkFwSUJpRk53THdLVUVBUVFBcEF2Z3BJQ0dGTndMNEtVRUFRUUFwQW9BcUlCaUZOd0tBS2tFQVFRQXBBb2dxSUNHRk53S0lLa0VBUVFBcEFwQXFJQmlGTndLUUtrRUFRUUFwQXBncUlDR0ZOd0tZS2tFQVFRQXBBcUFxSUJpRk53S2dLa0VBUVFBcEFxZ3FJQ0dGTndLb0trRUFRUUFwQXJBcUlCaUZOd0t3S2d3QkN3c2dDRUYvYWlJSURRQUxRUUFvQXJRcUlROUJBQ2dDc0NvaEVFRUFLQUtzS2lFUlFRQW9BcWdxSVJKQkFDZ0NwQ29oRTBFQUtBS2dLaUVJUVFBb0Fwd3FJUlJCQUNnQ21Db2hGVUVBS0FLVUtpRVdRUUFvQXBBcUlSZEJBQ2dDakNvaENVRUFLQUtJS2lFS1FRQW9Bb1FxSVF0QkFDZ0NnQ29oREVFQUtBTDhLU0VPUVFBb0F2Z3BJUTFCQUNnQzlDa2hHVUVBS0FMd0tTRWFRUUFoR3dOQUlCdEJBblFpSEVHZ0NHb3BBd0FpR0tjaEFDQVlRaUNJcHlFR1FVQWhCd05BSUJBZ0VTQVNJQk1nQ0NBVUlCVWdGaUFYSUFrZ0NpQUxJQXdnRGlBTklBWWdHWE1nQUNBYWN5SUFRUloyUWZ3SGNVSHdDV29vQWdBZ0FFRU9ka0g4QjNGQjhCRnFLQUlBYWlBQVFRWjJRZndIY1VId0dXb29BZ0J6SUFCQi93RnhRUUowUWZBaGFpZ0NBR3B6SWdWQkZuWkIvQWR4UWZBSmFpZ0NBQ0FGUVE1MlFmd0hjVUh3RVdvb0FnQnFJQVZCQm5aQi9BZHhRZkFaYWlnQ0FITWdCVUgvQVhGQkFuUkI4Q0ZxS0FJQWFuTWdBSE1pQUVFV2RrSDhCM0ZCOEFscUtBSUFJQUJCRG5aQi9BZHhRZkFSYWlnQ0FHb2dBRUVHZGtIOEIzRkI4QmxxS0FJQWN5QUFRZjhCY1VFQ2RFSHdJV29vQWdCcWN5QUZjeUlGUVJaMlFmd0hjVUh3Q1dvb0FnQWdCVUVPZGtIOEIzRkI4QkZxS0FJQWFpQUZRUVoyUWZ3SGNVSHdHV29vQWdCeklBVkIvd0Z4UVFKMFFmQWhhaWdDQUdweklBQnpJZ0JCRm5aQi9BZHhRZkFKYWlnQ0FDQUFRUTUyUWZ3SGNVSHdFV29vQWdCcUlBQkJCblpCL0FkeFFmQVphaWdDQUhNZ0FFSC9BWEZCQW5SQjhDRnFLQUlBYW5NZ0JYTWlCVUVXZGtIOEIzRkI4QWxxS0FJQUlBVkJEblpCL0FkeFFmQVJhaWdDQUdvZ0JVRUdka0g4QjNGQjhCbHFLQUlBY3lBRlFmOEJjVUVDZEVId0lXb29BZ0JxY3lBQWN5SUFRUloyUWZ3SGNVSHdDV29vQWdBZ0FFRU9ka0g4QjNGQjhCRnFLQUlBYWlBQVFRWjJRZndIY1VId0dXb29BZ0J6SUFCQi93RnhRUUowUWZBaGFpZ0NBR3B6SUFWeklnVkJGblpCL0FkeFFmQUphaWdDQUNBRlFRNTJRZndIY1VId0VXb29BZ0JxSUFWQkJuWkIvQWR4UWZBWmFpZ0NBSE1nQlVIL0FYRkJBblJCOENGcUtBSUFhbk1nQUhNaUFFRVdka0g4QjNGQjhBbHFLQUlBSUFCQkRuWkIvQWR4UWZBUmFpZ0NBR29nQUVFR2RrSDhCM0ZCOEJscUtBSUFjeUFBUWY4QmNVRUNkRUh3SVdvb0FnQnFjeUFGY3lJRlFSWjJRZndIY1VId0NXb29BZ0FnQlVFT2RrSDhCM0ZCOEJGcUtBSUFhaUFGUVFaMlFmd0hjVUh3R1dvb0FnQnpJQVZCL3dGeFFRSjBRZkFoYWlnQ0FHcHpJQUJ6SWdCQkZuWkIvQWR4UWZBSmFpZ0NBQ0FBUVE1MlFmd0hjVUh3RVdvb0FnQnFJQUJCQm5aQi9BZHhRZkFaYWlnQ0FITWdBRUgvQVhGQkFuUkI4Q0ZxS0FJQWFuTWdCWE1pQlVFV2RrSDhCM0ZCOEFscUtBSUFJQVZCRG5aQi9BZHhRZkFSYWlnQ0FHb2dCVUVHZGtIOEIzRkI4QmxxS0FJQWN5QUZRZjhCY1VFQ2RFSHdJV29vQWdCcWN5QUFjeUlBUVJaMlFmd0hjVUh3Q1dvb0FnQWdBRUVPZGtIOEIzRkI4QkZxS0FJQWFpQUFRUVoyUWZ3SGNVSHdHV29vQWdCeklBQkIvd0Z4UVFKMFFmQWhhaWdDQUdweklBVnpJZ1ZCRm5aQi9BZHhRZkFKYWlnQ0FDQUZRUTUyUWZ3SGNVSHdFV29vQWdCcUlBVkJCblpCL0FkeFFmQVphaWdDQUhNZ0JVSC9BWEZCQW5SQjhDRnFLQUlBYW5NZ0FITWlBRUVXZGtIOEIzRkI4QWxxS0FJQUlBQkJEblpCL0FkeFFmQVJhaWdDQUdvZ0FFRUdka0g4QjNGQjhCbHFLQUlBY3lBQVFmOEJjVUVDZEVId0lXb29BZ0JxY3lBRmN5SUZRUloyUWZ3SGNVSHdDV29vQWdBZ0JVRU9ka0g4QjNGQjhCRnFLQUlBYWlBRlFRWjJRZndIY1VId0dXb29BZ0J6SUFWQi93RnhRUUowUWZBaGFpZ0NBR3B6SUFCeklRWWdCU0FQY3lFQUlBZEJBV29pQncwQUMwRUFJQVkyQW9TckFVRUFJQUEyQW9DckFTQUVRUWhxSUJ4cVFRQXBBNENyQVRjREFDQWJRUVJKSVFBZ0cwRUNhaUViSUFBTkFBc2dBaUFCS0FJQU5nSUFJQUlnQVNnQ0JEWUNCQ0FDSUFFb0FnZzJBZ2dnQWlBQktBSU1OZ0lNSUFJZ0FTZ0NFRFlDRUNBQ0lBRW9BaFEyQWhRZ0FpQUJLQUlZTmdJWUlBSWdBU3dBSEVId0NHb3RBQUJCTUhGQndBaHFMUUFBT2dBY0lBUWdCQ2dDQ0NJQlFSaDBJQUZCZ1A0RGNVRUlkSElnQVVFSWRrR0EvZ054SUFGQkdIWnljaUlITmdJSUlBUWdCQ2dDRENJQlFSaDBJQUZCZ1A0RGNVRUlkSElnQVVFSWRrR0EvZ054SUFGQkdIWnljaUlCTmdJTUlBUWdCQ2dDRUNJQVFSaDBJQUJCZ1A0RGNVRUlkSElnQUVFSWRrR0EvZ054SUFCQkdIWnljaUlBTmdJUUlBUWdCQ2dDRkNJRlFSaDBJQVZCZ1A0RGNVRUlkSElnQlVFSWRrR0EvZ054SUFWQkdIWnljaUlGTmdJVUlBUWdCQ2dDR0NJR1FSaDBJQVpCZ1A0RGNVRUlkSElnQmtFSWRrR0EvZ054SUFaQkdIWnljaUlHTmdJWUlBUWdCQ2dDSENJUFFSaDBJQTlCZ1A0RGNVRUlkSElnRDBFSWRrR0EvZ054SUE5QkdIWnljaUlQTmdJY0FrQUNRQ0FERFFBZ0FpQUVLUU1JTndNQUlBSWdCQ2tERURjRENDQUNJQVFwQXhnM0F4QU1BUXNnQWlBUFFUOXhRY0FJYWkwQUFEb0FPQ0FDSUFWQkduWkJ3QWhxTFFBQU9nQXhJQUlnQUVFL2NVSEFDR290QUFBNkFDZ2dBaUFIUVJwMlFjQUlhaTBBQURvQUlTQUNJQVF0QUFnaUJFRUNka0hBQ0dvdEFBQTZBQjBnQWlBUFFRNTJRVHh4UWNBSWFpMEFBRG9BT3lBQ0lBOUJDblpCUDNGQndBaHFMUUFBT2dBNUlBSWdCa0VTZGtFL2NVSEFDR290QUFBNkFEVWdBaUFHUVFoMlFUOXhRY0FJYWkwQUFEb0FOQ0FDSUFWQkVIWkJQM0ZCd0FocUxRQUFPZ0F3SUFJZ0JVSDhBWEZCQW5aQndBaHFMUUFBT2dBdElBSWdBRUVZZGtFL2NVSEFDR290QUFBNkFDd2dBaUFBUVFwMlFUOXhRY0FJYWkwQUFEb0FLU0FDSUFGQkVuWkJQM0ZCd0FocUxRQUFPZ0FsSUFJZ0FVRUlka0UvY1VIQUNHb3RBQUE2QUNRZ0FpQUhRUkIyUVQ5eFFjQUlhaTBBQURvQUlDQUNJQTlCRkhaQkQzRWdEMEVFZGtFd2NYSkJ3QWhxTFFBQU9nQTZJQUlnRDBFR2RrRURjU0FHUVJaMlFUeHhja0hBQ0dvdEFBQTZBRGNnQWlBR1FReDJRVEJ4SUFaQkhIWnlRY0FJYWkwQUFEb0FOaUFDSUFaQkFuUkJQSEVnQmtFT2RrRURjWEpCd0FocUxRQUFPZ0F6SUFJZ0JrSHdBWEZCQkhZZ0JVRVVka0V3Y1hKQndBaHFMUUFBT2dBeUlBSWdCVUVXZGtFRGNTQUZRUVoyUVR4eGNrSEFDR290QUFBNkFDOGdBaUFGUVFSMFFUQnhJQVZCREhaQkQzRnlRY0FJYWkwQUFEb0FMaUFDSUFCQkRuWkJQSEVnQUVFZWRuSkJ3QWhxTFFBQU9nQXJJQUlnQUVFVWRrRVBjU0FBUVFSMlFUQnhja0hBQ0dvdEFBQTZBQ29nQWlBQVFRWjJRUU54SUFGQkZuWkJQSEZ5UWNBSWFpMEFBRG9BSnlBQ0lBRkJESFpCTUhFZ0FVRWNkbkpCd0FocUxRQUFPZ0FtSUFJZ0FVRUNkRUU4Y1NBQlFRNTJRUU54Y2tIQUNHb3RBQUE2QUNNZ0FpQUJRZkFCY1VFRWRpQUhRUlIyUVRCeGNrSEFDR290QUFBNkFDSWdBaUFIUVJaMlFRTnhJQWRCQm5aQlBIRnlRY0FJYWkwQUFEb0FIeUFDSUFSQkJIUkJNSEVnQjBFTWRrRVBjWEpCd0FocUxRQUFPZ0FlQ3lBQ1FRQTZBRHdMQzRZR0FRWi9Jd0JCNEFCcklnTWtBRUVBSVFRZ0FFR1FLMnBCQURvQUFDQURRU1E2QUVZZ0F5QUJRUXB1SWdCQk1HbzZBRVFnQTBHazVJU2pBallDUUNBRElBQkI5Z0ZzSUFGcVFUQnlPZ0JGSUFOQkFDMEFnQ3NpQVVFQ2RrSEFDR290QUFBNkFFY2dBMEVBTFFDQ0t5SUFRVDl4UWNBSWFpMEFBRG9BU2lBRFFRQXRBSU1ySWdWQkFuWkJ3QWhxTFFBQU9nQkxJQU5CQUMwQWhTc2lCa0UvY1VIQUNHb3RBQUE2QUU0Z0EwRUFMUUNCS3lJSFFRUjJJQUZCQkhSQk1IRnlRY0FJYWkwQUFEb0FTQ0FESUFCQkJuWWdCMEVDZEVFOGNYSkJ3QWhxTFFBQU9nQkpJQU5CQUMwQWhDc2lBVUVFZGlBRlFRUjBRVEJ4Y2tIQUNHb3RBQUE2QUV3Z0F5QUdRUVoySUFGQkFuUkJQSEZ5UWNBSWFpMEFBRG9BVFNBRFFRQXRBSVlySWdGQkFuWkJ3QWhxTFFBQU9nQlBJQU5CQUMwQWlDc2lBRUUvY1VIQUNHb3RBQUE2QUZJZ0EwRUFMUUNKS3lJRlFRSjJRY0FJYWkwQUFEb0FVeUFEUVFBdEFJc3JJZ1pCUDNGQndBaHFMUUFBT2dCV0lBTkJBQzBBakNzaUIwRUNka0hBQ0dvdEFBQTZBRmNnQTBFQUxRQ0hLeUlJUVFSMklBRkJCSFJCTUhGeVFjQUlhaTBBQURvQVVDQURJQUJCQm5ZZ0NFRUNkRUU4Y1hKQndBaHFMUUFBT2dCUklBTkJBQzBBaWlzaUFVRUVkaUFGUVFSMFFUQnhja0hBQ0dvdEFBQTZBRlFnQXlBR1FRWjJJQUZCQW5SQlBIRnlRY0FJYWkwQUFEb0FWU0FEUVFBdEFJMHJJZ0ZCQkhZZ0IwRUVkRUV3Y1hKQndBaHFMUUFBT2dCWUlBTkJBRG9BWFNBRFFRQXRBSTRySWdCQlAzRkJ3QWhxTFFBQU9nQmFJQU5CQUMwQWp5c2lCVUVDZGtIQUNHb3RBQUE2QUZzZ0F5QUFRUVoySUFGQkFuUkJQSEZ5UWNBSWFpMEFBRG9BV1NBRElBVkJCSFJCTUhGQndBaHFMUUFBT2dCY1FaQXJJQU5Cd0FCcUlBTWdBaEFCQTBBZ0JFR0FLMm9nQXlBRWFpSUJMUUFBT2dBQUlBUkJnU3RxSUFGQkFXb3RBQUE2QUFBZ0JFR0NLMm9nQVVFQ2FpMEFBRG9BQUNBRVFZTXJhaUFCUVFOcUxRQUFPZ0FBSUFSQmhDdHFJQUZCQkdvdEFBQTZBQUFnQkVFRmFpSUVRVHhIRFFBTElBTkI0QUJxSkFBTGh3RUNBWDhJZmlNQVFjQUFheUlCSkFBZ0FFRzhLMnBCQURvQUFFRzhLMEdBS3lBQlFRRVFBVUVBS1FPa0t5RUNJQUVwQXlRaEEwRUFLUU9jS3lFRUlBRXBBeHdoQlVFQUtRT3NLeUVHSUFFcEF5d2hCMEVBS1FPMEt5RUlJQUVwQXpRaENTQUJRY0FBYWlRQUlBVWdCRklnQXlBQ1Vtb2dCeUFHVW1wQmYwRUFJQWtnQ0ZJYlJnc0x4eUlDQUVHQUNBdndBUUlFQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFRUUFBQUFBQUFBQWFIQnlUMEp1WVdWc2IyaGxVM0psWkVSNWNtTjBZblZ2QUFBQUFBQUFBQUF1TDBGQ1EwUkZSa2RJU1VwTFRFMU9UMUJSVWxOVVZWWlhXRmxhWVdKalpHVm1aMmhwYW10c2JXNXZjSEZ5YzNSMWRuZDRlWG93TVRJek5EVTJOemc1QUFBQUFBQUFBQUFBQUFBQUFBQUFBRUJBUUVCQVFFQkFRRUJBUUVCQUFBRTJOemc1T2pzOFBUNC9RRUJBUUVCQVFBSURCQVVHQndnSkNnc01EUTRQRUJFU0V4UVZGaGNZR1JvYlFFQkFRRUJBSEIwZUh5QWhJaU1rSlNZbktDa3FLeXd0TGk4d01USXpORFZBUUVCQVFBQkI4QWtMeUNDbUN6SFJyTFhmbU50eS9TKzMzeHJRN2EvaHVKWitKbXBGa0h5Nm1YOHM4VWVab1NUM2JKR3o0dklCQ0JiOGpvWFlJR2xqYVU1WGNhUCtXS1IrUFpQMGozU1ZEVmkyam5KWXpZdHg3a29WZ2gya1ZIdTFXVnJDT2RVd25CTmc4aW9qc05IRjhJVmdLQmg1UWNydk9OdTRzTng1amc0WU9tQ0xEcDVzUG9vZXNNRjNGZGNuU3pHOTJpK3ZlR0JjWUZYekpWWG1sS3RWcW1LWVNGZEFGT2hqYWpuS1ZiWVFxeW8wWE15MHp1aEJFYStHVktHVDZYSjhFUlR1c3lxOGIyTmR4YWtyOWpFWWRCWStYTTRlazRlYk03cldyMXpQSkd5QlV6SjZkNGFWS0poSWp6dXZ1VXRyRytpL3hKTWhLR2JNQ2RoaGtha2grMkNzZkVneWdPeGRYVjJFNzdGMWhla0NJeWJjaUJ0bDY0RStpU1BGckpiVDgyOXREemxDOUlPQ1JBc3VCQ0NFcEVyd3lHbGVteCtlUW1qR0lacHM2ZlpobkF4bjhJalRxOUtnVVdwb0wxVFlLS2NQbHFNelVhdHNDKzl1NUR0NkUxRHdPN3FZS3Z0K0hXWHhvWFlCcnprK1djcG1pQTVEZ2htRzdveTBuMjlGdzZXRWZiNWVpenZZZFcvZ2N5REJoWjlFR2tDbWFzRldZcXJUVGdaM1B6WnkzLzRiUFFLYlFpVFgwRGRJRWdyUTArb1AyNXZBOFVuSmNsTUhleHVaZ05oNTFDWDMzdWoyR2xEKzR6dE1lYmE5NEd5WHVnYkFCTFpQcWNIRVlKOUF3cDVjWG1Na2FobXZiL3RvdFZOc1B1dXlPUk52N0ZJN0gxSDhiU3lWTUp0RVJZSE1DYjFlcndUUTQ3NzlTalBlQnlnUFpyTkxMaGxYcU12QUQzVElSVGxmQzlMYis5TzV2Y0I1VlFveVlCckdBS0hXZVhJc1FQNGxuMmZNb3gvNytPbWxqdmdpTXR2ZkZuVThGV3RoL2NnZVVDK3JVZ1d0K3JVOU1tQ0hJLzFJZXpGVGd0OEFQcnRYWEo2Z2pHL0tMbGFIR3R0cEY5LzJxRUxWdy85K0tNWXlaNnh6VlUrTXNDZGJhY2hZeXJ0ZG8vL2hvQkh3dUpnOStoQzRneUg5YkxYOFNsdlQwUzE1NUZPYVpVWDR0cnhKanRLUWwvdEwydkxkNFROK3k2UkJFL3RpNk1ia3p0cktJTzhCVEhjMi9wNSswTFFmOFN0TjJ0dVZtSkdRcm5HT3JlcWcxWk5yME5HTzBPQWx4Njh2V3p5T3Q1UjFqdnZpOW85a0t4THlFcmlJaUJ6d0RaQ2dYcTFQSE1PUGFKSHh6OUd0d2FpekdDSXZMM2NYRHI3K0xYWHFvUjhDaXcvTW9PWG9kRysxMXZPc0dKbmlpYzdnVDZpMHQrQVQvWUU3eEh6WnFLM1NacUpmRmdWM2xZQVVjOHlUZHhRYUlXVWdyZWFHK3JWMzlVSlV4ODgxbmZzTXI4M3JvSWsrZTlNYlFkWkpmaDZ1TFE0bEFGNnpjU0M3QUdnaXIrQzRWNXMyWkNRZXVRbndIWkZqVmFxbTMxbUpROEY0ZjFOYTJhSmJmU0RGdWVVQ2RnTW1nNm5QbFdKb0djZ1JRVXB6VHNvdFI3TktxUlI3VWdCUkd4VXBVNW8vVncvVzVNYWJ2SGFrWUNzQWRPYUJ0Vys2Q0IvcEcxZHI3SmJ5RmRrTktpRmxZN2EyK2JubkxnVTAvMlJXaGNWZExiQlRvWStmcVpsSHVnaHFCNFZ1NlhCNlMwUXBzN1V1Q1hYYkl5WVp4TENtYnExOTM2ZEp1R0R1bkdheTdZOXhqS3JzL3hlYWFXeFNaRmJobnJIQ3BRSTJHU2xNQ1hWQUUxbWdQam9ZNUpxWVZEOWxuVUpiMXVTUGE5WS85NWtIbk5LaDlURG83K1k0TFUzQlhTWHdoaURkVENicmNJVEc2WUpqWHN3ZUFqOXJhQW5KNzdvK0ZCaVhQS0Z3YW11RU5YOW9odUtnVWdWVG5MYzNCMUNxSElRSFBseXUzbi9zUkgyT3VQSVdWemZhT3JBTkRGRHdCQjhjOFArekFBSWE5UXl1c25TMVBGaDZneVc5SVFuYytST1IwZll2cVh4elJ6S1VBVWYxSW9IbDVUcmMyc0kzTkhhMXlLZmQ4NXBHWVVTcERnUFFEejdIeU94QkhuV2ttYzA0NGk4TzZqdWh1NEF5TWJNK0dEaUxWRTRJdVcxUEF3MUNiNzhFQ3ZhUUVyZ3NlWHlYSkhLd2VWYXZpYSs4SDNlYTNoQUlrOWtTcm91ekxqL1AzQjl5RWxVa2NXc3U1dDBhVUlmTmhKOFlSMWg2RjlvSWRMeWFuN3lNZlV2cE91eDY3UG9kaGR0bVF3bGowc05reEVjWUhPOEkyUlV5Tnp0RDNSYTZ3aVJEVGFFU1VjUmxLZ0lBbEZEZDVEb1RudmpmY1ZWT01SRFdkNnlCbXhrUlgvRldOUVJyeDZQWE94Z1JQQW1sSkZudDVvL3krdnZ4bHl5L3VwNXVQQlVlY0VYamhyRnY2ZW9LWGc2R3N5bytXaHpuSDNmNkJqMU91ZHhsS1E4ZDU1bldpVDZBSmNobVVuakpUQzVxc3hDY3VnNFZ4bmpxNHBSVFBQeWw5QzBLSHFkTzkvSTlLeDAyRHlZNUdXQjV3aGtJcHlOU3RoSVQ5MjcrcmV0bUg4UHFsVVc4NDRQSWU2YlJOMyt4S1ArTUFlL2RNc09sV215K2hTRllaUUtZcTJnUHBjN3VPNVV2MjYxOTd5cUVMMjViS0xZaEZYQmhCeWwxUjkzc0VCV2ZZVENvekJPV3ZXSHJIdjQwQTg5akE2cVFYSE8xT2FKd1RBdWVudFVVM3FyTHZJYk03cWNzWW1DclhLdWNib1R6c3E4ZWkyVEs4TDBadVdram9GQzdXbVV5V21oQXM3UXFQTlhwbmpIM3VDSEFHUXRVbTVtZ1g0ZCttZmVWcUgwOVlwcUlOL2gzTGVPWFg1UHRFWUVTYUJZcGlEVU8xaC9teDZIZjNwYVp1bGg0cFlUMVYyTnlJaHYvdzRPYmxrYkNHdXNLczgxVU1DNVQ1RWpaanlneHZHM3Y4dXRZNnYvR05HSHRLUDV6UEh6dTJSUktYZU8zWk9nVVhSQkM0Qk0rSUxiaTdrWHFxNnFqRlU5czI5QlB5L3BDOUVMSHRidHE3eDA3VDJVRkljMUJubmtlMk1kTmhZWnFSMHZrVUdLQlBmS2hZczlHSm8xYm9JT0kvS08yeDhIREpCVi9rblRMYVF1S2hFZUZzcEpXQUw5YkNaMUlHYTEwc1dJVUFBNkNJeXFOUWxqcTlWVU1QdlN0SFdGd1B5T1M4SEl6UVg2VGpmSHNYOWJiT3lKc1dUZmVmR0IwN3N1bjhvVkFiakozem9TQUI2YWVVUGdaVmRqdjZEV1gyV0dxcDJtcHdnWU14ZnlyQkZyY3lndUFMbnBFbm9RMFJjTUZaOVg5eVo0ZUR0UGJjOXZOaUZVUWVkcGZaMEJEWitObE5NVEYyRGcrY1o3NEtEMGcvMjN4NXlFK0ZVbzlzSThybitQbTk2MkQyMmhhUGVuM1FJR1VIQ1pNOWpRcGFaVDNJQlZCOTlRQ2RpNXI5THhvQUtMVWNTUUkxR3IwSURPMzFMZERyMkVBVUM3Mk9SNUdSU1NYZEU4aEZFQ0lpNzhkL0pWTnI1RzFsdFBkOUhCRkw2Qm03QW04djRXWHZRUFFiYXgvQklYTE1iTW42NVpCT2YxVjVrY2wycG9LeXFzbGVGQW85Q2tFVTlxR0xBcjdiYmJwWWhUY2FBQnBTTmVrd0E1bzdvMmhKNkwrUDArTXJZZm9CdUNNdGJiVzlIcDhIczZxN0Y4MzA1bWplTTVDS210QU5aNytJTG1GODltcjF6bnVpMDRTTy9mNnlSMVdHRzFMTVdhakpyS1g0K3AwK200Nk1rTmIzZmZuUVdqN0lIaktUdlVLKzVlei90aXNWa0JGSjVWSXVqbzZVMVdIallNZ3Q2bHIva3VWbHRDOFo2aFZXSm9Wb1dNcHFjd3oyK0daVmtvcXB2a2xNVDhjZnZSZWZERXBrQUxvK1Axd0x5Y0VYQlc3Z09Nc0tBVklGY0dWSW0zRzVEOFR3VWpjaGcvSDdzbjVCdzhmQkVHa2VVZEFGMjZJWGV0Ulh6TFJ3SnZWajhHODhtUTFFVUUwZUhzbFlKd3FZS1BvK044YmJHTWZ3clFTRHA0eTRRTFJUMmF2RllIUnl1Q1ZJMnZoa2o0ellnc2tPeUs1dnU0T29yS0ZtUTI2NW93TWN0NG85Nkl0UlhnUzBQMlV0NVZpQ0gxazhQWE01MitqU1ZUNlNIMkhKLzJkd3g2TlB2TkJZMGNLZFA4dW1hdHViem8zL2ZqMFlOd1NxUGpkNjZGTTRSdVpEV3R1MnhCVmU4WTNMR2R0TzlSbEp3VG8wTnpIRFNueG8vOEF6SklQT2JVTDdROXArNTk3WnB4OTI4NEx6NUdnbzE0VjJZZ3ZFN3NrclZ0UnYzbVVlK3ZXTzNhekxqazNlVmtSekpmaUpvQXRNUzcwcDYxQ2FEc3Jhc2JNVEhVU0hQRXVlRGRDRW1yblVaSzM1cnVoQmxCaiswc1lFR3NhK3UzS0VkaTlKVDNKdytIaVdSWkNSSVlURWdwdTdBelpLdXFyMVU1bnIyUmZxSWJhaU9tL3Z2N0Q1R1JYZ0x5ZGhzRDM4UGg3ZUdCTllBTmdSb1A5MGJBZk9QWUVya1YzelB3MjF6TnJRb054cXg3d2gwR0FzRjllQUR5K1Y2QjNKSzdvdlpsQ1JsVmhMbGkvai9SWVRxTDkzZkk0NzNUMHdyMkpoOFA1WmxOMGpyUElWZkoxdExuWi9FWmhKdXQ2aE44ZGkza09hb1RpbFYrUmpsbHVSbkJYdENDUlZkV01UTjRDeWVHc0M3blFCWUs3U0dLb0VaNnBkSFcyR1grM0NkeXA0S0VKTFdZelJqTEVBaDlhNkl5KzhBa2xvSmxLRVA1dUhSMDl1UnJmcEtVTEQvS0dvV254YUNpRDJyZmMvZ1k1VjV2TzRxRlNmODFQQVY0UlVQcURCcWZFdFFLZ0o5RG1EU2VNK0pwQmhqOTNCa3hndzdVR3FHRW9laGZ3NEliMXdLcFlZQUJpZmR3dzE1N21FV1BxT0NPVTNjSlROQmJDd2xidXk3dmV0cnlRb1gzODYzWWRXYzRKNUFWdmlBRjhTejBLY2pra2ZKSjhYM0xqaHJtZFRYSzBXOEVhL0xpZTAzaFZWTzIxcGZ3STAzdzkyTVFQclUxZTcxQWUrT1poc2RrVWhhSThFMUZzNThmVmI4Uk80VmJPdnlvMk44akczVFF5bXRjU2dtT1Nqdm9PWitBQVlFQTN6ams2ei9YNjB6ZDN3cXNiTGNWYW5tZXdYRUkzbzA5QUo0TFR2cHU4bVoyT0VkVVZjdysvZmh3dDFudkVBTWRyRzR5M1JaQ2hJYjZ4YnJLMGJqWnFMNnRJVjNsdWxMelNkcVBHeU1KSlplNzREMU45M28xR0hRcHoxY1pOMEV6YnV6a3BVRWE2cWVnbWxhd0U0MTYrOE5YNm9acFJMV3Jpak85akl1NkdtcmpDaWNEMkxpUkRxZ01lcGFUUThweTZZY0NEVFdycG0xQVY1WS9XVzJTNithSW1LT0U2T3FlR2xhbEw2V0pWNzlQdkw4ZmE5MUwzYVc4RVAxa0srbmNWcWVTQUFZYXdoNjNtQ1p1VDVUNDdXdjJRNlpmWE5KN1p0L0FzVVlzckFqcXMxWlo5cG4wQjFqN1AwU2d0Zlh6UEpaOGZtN2p5clhLMDFscE05WWhhY2F3cDRPYWxHZUQ5ckxCSG0vcVQ3WTNFMCtqTVZ6c29LV2JWK0NndUUzbVJBVjk0VldCMTdVUU9sdmVNWHRQajFHMEZGYnB0OUlnbFlhRUR2ZkJrQlJXZTY4T2lWNUE4N0Jvbmx5b0hPcW1iYlQ4YjlTRmpIdnRtblBVWjg5d21LTmt6ZGZYOVZiR0NORllEdXp5NmloRjNVU2o0MlFyQ1oxSE1xMStTcmN4UkYraE5qdHd3T0dKWW5UZVIrU0NUd3BCNjZzNTdQdnRremlGUk1yNVBkMzdqdHFoR1BTbkRhVlBlU0lEbUUyUVFDSzZpSkxKdDNmMHRoV2xtSVFjSkNrYWFzOTNBUldUUDNteFlyc2dnSE4zM3ZsdEFqVmdiZndIU3pMdmp0R3QrYXFMZFJmOVpPa1FLTlQ3VnpiUzhxTTdxY3J1RVpQcXVFbWFOUjI4OHYyUGttOUtlWFM5VUczZkNybkJqVHZhTkRRNTBWeE5iNTNFV2N2aGRmVk92Q010QVFNeml0RTVxUnRJMGhLOFZBU2dFc09FZE9waVZ0Sis0QmtpZ2JzNkNPejl2Z3FzZ05Vc2RHZ0g0SjNJbnNXQVZZZHcvaytjcmVUcTd2U1ZGTk9FNWlLQkxlYzVSdDhreUw4bTZINkIreUJ6Zzl0SEh2TU1SQWMvSHF1aWhTWWVRR3BxOVQ5VEwzdHJRT05vSzFTckRPUU5uTnBIR2ZESDVqVThyc2VDM1daNzNPcnYxUS84WjFmS2NSZGtuTENLWHZ5cjg1aFZ4L0pFUEpSV1VtMkdUNWZycm5MYk9XV1Nvd3RHb3VoSmVCOEcyREdvRjQyVlEwaEJDcEFQTERtN3M0RHZibUJhK29KaE1aT2w0TWpLVkg1L2ZrdFBnS3pTZzB4N3ljWWxCZEFvYmpEU2pTeUJ4dnNYWU1uYkRqWjgxM3k0dm1adEhid3ZtSGZIakQxVGFUT1dSMk5vZXozbGl6bTkrUHMxbXNSZ1dCUjBzL2NYU2o0U1pJdnYyVi9NajlTTjJNcVl4TmFpVEFzM01WbUtCOEt5MTYzVmFsellXYnN4ejBvaVNZcGJlMEVtNWdSdVFVRXdVVnNaeHZjZkc1Z29VZWpJRzBPRkZtbnZ5dy8xVHFza0FENmhpNHI4bHUvYlN2VFVGYVJKeElnSUVzbnpQeTdZcm5IYk53RDRSVTlQalFCWmd2YXM0OEsxSEpad2dPTHAyemtiM3hhR3ZkMkJnZFNCTy9zdUYySTNvaXJENXFucCtxdmxNWE1KSUdZeUsrd0xrYXNNQitlSHIxbW40MUpDZzNseW1MU1VKUDUvbUNNSXlZVTYzVytKM3p1UGZqMWZtY3NNNmlHby9KTk1JbzRVdWloa1RSSE53QXlJNENhVFFNWjhwbVBvdUNJbHNUdXptSVNoRmR4UFFPTTltVkw1c0RPazB0eW1zd04xUWZNbTExWVEvRndsSHRkblZGcEliKzNtSlwiO1xuICAgIHZhciBoYXNoJDIgPSBcIjQ5N2I4OWIyXCI7XG4gICAgdmFyIHdhc21Kc29uJDIgPSB7XG4gICAgXHRuYW1lOiBuYW1lJDIsXG4gICAgXHRkYXRhOiBkYXRhJDIsXG4gICAgXHRoYXNoOiBoYXNoJDJcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gYmNyeXB0SW50ZXJuYWwob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgeyBjb3N0RmFjdG9yLCBwYXNzd29yZCwgc2FsdCB9ID0gb3B0aW9ucztcbiAgICAgICAgICAgIGNvbnN0IGJjcnlwdEludGVyZmFjZSA9IHlpZWxkIFdBU01JbnRlcmZhY2Uod2FzbUpzb24kMiwgMCk7XG4gICAgICAgICAgICBiY3J5cHRJbnRlcmZhY2Uud3JpdGVNZW1vcnkoZ2V0VUludDhCdWZmZXIoc2FsdCksIDApO1xuICAgICAgICAgICAgY29uc3QgcGFzc3dvcmRCdWZmZXIgPSBnZXRVSW50OEJ1ZmZlcihwYXNzd29yZCk7XG4gICAgICAgICAgICBiY3J5cHRJbnRlcmZhY2Uud3JpdGVNZW1vcnkocGFzc3dvcmRCdWZmZXIsIDE2KTtcbiAgICAgICAgICAgIGNvbnN0IHNob3VsZEVuY29kZSA9IG9wdGlvbnMub3V0cHV0VHlwZSA9PT0gJ2VuY29kZWQnID8gMSA6IDA7XG4gICAgICAgICAgICBiY3J5cHRJbnRlcmZhY2UuZ2V0RXhwb3J0cygpLmJjcnlwdChwYXNzd29yZEJ1ZmZlci5sZW5ndGgsIGNvc3RGYWN0b3IsIHNob3VsZEVuY29kZSk7XG4gICAgICAgICAgICBjb25zdCBtZW1vcnkgPSBiY3J5cHRJbnRlcmZhY2UuZ2V0TWVtb3J5KCk7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5vdXRwdXRUeXBlID09PSAnZW5jb2RlZCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW50QXJyYXlUb1N0cmluZyhtZW1vcnksIDYwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRpb25zLm91dHB1dFR5cGUgPT09ICdoZXgnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGlnZXN0Q2hhcnMgPSBuZXcgVWludDhBcnJheSgyNCAqIDIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBnZXREaWdlc3RIZXgoZGlnZXN0Q2hhcnMsIG1lbW9yeSwgMjQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gcmV0dXJuIGJpbmFyeSBmb3JtYXRcbiAgICAgICAgICAgIC8vIHRoZSBkYXRhIGlzIGNvcGllZCB0byBhbGxvdyBHQyBvZiB0aGUgb3JpZ2luYWwgbWVtb3J5IGJ1ZmZlclxuICAgICAgICAgICAgcmV0dXJuIG1lbW9yeS5zbGljZSgwLCAyNCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCB2YWxpZGF0ZU9wdGlvbnMgPSAob3B0aW9ucykgPT4ge1xuICAgICAgICBpZiAoIW9wdGlvbnMgfHwgdHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgb3B0aW9ucyBwYXJhbWV0ZXIuIEl0IHJlcXVpcmVzIGFuIG9iamVjdC4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIob3B0aW9ucy5jb3N0RmFjdG9yKSB8fCBvcHRpb25zLmNvc3RGYWN0b3IgPCA0IHx8IG9wdGlvbnMuY29zdEZhY3RvciA+IDMxKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nvc3QgZmFjdG9yIHNob3VsZCBiZSBhIG51bWJlciBiZXR3ZWVuIDQgYW5kIDMxJyk7XG4gICAgICAgIH1cbiAgICAgICAgb3B0aW9ucy5wYXNzd29yZCA9IGdldFVJbnQ4QnVmZmVyKG9wdGlvbnMucGFzc3dvcmQpO1xuICAgICAgICBpZiAob3B0aW9ucy5wYXNzd29yZC5sZW5ndGggPCAxKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Bhc3N3b3JkIHNob3VsZCBiZSBhdCBsZWFzdCAxIGJ5dGUgbG9uZycpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLnBhc3N3b3JkLmxlbmd0aCA+IDcyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Bhc3N3b3JkIHNob3VsZCBiZSBhdCBtb3N0IDcyIGJ5dGVzIGxvbmcnKTtcbiAgICAgICAgfVxuICAgICAgICBvcHRpb25zLnNhbHQgPSBnZXRVSW50OEJ1ZmZlcihvcHRpb25zLnNhbHQpO1xuICAgICAgICBpZiAob3B0aW9ucy5zYWx0Lmxlbmd0aCAhPT0gMTYpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU2FsdCBzaG91bGQgYmUgMTYgYnl0ZXMgbG9uZycpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLm91dHB1dFR5cGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgb3B0aW9ucy5vdXRwdXRUeXBlID0gJ2VuY29kZWQnO1xuICAgICAgICB9XG4gICAgICAgIGlmICghWydoZXgnLCAnYmluYXJ5JywgJ2VuY29kZWQnXS5pbmNsdWRlcyhvcHRpb25zLm91dHB1dFR5cGUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEluc3VwcG9ydGVkIG91dHB1dCB0eXBlICR7b3B0aW9ucy5vdXRwdXRUeXBlfS4gVmFsaWQgdmFsdWVzOiBbJ2hleCcsICdiaW5hcnknLCAnZW5jb2RlZCddYCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZXMgaGFzaCB1c2luZyB0aGUgYmNyeXB0IHBhc3N3b3JkLWhhc2hpbmcgZnVuY3Rpb25cbiAgICAgKiBAcmV0dXJucyBDb21wdXRlZCBoYXNoXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmNyeXB0KG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhbGlkYXRlT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgICAgIHJldHVybiBiY3J5cHRJbnRlcm5hbChvcHRpb25zKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IHZhbGlkYXRlSGFzaENoYXJhY3RlcnMgPSAoaGFzaCkgPT4ge1xuICAgICAgICBpZiAoIS9eXFwkMltheHliXVxcJFswLTNdWzAtOV1cXCRbLi9BLVphLXowLTldezUzfSQvLnRlc3QoaGFzaCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFzaFs0XSA9PT0gJzAnICYmIHBhcnNlSW50KGhhc2hbNV0sIDEwKSA8IDQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFzaFs0XSA9PT0gJzMnICYmIHBhcnNlSW50KGhhc2hbNV0sIDEwKSA+IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIGNvbnN0IHZhbGlkYXRlVmVyaWZ5T3B0aW9ucyA9IChvcHRpb25zKSA9PiB7XG4gICAgICAgIGlmICghb3B0aW9ucyB8fCB0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBvcHRpb25zIHBhcmFtZXRlci4gSXQgcmVxdWlyZXMgYW4gb2JqZWN0LicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmhhc2ggPT09IHVuZGVmaW5lZCB8fCB0eXBlb2Ygb3B0aW9ucy5oYXNoICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdIYXNoIHNob3VsZCBiZSBzcGVjaWZpZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5oYXNoLmxlbmd0aCAhPT0gNjApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSGFzaCBzaG91bGQgYmUgNjAgYnl0ZXMgbG9uZycpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdmFsaWRhdGVIYXNoQ2hhcmFjdGVycyhvcHRpb25zLmhhc2gpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgaGFzaCcpO1xuICAgICAgICB9XG4gICAgICAgIG9wdGlvbnMucGFzc3dvcmQgPSBnZXRVSW50OEJ1ZmZlcihvcHRpb25zLnBhc3N3b3JkKTtcbiAgICAgICAgaWYgKG9wdGlvbnMucGFzc3dvcmQubGVuZ3RoIDwgMSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQYXNzd29yZCBzaG91bGQgYmUgYXQgbGVhc3QgMSBieXRlIGxvbmcnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5wYXNzd29yZC5sZW5ndGggPiA3Mikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQYXNzd29yZCBzaG91bGQgYmUgYXQgbW9zdCA3MiBieXRlcyBsb25nJyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFZlcmlmaWVzIHBhc3N3b3JkIHVzaW5nIGJjcnlwdCBwYXNzd29yZC1oYXNoaW5nIGZ1bmN0aW9uXG4gICAgICogQHJldHVybnMgVHJ1ZSBpZiB0aGUgZW5jb2RlZCBoYXNoIG1hdGNoZXMgdGhlIHBhc3N3b3JkXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmNyeXB0VmVyaWZ5KG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhbGlkYXRlVmVyaWZ5T3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IHsgaGFzaCwgcGFzc3dvcmQgfSA9IG9wdGlvbnM7XG4gICAgICAgICAgICBjb25zdCBiY3J5cHRJbnRlcmZhY2UgPSB5aWVsZCBXQVNNSW50ZXJmYWNlKHdhc21Kc29uJDIsIDApO1xuICAgICAgICAgICAgYmNyeXB0SW50ZXJmYWNlLndyaXRlTWVtb3J5KGdldFVJbnQ4QnVmZmVyKGhhc2gpLCAwKTtcbiAgICAgICAgICAgIGNvbnN0IHBhc3N3b3JkQnVmZmVyID0gZ2V0VUludDhCdWZmZXIocGFzc3dvcmQpO1xuICAgICAgICAgICAgYmNyeXB0SW50ZXJmYWNlLndyaXRlTWVtb3J5KHBhc3N3b3JkQnVmZmVyLCA2MCk7XG4gICAgICAgICAgICByZXR1cm4gISFiY3J5cHRJbnRlcmZhY2UuZ2V0RXhwb3J0cygpLmJjcnlwdF92ZXJpZnkocGFzc3dvcmRCdWZmZXIubGVuZ3RoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdmFyIG5hbWUkMSA9IFwid2hpcmxwb29sXCI7XG4gICAgdmFyIGRhdGEkMSA9IFwiQUdGemJRRUFBQUFCRVFSZ0FBRi9ZQUYvQUdBQ2YzOEFZQUFBQXdrSUFBRUNBd0VEQUFFRkJBRUJBZ0lHRGdKL0FVSFFtd1VMZndCQmdBZ0xCM0FJQm0xbGJXOXllUUlBRGtoaGMyaGZSMlYwUW5WbVptVnlBQUFKU0dGemFGOUpibWwwQUFNTFNHRnphRjlWY0dSaGRHVUFCQXBJWVhOb1gwWnBibUZzQUFVTlNHRnphRjlIWlhSVGRHRjBaUUFHRGtoaGMyaGZRMkZzWTNWc1lYUmxBQWNLVTFSQlZFVmZVMGxhUlFNQkN1d2JDQVVBUVlBWkM4d0dBUWwrSUFBcEF3QWhBVUVBUVFBcEE0Q2JBU0lDTndQQW1RRWdBQ2tER0NFRElBQXBBeEFoQkNBQUtRTUlJUVZCQUVFQUtRT1ltd0VpQmpjRDJKa0JRUUJCQUNrRGtKc0JJZ2MzQTlDWkFVRUFRUUFwQTRpYkFTSUlOd1BJbVFGQkFDQUJJQUtGTndPQW1nRkJBQ0FGSUFpRk53T0ltZ0ZCQUNBRUlBZUZOd09RbWdGQkFDQURJQWFGTndPWW1nRWdBQ2tESUNFRFFRQkJBQ2tEb0pzQklnRTNBK0NaQVVFQUlBTWdBWVUzQTZDYUFTQUFLUU1vSVFSQkFFRUFLUU9vbXdFaUF6Y0Q2SmtCUVFBZ0JDQURoVGNEcUpvQklBQXBBekFoQlVFQVFRQXBBN0NiQVNJRU53UHdtUUZCQUNBRklBU0ZOd093bWdFZ0FDa0RPQ0VKUVFCQkFDa0R1SnNCSWdVM0EvaVpBVUVBSUFrZ0JZVTNBN2lhQVVFQVFwakdtTWIra082QXp3QTNBNENaQVVIQW1RRkJnSmtCRUFKQmdKb0JRY0NaQVJBQ1FRQkN0c3pLcnAvdjI4alNBRGNEZ0prQlFjQ1pBVUdBbVFFUUFrR0FtZ0ZCd0prQkVBSkJBRUxnK083MHVKVER2VFUzQTRDWkFVSEFtUUZCZ0prQkVBSkJnSm9CUWNDWkFSQUNRUUJDbmNEZmx1emxrdi9YQURjRGdKa0JRY0NaQVVHQW1RRVFBa0dBbWdGQndKa0JFQUpCQUVLVjd0MnAvcE84cFZvM0E0Q1pBVUhBbVFGQmdKa0JFQUpCZ0pvQlFjQ1pBUkFDUVFCQzJKS24wWkNXNkxXRmZ6Y0RnSmtCUWNDWkFVR0FtUUVRQWtHQW1nRkJ3SmtCRUFKQkFFSzl1OEdndjluUGd1Y0FOd09BbVFGQndKa0JRWUNaQVJBQ1FZQ2FBVUhBbVFFUUFrRUFRdVRQaE5yNHROL0tXRGNEZ0prQlFjQ1pBVUdBbVFFUUFrR0FtZ0ZCd0prQkVBSkJBRUw3M2ZPejF2dkZvNTUvTndPQW1RRkJ3SmtCUVlDWkFSQUNRWUNhQVVIQW1RRVFBa0VBUXNyYi9MM1ExZGJCTXpjRGdKa0JRY0NaQVVHQW1RRVFBa0dBbWdGQndKa0JFQUpCQUNBQ1FRQXBBNENhQVNBQUtRTUFoWVUzQTRDYkFVRUFJQWhCQUNrRGlKb0JJQUFwQXdpRmhUY0RpSnNCUVFBZ0IwRUFLUU9RbWdFZ0FDa0RFSVdGTndPUW13RkJBQ0FHUVFBcEE1aWFBU0FBS1FNWWhZVTNBNWliQVVFQUlBRkJBQ2tEb0pvQklBQXBBeUNGaFRjRG9Kc0JRUUFnQTBFQUtRT29tZ0VnQUNrREtJV0ZOd09vbXdGQkFDQUVRUUFwQTdDYUFTQUFLUU13aFlVM0E3Q2JBVUVBSUFWQkFDa0R1Sm9CSUFBcEF6aUZoVGNEdUpzQkM0WU1DZ0YrQVg4QmZnRi9BWDRCZndGK0FYOEVmZ04vSUFBZ0FDa0RBQ0lDcHlJRFFmOEJjVUVEZEVHUUNHb3BBd0JDT0lrZ0FDa0RPQ0lFcHlJRlFRVjJRZmdQY1VHUUNHb3BBd0NGUWppSklBQXBBekFpQnFjaUIwRU5ka0g0RDNGQmtBaHFLUU1BaFVJNGlTQUFLUU1vSWdpbklnbEJGWFpCK0E5eFFaQUlhaWtEQUlWQ09Ja2dBQ2tESUNJS1FpQ0lwMEgvQVhGQkEzUkJrQWhxS1FNQWhVSTRpU0FBS1FNWUlndENLSWluUWY4QmNVRURkRUdRQ0dvcEF3Q0ZRamlKSUFBcEF4QWlERUl3aUtkQi93RnhRUU4wUVpBSWFpa0RBSVZDT0lrZ0FDa0RDQ0lOUWppSXAwRURkRUdRQ0dvcEF3Q0ZRamlKSUFFcEF3Q0ZOd01BSUFBZ0RhY2lEa0gvQVhGQkEzUkJrQWhxS1FNQVFqaUpJQU5CQlhaQitBOXhRWkFJYWlrREFJVkNPSWtnQlVFTmRrSDREM0ZCa0FocUtRTUFoVUk0aVNBSFFSVjJRZmdQY1VHUUNHb3BBd0NGUWppSklBaENJSWluUWY4QmNVRURkRUdRQ0dvcEF3Q0ZRamlKSUFwQ0tJaW5RZjhCY1VFRGRFR1FDR29wQXdDRlFqaUpJQXRDTUlpblFmOEJjVUVEZEVHUUNHb3BBd0NGUWppSklBeENPSWluUVFOMFFaQUlhaWtEQUlWQ09Ja2dBU2tEQ0lVM0F3Z2dBQ0FNcHlJUFFmOEJjVUVEZEVHUUNHb3BBd0JDT0lrZ0RrRUZka0g0RDNGQmtBaHFLUU1BaFVJNGlTQURRUTEyUWZnUGNVR1FDR29wQXdDRlFqaUpJQVZCRlhaQitBOXhRWkFJYWlrREFJVkNPSWtnQmtJZ2lLZEIvd0Z4UVFOMFFaQUlhaWtEQUlWQ09Ja2dDRUlvaUtkQi93RnhRUU4wUVpBSWFpa0RBSVZDT0lrZ0NrSXdpS2RCL3dGeFFRTjBRWkFJYWlrREFJVkNPSWtnQzBJNGlLZEJBM1JCa0FocUtRTUFoVUk0aVNBQktRTVFoVGNERUNBQUlBdW5JaEJCL3dGeFFRTjBRWkFJYWlrREFFSTRpU0FQUVFWMlFmZ1BjVUdRQ0dvcEF3Q0ZRamlKSUE1QkRYWkIrQTl4UVpBSWFpa0RBSVZDT0lrZ0EwRVZka0g0RDNGQmtBaHFLUU1BaFVJNGlTQUVRaUNJcDBIL0FYRkJBM1JCa0FocUtRTUFoVUk0aVNBR1FpaUlwMEgvQVhGQkEzUkJrQWhxS1FNQWhVSTRpU0FJUWpDSXAwSC9BWEZCQTNSQmtBaHFLUU1BaFVJNGlTQUtRamlJcDBFRGRFR1FDR29wQXdDRlFqaUpJQUVwQXhpRk53TVlJQUFnQ3FjaUEwSC9BWEZCQTNSQmtBaHFLUU1BUWppSklCQkJCWFpCK0E5eFFaQUlhaWtEQUlWQ09Ja2dEMEVOZGtINEQzRkJrQWhxS1FNQWhVSTRpU0FPUVJWMlFmZ1BjVUdRQ0dvcEF3Q0ZRamlKSUFKQ0lJaW5RZjhCY1VFRGRFR1FDR29wQXdDRlFqaUpJQVJDS0lpblFmOEJjVUVEZEVHUUNHb3BBd0NGUWppSklBWkNNSWluUWY4QmNVRURkRUdRQ0dvcEF3Q0ZRamlKSUFoQ09JaW5RUU4wUVpBSWFpa0RBSVZDT0lrZ0FTa0RJSVUzQXlBZ0FDQUpRZjhCY1VFRGRFR1FDR29wQXdCQ09Ja2dBMEVGZGtINEQzRkJrQWhxS1FNQWhVSTRpU0FRUVExMlFmZ1BjVUdRQ0dvcEF3Q0ZRamlKSUE5QkZYWkIrQTl4UVpBSWFpa0RBSVZDT0lrZ0RVSWdpS2RCL3dGeFFRTjBRWkFJYWlrREFJVkNPSWtnQWtJb2lLZEIvd0Z4UVFOMFFaQUlhaWtEQUlWQ09Ja2dCRUl3aUtkQi93RnhRUU4wUVpBSWFpa0RBSVZDT0lrZ0JrSTRpS2RCQTNSQmtBaHFLUU1BaFVJNGlTQUJLUU1vaFRjREtDQUFJQWRCL3dGeFFRTjBRWkFJYWlrREFFSTRpU0FKUVFWMlFmZ1BjVUdRQ0dvcEF3Q0ZRamlKSUFOQkRYWkIrQTl4UVpBSWFpa0RBSVZDT0lrZ0VFRVZka0g0RDNGQmtBaHFLUU1BaFVJNGlTQU1RaUNJcDBIL0FYRkJBM1JCa0FocUtRTUFoVUk0aVNBTlFpaUlwMEgvQVhGQkEzUkJrQWhxS1FNQWhVSTRpU0FDUWpDSXAwSC9BWEZCQTNSQmtBaHFLUU1BaFVJNGlTQUVRamlJcDBFRGRFR1FDR29wQXdDRlFqaUpJQUVwQXpDRk53TXdJQUFnQlVIL0FYRkJBM1JCa0FocUtRTUFRamlKSUFkQkJYWkIrQTl4UVpBSWFpa0RBSVZDT0lrZ0NVRU5ka0g0RDNGQmtBaHFLUU1BaFVJNGlTQURRUlYyUWZnUGNVR1FDR29wQXdDRlFqaUpJQXRDSUlpblFmOEJjVUVEZEVHUUNHb3BBd0NGUWppSklBeENLSWluUWY4QmNVRURkRUdRQ0dvcEF3Q0ZRamlKSUExQ01JaW5RZjhCY1VFRGRFR1FDR29wQXdDRlFqaUpJQUpDT0lpblFRTjBRWkFJYWlrREFJVkNPSWtnQVNrRE9JVTNBemdMWEFCQkFFSUFOd1BJbXdGQkFFSUFOd080bXdGQkFFSUFOd093bXdGQkFFSUFOd09vbXdGQkFFSUFOd09nbXdGQkFFSUFOd09ZbXdGQkFFSUFOd09RbXdGQkFFSUFOd09JbXdGQkFFSUFOd09BbXdGQkFFRUFOZ0xBbXdFTHhRTUJDSDlCQUNFQlFRQkJBQ2tEeUpzQklBQ3RmRGNEeUpzQkFrQkJBQ2dDd0pzQklnSkZEUUJCQUNFQkFrQWdBaUFBYWlJRFFjQUFJQU5Cd0FCSkd5SUVJQUpCL3dGeElnVk5EUUFnQkNBRmF5SUJRUU54SVFaQkFDRUhBa0FnQkNBRlFYOXpha0VEU1EwQUlBRkJmSEVoQ0VFQUlRY0RRQ0FGSUFkcUlnSkJ3Sm9CYWlBSFFZQVphaTBBQURvQUFDQUNRY0dhQVdvZ0IwR0JHV290QUFBNkFBQWdBa0hDbWdGcUlBZEJnaGxxTFFBQU9nQUFJQUpCdzVvQmFpQUhRWU1aYWkwQUFEb0FBQ0FJSUFkQkJHb2lCMGNOQUFzZ0JTQUhhaUlGSVFJTElBWkZEUUFnQjBHQUdXb2hCeUFDUWY4QmNVRUJhaUVDQTBBZ0JVSEFtZ0ZxSUFjdEFBQTZBQUFnQjBFQmFpRUhJQUlpQlVFQmFpRUNJQVVoQlNBR1FYOXFJZ1lOQUFzTEFrQWdBMEUvVFEwQVFjQ2FBUkFCUVFBaEJBdEJBQ0FFTmdMQW13RUxBa0FnQUNBQmF5SUhRY0FBU1EwQUEwQWdBVUdBR1dvUUFTQUJRY0FBYWlFQklBZEJRR29pQjBFL1N3MEFDd3NDUUNBQklBQkdEUUJCQUNBSE5nTEFtd0VnQjBVTkFFRUFJUWRCQUNFQ0EwQWdCMEhBbWdGcUlBY2dBV3BCZ0JscUxRQUFPZ0FBUVFBb0FzQ2JBU0FDUVFGcUlnSkIvd0Z4SWdkTERRQUxDd3YvQXdJRWZ3RitJd0JCd0FCcklnQWtBQ0FBUVRocVFnQTNBd0FnQUVFd2FrSUFOd01BSUFCQktHcENBRGNEQUNBQVFTQnFRZ0EzQXdBZ0FFRVlha0lBTndNQUlBQkJFR3BDQURjREFDQUFRZ0EzQXdnZ0FFSUFOd01BUVFBaEFRSkFBa0JCQUNnQ3dKc0JJZ0pGRFFCQkFDRURBMEFnQUNBQmFpQUJRY0NhQVdvdEFBQTZBQUFnQVVFQmFpRUJJQUlnQTBFQmFpSURRZjhCY1VzTkFBdEJBQ0FDUVFGcU5nTEFtd0VnQUNBQ2FrR0FBVG9BQUNBQ1FXQnhRU0JIRFFFZ0FCQUJJQUJDQURjREdDQUFRZ0EzQXhBZ0FFSUFOd01JSUFCQ0FEY0RBQXdCQzBFQVFRRTJBc0NiQVNBQVFZQUJPZ0FBQzBFQUtRUEltd0VoQkVFQVFnQTNBOGliQVNBQVFRQTZBRFlnQUVFQU5nRXlJQUJDQURjQktpQUFRUUE2QUNrZ0FFSUFOd0FoSUFCQkFEb0FJQ0FBSUFSQ0JZZzhBRDRnQUNBRVFnMklQQUE5SUFBZ0JFSVZpRHdBUENBQUlBUkNIWWc4QURzZ0FDQUVRaVdJUEFBNklBQWdCRUl0aUR3QU9TQUFJQVJDTllnOEFEZ2dBQ0FFUWoySVBBQTNJQUFnQktkQkEzUTZBRDhnQUJBQlFRQkJBQ2tEZ0pzQk53T0FHVUVBUVFBcEE0aWJBVGNEaUJsQkFFRUFLUU9RbXdFM0E1QVpRUUJCQUNrRG1Kc0JOd09ZR1VFQVFRQXBBNkNiQVRjRG9CbEJBRUVBS1FPb213RTNBNmdaUVFCQkFDa0RzSnNCTndPd0dVRUFRUUFwQTdpYkFUY0R1QmtnQUVIQUFHb2tBQXNHQUVIQW1nRUxZZ0JCQUVJQU53UEltd0ZCQUVJQU53TzRtd0ZCQUVJQU53T3dtd0ZCQUVJQU53T29td0ZCQUVJQU53T2dtd0ZCQUVJQU53T1ltd0ZCQUVJQU53T1Ftd0ZCQUVJQU53T0ltd0ZCQUVJQU53T0Ftd0ZCQUVFQU5nTEFtd0VnQUJBRUVBVUxDNWdRQVFCQmdBZ0xrQkNRQUFBQUFBQUFBQUFBQUFBQUFBQUFHQmhnR01CNE1OZ2pJNHdqQmE5R0pzYkdQOForK1pHNDZPaUg2Qk52emZ1SGh5YUhUS0VUeTdpNDJyaXBZbTBSQVFFRUFRZ0ZBZ2xQVHlGUFFtNmVEVFkyMkRhdDdteWJwcWFpcGxrRVVmL1MwbS9TM3IyNURQWDE4L1g3QnZjT2VYbjVlZStBOHBadmI2RnZYODdlTUpHUmZwSDg3ejl0VWxKVlVxb0hwUGhnWUoxZ0ovM0FSN3k4eXJ5SmRtVTFtNXRXbTZ6Tkt6ZU9qZ0tPQkl3QmlxT2p0cU54RlZ2U0RBd3dER0E4R0d4N2UvRjcvNHIyaERVMTFEVzE0V3FBSFIxMEhlaHBPdlhnNEtmZ1UwZmRzOWZYZTlmMnJMTWh3c0l2d2w3dG1ad3VMcmd1YlpaY1EwdExNVXRpZXBZcC92N2YvcU1oNFYxWFYwRlhnaGF1MVJVVlZCV29RU3E5ZDNmQmQ1KzI3dWczTjl3M3BldHVrdVhscytWN1Z0ZWVuNTlHbjR6Wkl4UHc4T2Z3MHhmOUkwcEtOVXBxZjVRZzJ0cFAycDZWcVVSWVdIMVkraVd3b3NuSkE4a0d5by9QS1Nta0tWV05VbndLQ2lnS1VDSVVXckd4L3JIaFQzOVFvS0M2b0drYVhjbHJhN0ZyZjlyV0ZJV0ZMb1ZjcXhmWnZiM092WUZ6Wnp4ZFhXbGQwalM2anhBUVFCQ0FVQ0NROVBUMzlQTUQ5UWZMeXd2TEZzQ0wzVDQrK0Q3dHhuelRCUVVVQlNnUkNpMW5aNEZuSCtiT2VPVGt0K1J6VTlXWEp5ZWNKeVc3VGdKQlFSbEJNbGlDYzR1TEZvc3NuUXVucDZlbXAxRUJVL1o5ZmVsOXo1VDZzcFdWYnBYYyt6ZEoyTmhIMkk2ZnJWYjcrOHY3aXpEcmNPN3VuKzRqY2NITmZIenRmTWVSK0x0bVpvVm1GK1BNY2QzZFU5Mm1qcWQ3RnhkY0Y3aExMcTlIUndGSEFrYU9SWjZlUXA2RTNDRWF5c29QeWg3RmlkUXRMYlF0ZFpsYVdMKy94citSZVdNdUJ3Y2NCemdiRGordHJZNnRBU05IckZwYWRWcnFMN1N3ZzRNMmcyeTFHKzh6TTh3emhmOW10bU5qa1dNLzhzWmNBZ0lJQWhBS0JCS3FxcEtxT1RoSmszRngyWEd2cU9MZXlNZ0h5QTdQamNZWkdXUVp5SDB5MFVsSk9VbHljSkk3MmRsRDJZYWFyMS95OHUveXd4MzVNZVBqcStOTFNOdW9XMXR4VytJcXRybUlpQnFJTkpJTnZKcWFVcHFreUNrK0ppYVlKaTIrVEFzeU1zZ3lqZnBrdjdDdytyRHBTbjFaNmVtRDZSdHF6L0lQRHp3UGVETWVkOVhWYzlYbXByY3pnSUE2Z0hTNkhmUyt2c0srbVh4aEo4M05FODBtM29mck5EVFFOTDNrYUlsSVNEMUllbldRTXYvLzIvK3JKT05VZW5yMWV2ZVA5STJRa0hxUTlPbzlaRjlmWVYvQ1ByNmRJQ0NBSUIyZ1FEMW9hTDFvWjlYUUR4b2FhQnJRY2pUS3JxNkNyaGtzUWJlMHRPcTB5VjUxZlZSVVRWU2FHYWpPazVOMmsremxPMzhpSW9naURhcEVMMlJraldRSDZjaGo4ZkhqOGRzUy95cHpjOUZ6djZMbXpCSVNTQktRV2lTQ1FFQWRRRHBkZ0hvSUNDQUlRQ2dRU01QREs4Tlc2SnVWN095WDdETjd4ZC9iMjB2YmxwQ3JUYUdodnFGaEgxL0FqWTBPalJ5REI1RTlQZlE5OWNsNnlKZVhacGZNOFROYkFBQUFBQUFBQUFEUHp4dlBOdFNEK1NzcnJDdEZoMVp1ZG5iRmRwZXo3T0dDZ2pLQ1pMQVo1dGJXZjliK3FiRW9HeHRzRzloM05zTzF0ZTYxd1Z0M2RLK3ZocThSS1VPK2FtcTFhbmZmMUIxUVVGMVF1ZzJnNmtWRkNVVVNUSXBYOC9Qcjg4c1kremd3TU1Bd25mQmdyZS92bSs4cmRNUEVQei84UCtYRGZ0cFZWVWxWa2h5cXg2S2lzcUo1RUZuYjZ1cVA2Z05seWVsbFpZbGxEK3pLYXJxNjBycTVhR2tETHkrOEwyV1RYa3JBd0NmQVR1ZWRqdDdlWDk2K2dhRmdIQnh3SE9Cc09QejkvZFA5dXk3blJrMU5LVTFTWkpvZmtwSnlrdVRnT1haMWRjbDFqN3pxK2dZR0dBWXdIZ3cyaW9vU2lpU1lDYTZ5c3ZLeStVQjVTK2JtditaaldkR0ZEZzQ0RG5BMkhINGZIM3dmK0dNKzUySmlsV0kzOThSVjFOUjMxTzZqdFRxb3FKcW9LVEpOZ1phV1lwYkU5REZTK2ZuRCtaczY3MkxGeFRQRlp2YVhveVVsbENVMXNVb1FXVmw1V2ZJZ3NxdUVoQ3FFVks0VjBISnkxWEszcCtURk9UbmtPZFhkY3V4TVRDMU1XbUdZRmw1ZVpWN0tPN3lVZUhqOWVPZUY4Sjg0T09BNDNkaHc1WXlNQ293VWhnV1kwZEZqMGNheXZ4ZWxwYTZsUVF0WDVPTGlyK0pEVGRtaFlXR1pZUy80d2s2enMvYXo4VVY3UWlFaGhDRVZwVUkwbkp4S25KVFdKUWdlSG5nZThHWTg3a05ERVVNaVVvWmh4OGM3eDNiOGs3SDgvTmY4c3l2bFR3UUVFQVFnRkFna1VWRlpVYklJb3VPWm1WNlp2TWN2SlcxdHFXMVB4Tm9pRFEwMERXZzVHbVg2K3MvNmd6WHBlZC9mVzkrMmhLTnBmbjdsZnRlYi9La2tKSkFrUGJSSUdUczc3RHZGMTNiK3E2dVdxekU5UzVyT3poL09QdEdCOEJFUlJCR0lWU0taajQ4R2p3eUpBNE5PVGlWT1NtdWNCTGUzNXJmUlVYTm02K3VMNnd0Z3krQThQUEE4L2N4NHdZR0JQb0Y4dngvOWxKUnFsTlQrTlVEMzkvdjM2d3p6SExtNTNybWhaMjhZRXhOTUU1aGZKb3NzTExBc2ZaeFlVZFBUYTlQV3VMc0Y1K2U3NTJ0YzA0eHVicVZ1Vjh2Y09jVEVOOFJ1ODVXcUF3TU1BeGdQQmh0V1ZrVldpaE9zM0VSRURVUWFTWWhlZjMvaGY5K2UvcUNwcVo2cElUZFBpQ29xcUNwTmdsUm51N3ZXdTdGdGF3ckJ3U1BCUnVLZmgxTlRVVk9pQXFieDNOeFgzSzZMcFhJTEN5d0xXQ2NXVTUyZFRwMmMweWNCYkd5dGJFZkIyQ3N4TWNReGxmVmlwSFIwelhTSHVlano5dmIvOXVNSjhSVkdSZ1ZHQ2tPTVRLeXNpcXdKSmtXbGlZa2VpVHlYRDdVVUZGQVVvRVFvdE9IaG8rRmJRdCs2RmhaWUZyQk9MS1k2T3VnNnpkSjA5MmxwdVdsdjBOSUdDUWtrQ1VndEVrRndjTjF3cDYzZzE3YTI0cmJaVkhGdjBOQm4wTTYzdlI3dDdaUHRPMzdIMXN6TUY4d3UyNFhpUWtJVlFpcFhoR2lZbUZxWXRNSXRMS1NrcXFSSkRsWHRLQ2lnS0YySVVIVmNYRzFjMmpHNGh2ajR4L2lUUCsxcmhvWWloa1NrRWNJPVwiO1xuICAgIHZhciBoYXNoJDEgPSBcImRiYTEyMDE5XCI7XG4gICAgdmFyIHdhc21Kc29uJDEgPSB7XG4gICAgXHRuYW1lOiBuYW1lJDEsXG4gICAgXHRkYXRhOiBkYXRhJDEsXG4gICAgXHRoYXNoOiBoYXNoJDFcbiAgICB9O1xuXG4gICAgY29uc3QgbXV0ZXgkMSA9IG5ldyBNdXRleCgpO1xuICAgIGxldCB3YXNtQ2FjaGUkMSA9IG51bGw7XG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlcyBXaGlybHBvb2wgaGFzaFxuICAgICAqIEBwYXJhbSBkYXRhIElucHV0IGRhdGEgKHN0cmluZywgQnVmZmVyIG9yIFR5cGVkQXJyYXkpXG4gICAgICogQHJldHVybnMgQ29tcHV0ZWQgaGFzaCBhcyBhIGhleGFkZWNpbWFsIHN0cmluZ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdoaXJscG9vbChkYXRhKSB7XG4gICAgICAgIGlmICh3YXNtQ2FjaGUkMSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2tlZENyZWF0ZShtdXRleCQxLCB3YXNtSnNvbiQxLCA2NClcbiAgICAgICAgICAgICAgICAudGhlbigod2FzbSkgPT4ge1xuICAgICAgICAgICAgICAgIHdhc21DYWNoZSQxID0gd2FzbTtcbiAgICAgICAgICAgICAgICByZXR1cm4gd2FzbUNhY2hlJDEuY2FsY3VsYXRlKGRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGhhc2ggPSB3YXNtQ2FjaGUkMS5jYWxjdWxhdGUoZGF0YSk7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGhhc2gpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgV2hpcmxwb29sIGhhc2ggaW5zdGFuY2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVXaGlybHBvb2woKSB7XG4gICAgICAgIHJldHVybiBXQVNNSW50ZXJmYWNlKHdhc21Kc29uJDEsIDY0KS50aGVuKCh3YXNtKSA9PiB7XG4gICAgICAgICAgICB3YXNtLmluaXQoKTtcbiAgICAgICAgICAgIGNvbnN0IG9iaiA9IHtcbiAgICAgICAgICAgICAgICBpbml0OiAoKSA9PiB7IHdhc20uaW5pdCgpOyByZXR1cm4gb2JqOyB9LFxuICAgICAgICAgICAgICAgIHVwZGF0ZTogKGRhdGEpID0+IHsgd2FzbS51cGRhdGUoZGF0YSk7IHJldHVybiBvYmo7IH0sXG4gICAgICAgICAgICAgICAgZGlnZXN0OiAob3V0cHV0VHlwZSkgPT4gd2FzbS5kaWdlc3Qob3V0cHV0VHlwZSksXG4gICAgICAgICAgICAgICAgc2F2ZTogKCkgPT4gd2FzbS5zYXZlKCksXG4gICAgICAgICAgICAgICAgbG9hZDogKGRhdGEpID0+IHsgd2FzbS5sb2FkKGRhdGEpOyByZXR1cm4gb2JqOyB9LFxuICAgICAgICAgICAgICAgIGJsb2NrU2l6ZTogNjQsXG4gICAgICAgICAgICAgICAgZGlnZXN0U2l6ZTogNjQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdmFyIG5hbWUgPSBcInNtM1wiO1xuICAgIHZhciBkYXRhID0gXCJBR0Z6YlFFQUFBQUJEQU5nQUFGL1lBQUFZQUYvQUFNSUJ3QUJBZ0lCQUFJRkJBRUJBZ0lHRGdKL0FVSHdpUVVMZndCQmdBZ0xCM0FJQm0xbGJXOXllUUlBRGtoaGMyaGZSMlYwUW5WbVptVnlBQUFKU0dGemFGOUpibWwwQUFFTFNHRnphRjlWY0dSaGRHVUFBZ3BJWVhOb1gwWnBibUZzQUFRTlNHRnphRjlIWlhSVGRHRjBaUUFGRGtoaGMyaGZRMkZzWTNWc1lYUmxBQVlLVTFSQlZFVmZVMGxhUlFNQkN0b2RCd1VBUVlBSkMxRUFRUUJDemR5M25PN0p3LzJ3ZnpjQ29Ja0JRUUJDdk9HOHk2cVZ6cGdXTndLWWlRRkJBRUxYaFpHNWdjQ0J4Vm8zQXBDSkFVRUFRdStzZ0p5WDE2eUt5UUEzQW9pSkFVRUFRZ0EzQW9DSkFRdnZBd0VJZndKQUlBQkZEUUJCQUNFQlFRQkJBQ2dDZ0lrQklnSWdBR29pQXpZQ2dJa0JJQUpCUDNFaEJBSkFJQU1nQWs4TkFFRUFRUUFvQW9TSkFVRUJhallDaElrQkMwR0FDU0VDQWtBZ0JFVU5BQUpBUWNBQUlBUnJJZ1VnQUUwTkFDQUVJUUVNQVFzZ0JFRS9jeUVHSUFSQnFJa0JhaUVDUVlBSklRTUNRQUpBSUFWQkIzRWlCdzBBSUFVaENBd0JDeUFISVFnRFFDQUNJQU10QUFBNkFBQWdBa0VCYWlFQ0lBTkJBV29oQXlBSVFYOXFJZ2dOQUF0QndBQWdCeUFFYW1zaENBc0NRQ0FHUVFkSkRRQURRQ0FDSUFNcEFBQTNBQUFnQWtFSWFpRUNJQU5CQ0dvaEF5QUlRWGhxSWdnTkFBc0xRYWlKQVJBRElBVkJnQWxxSVFJZ0FDQUZheUVBQ3dKQUlBQkJ3QUJKRFFBRFFDQUNFQU1nQWtIQUFHb2hBaUFBUVVCcUlnQkJQMHNOQUFzTElBQkZEUUFnQVVHb2lRRnFJUU1DUUFKQUlBQkJCM0VpQ0EwQUlBQWhCQXdCQ3lBQVFUaHhJUVFEUUNBRElBSXRBQUE2QUFBZ0EwRUJhaUVESUFKQkFXb2hBaUFJUVg5cUlnZ05BQXNMSUFCQkNFa05BQU5BSUFNZ0FpMEFBRG9BQUNBRElBSXRBQUU2QUFFZ0F5QUNMUUFDT2dBQ0lBTWdBaTBBQXpvQUF5QURJQUl0QUFRNkFBUWdBeUFDTFFBRk9nQUZJQU1nQWkwQUJqb0FCaUFESUFJdEFBYzZBQWNnQTBFSWFpRURJQUpCQ0dvaEFpQUVRWGhxSWdRTkFBc0xDK3dMQVJsL0l3QkJrQUpySWdFa0FDQUJJQUFvQWhnaUFrRVlkQ0FDUVlEK0EzRkJDSFJ5SUFKQkNIWkJnUDREY1NBQ1FSaDJjbklpQXpZQ0dDQUJJQUFvQWhRaUFrRVlkQ0FDUVlEK0EzRkJDSFJ5SUFKQkNIWkJnUDREY1NBQ1FSaDJjbklpQkRZQ0ZDQUJJQUFvQWdnaUFrRVlkQ0FDUVlEK0EzRkJDSFJ5SUFKQkNIWkJnUDREY1NBQ1FSaDJjbklpQlRZQ0NDQUJJQUFvQWhBaUFrRVlkQ0FDUVlEK0EzRkJDSFJ5SUFKQkNIWkJnUDREY1NBQ1FSaDJjbklpQmpZQ0VDQUJJQUFvQWlBaUFrRVlkQ0FDUVlEK0EzRkJDSFJ5SUFKQkNIWkJnUDREY1NBQ1FSaDJjbklpQnpZQ0lDQUJJQUFvQWdRaUFrRVlkQ0FDUVlEK0EzRkJDSFJ5SUFKQkNIWkJnUDREY1NBQ1FSaDJjbklpQ0RZQ0JDQUJJQUFvQWd3aUFrRVlkQ0FDUVlEK0EzRkJDSFJ5SUFKQkNIWkJnUDREY1NBQ1FSaDJjbklpQ1RZQ0RDQUJJQUFvQWh3aUFrRVlkQ0FDUVlEK0EzRkJDSFJ5SUFKQkNIWkJnUDREY1NBQ1FSaDJjbklpQ2pZQ0hDQUJJQUFvQWdBaUFrRVlkQ0FDUVlEK0EzRkJDSFJ5SUFKQkNIWkJnUDREY1NBQ1FSaDJjbklpQ3pZQ0FDQUFLQUlrSVFJZ0FTQUFLQUkwSWd4QkdIUWdERUdBL2dOeFFRaDBjaUFNUVFoMlFZRCtBM0VnREVFWWRuSnlJZzAyQWpRZ0FTQUFLQUlvSWd4QkdIUWdERUdBL2dOeFFRaDBjaUFNUVFoMlFZRCtBM0VnREVFWWRuSnlJZzQyQWlnZ0FTQUxJQTFCRDNkeklBcHpJZ3hCRjNjZ0RFRVBkM01nQ1VFSGQzTWdEbk1nREhNaUNqWUNRQ0FCSUFBb0FqZ2lERUVZZENBTVFZRCtBM0ZCQ0hSeUlBeEJDSFpCZ1A0RGNTQU1RUmgyY25JaUN6WUNPQ0FCSUFBb0Fpd2lERUVZZENBTVFZRCtBM0ZCQ0hSeUlBeEJDSFpCZ1A0RGNTQU1RUmgyY25JaUR6WUNMQ0FCSUFnZ0MwRVBkM01nQjNNaURFRVhkeUFNUVE5M2N5QUdRUWQzY3lBUGN5QU1jellDUkNBQklBQW9BandpREVFWWRDQU1RWUQrQTNGQkNIUnlJQXhCQ0haQmdQNERjU0FNUVJoMmNuSWlERFlDUENBQklBSkJHSFFnQWtHQS9nTnhRUWgwY2lBQ1FRaDJRWUQrQTNFZ0FrRVlkbkp5SWdJMkFpUWdBU0FBS0FJd0lnQkJHSFFnQUVHQS9nTnhRUWgwY2lBQVFRaDJRWUQrQTNFZ0FFRVlkbkp5SWdZMkFqQWdBU0FGSUF4QkQzZHpJQUp6SWdCQkYzY2dBRUVQZDNNZ0JFRUhkM01nQm5NZ0FITTJBa2dnQVNBT0lBcEJEM2R6SUFseklnQkJGM2NnQUVFUGQzTWdBMEVIZDNNZ0RYTWdBSE0yQWt4QkFDRUdRU0FoQnlBQklReEJBQ2dDaUlrQkloQWhDVUVBS0FLa2lRRWlFU0VQUVFBb0FxQ0pBU0lTSVExQkFDZ0NuSWtCSWhNaENFRUFLQUtZaVFFaUZDRU9RUUFvQXBTSkFTSVZJUlpCQUNnQ2tJa0JJaGNoQTBFQUtBS01pUUVpR0NFTEEwQWdDQ0FPSWdKeklBMGlCSE1nRDJvZ0NTSUFRUXgzSWcwZ0FtcEJtWXF4emdjZ0IzWkJtWXF4emdjZ0JuUnlha0VIZHlJUGFpQU1LQUlBSWhscUlnbEJFWGNnQ1VFSmQzTWdDWE1oRGlBRElnVWdDM01nQUhNZ0Ztb2dEeUFOYzJvZ0RFRVFhaWdDQUNBWmMyb2hDU0FNUVFScUlRd2dCMEYvYWlFSElBaEJFM2NoRFNBTFFRbDNJUU1nQkNFUElBSWhDQ0FGSVJZZ0FDRUxJQVpCQVdvaUJrRVFSdzBBQzBFQUlRWkJFQ0VIQTBBZ0FTQUdhaUlNUWRBQWFpQU1RVGhxS0FJQUlBeEJMR29vQWdBZ0RFRVFhaWdDQUhNZ0RFSEVBR29vQWdBaUZrRVBkM01pQ0VFWGQzTWdDRUVQZDNNZ0RFRWNhaWdDQUVFSGQzTWdDSE1pR1RZQ0FDQU5JZzhnRGlJTVFYOXpjU0FDSUF4eGNpQUVhaUFKSWdoQkRIY2lEU0FNYWtHS3U1N1VCeUFIZDJwQkIzY2lCR29nQ21vaUNVRVJkeUFKUVFsM2N5QUpjeUVPSUFnZ0F5SUxJQUJ5Y1NBTElBQnhjaUFGYWlBRUlBMXphaUFaSUFwemFpRUpJQVpCQkdvaEJpQUNRUk4zSVEwZ0FFRUpkeUVESUJZaENpQVBJUVFnRENFQ0lBc2hCU0FJSVFBZ0IwRUJhaUlIUWNBQVJ3MEFDMEVBSUE4Z0VYTTJBcVNKQVVFQUlBMGdFbk0yQXFDSkFVRUFJQXdnRTNNMkFweUpBVUVBSUE0Z0ZITTJBcGlKQVVFQUlBc2dGWE0yQXBTSkFVRUFJQU1nRjNNMkFwQ0pBVUVBSUFnZ0dITTJBb3lKQVVFQUlBa2dFSE0yQW9pSkFTQUJRWkFDYWlRQUM0SUxBUXAvSXdCQkVHc2lBQ1FBSUFCQkFDZ0NnSWtCSWdGQkczUWdBVUVMZEVHQWdQd0hjWElnQVVFRmRrR0EvZ054SUFGQkEzUkJHSFp5Y2pZQ0RDQUFRUUFvQW9TSkFTSUNRUU4wSWdNZ0FVRWRkbklpQkVFWWRDQUVRWUQrQTNGQkNIUnlJQUpCQlhaQmdQNERjU0FEUVJoMmNuSTJBZ2dDUUVFNFFmZ0FJQUZCUDNFaUJVRTRTUnNnQldzaUEwVU5BRUVBSUFNZ0FXb2lBVFlDZ0lrQkFrQWdBU0FEVHcwQVFRQWdBa0VCYWpZQ2hJa0JDMEdRQ0NFQlFRQWhCZ0pBSUFWRkRRQUNRQ0FEUWNBQUlBVnJJZ2RQRFFBZ0JTRUdEQUVMSUFWQlAzTWhDQ0FGUWFpSkFXb2hBVUdRQ0NFQ0FrQUNRQ0FIUVFkeElna05BQ0FISVFRTUFRc2dDU0VFQTBBZ0FTQUNMUUFBT2dBQUlBRkJBV29oQVNBQ1FRRnFJUUlnQkVGL2FpSUVEUUFMUWNBQUlBa2dCV3BySVFRTEFrQWdDRUVIU1EwQUEwQWdBU0FDS1FBQU53QUFJQUZCQ0dvaEFTQUNRUWhxSVFJZ0JFRjRhaUlFRFFBTEMwR29pUUVRQXlBSFFaQUlhaUVCSUFNZ0Iyc2hBd3NDUUNBRFFjQUFTUTBBQTBBZ0FSQURJQUZCd0FCcUlRRWdBMEZBYWlJRFFUOUxEUUFMQ3lBRFJRMEFJQVpCcUlrQmFpRUNBa0FDUUNBRFFRZHhJZ1FOQUNBRElRVU1BUXNnQTBFNGNTRUZBMEFnQWlBQkxRQUFPZ0FBSUFKQkFXb2hBaUFCUVFGcUlRRWdCRUYvYWlJRURRQUxDeUFEUVFoSkRRQURRQ0FDSUFFdEFBQTZBQUFnQWlBQkxRQUJPZ0FCSUFJZ0FTMEFBam9BQWlBQ0lBRXRBQU02QUFNZ0FpQUJMUUFFT2dBRUlBSWdBUzBBQlRvQUJTQUNJQUV0QUFZNkFBWWdBaUFCTFFBSE9nQUhJQUpCQ0dvaEFpQUJRUWhxSVFFZ0JVRjRhaUlGRFFBTEMwRUFRUUFvQW9DSkFTSUNRUWhxTmdLQWlRRWdBa0UvY1NFQkFrQWdBa0Y0U1EwQVFRQkJBQ2dDaElrQlFRRnFOZ0tFaVFFTEFrQUNRQUpBQWtBZ0FRMEFRUUFoQVF3QkN5QUJRVGhKRFFBZ0FVR29pUUZxSUFBdEFBZzZBQUFDUUNBQlFUOUdEUUFnQVVHcGlRRnFJQUF0QUFrNkFBQWdBVUUrUmcwQUlBRkJxb2tCYWlBQUxRQUtPZ0FBSUFGQlBVWU5BQ0FCUWF1SkFXb2dBQzBBQ3pvQUFDQUJRVHhHRFFBZ0FVR3NpUUZxSUFBdEFBdzZBQUFnQVVFN1JnMEFJQUZCcllrQmFpQUFMUUFOT2dBQUlBRkJPa1lOQUNBQlFhNkpBV29nQUMwQURqb0FBQ0FCUVRsR0RRQWdBVUd2aVFGcUlBQXRBQTg2QUFCQnFJa0JFQU1NQXd0QnFJa0JFQU1nQWtFSGNTSUVSUTBDSUFGQlIyb2hCU0FBUVFocVFjQUFJQUZyYWlFQ0lBRkJTR29oQmtHb2lRRWhBU0FFSVFNRFFDQUJJQUl0QUFBNkFBQWdBVUVCYWlFQklBSkJBV29oQWlBRFFYOXFJZ01OQUFzZ0JVRUhTUTBDSUFZZ0JHc2hBd3dCQ3lBQlFhaUpBV29oQVVFSUlRTWdBRUVJYWlFQ0N3TkFJQUVnQWlrQUFEY0FBQ0FCUVFocUlRRWdBa0VJYWlFQ0lBTkJlR29pQXcwQUN3dEJBRUVBS0FLSWlRRWlBVUVZZENBQlFZRCtBM0ZCQ0hSeUlBRkJDSFpCZ1A0RGNTQUJRUmgyY25JMkFvQUpRUUJCQUNnQ2pJa0JJZ0ZCR0hRZ0FVR0EvZ054UVFoMGNpQUJRUWgyUVlEK0EzRWdBVUVZZG5KeU5nS0VDVUVBUVFBb0FwQ0pBU0lCUVJoMElBRkJnUDREY1VFSWRISWdBVUVJZGtHQS9nTnhJQUZCR0haeWNqWUNpQWxCQUVFQUtBS1VpUUVpQVVFWWRDQUJRWUQrQTNGQkNIUnlJQUZCQ0haQmdQNERjU0FCUVJoMmNuSTJBb3dKUVFCQkFDZ0NtSWtCSWdGQkdIUWdBVUdBL2dOeFFRaDBjaUFCUVFoMlFZRCtBM0VnQVVFWWRuSnlOZ0tRQ1VFQVFRQW9BcHlKQVNJQlFSaDBJQUZCZ1A0RGNVRUlkSElnQVVFSWRrR0EvZ054SUFGQkdIWnljallDbEFsQkFFRUFLQUtnaVFFaUFVRVlkQ0FCUVlEK0EzRkJDSFJ5SUFGQkNIWkJnUDREY1NBQlFSaDJjbkkyQXBnSlFRQkJBQ2dDcElrQklnRkJHSFFnQVVHQS9nTnhRUWgwY2lBQlFRaDJRWUQrQTNFZ0FVRVlkbkp5TmdLY0NTQUFRUkJxSkFBTEJnQkJnSWtCQzVVQ0FRUi9RUUJDemR5M25PN0p3LzJ3ZnpjQ29Ja0JRUUJDdk9HOHk2cVZ6cGdXTndLWWlRRkJBRUxYaFpHNWdjQ0J4Vm8zQXBDSkFVRUFRdStzZ0p5WDE2eUt5UUEzQW9pSkFVRUFRZ0EzQW9DSkFRSkFJQUJGRFFCQkFDQUFOZ0tBaVFGQmdBa2hBUUpBSUFCQndBQkpEUUJCZ0FraEFRTkFJQUVRQXlBQlFjQUFhaUVCSUFCQlFHb2lBRUUvU3cwQUN5QUFSUTBCQ3lBQVFYOXFJUUlDUUFKQUlBQkJCM0VpQXcwQVFhaUpBU0VFREFFTElBQkJlSEVoQUVHb2lRRWhCQU5BSUFRZ0FTMEFBRG9BQUNBRVFRRnFJUVFnQVVFQmFpRUJJQU5CZjJvaUF3MEFDd3NnQWtFSFNRMEFBMEFnQkNBQktRQUFOd0FBSUFSQkNHb2hCQ0FCUVFocUlRRWdBRUY0YWlJQURRQUxDeEFFQ3d0UkFnQkJnQWdMQkdnQUFBQUFRWkFJQzBDQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQVwiO1xuICAgIHZhciBoYXNoID0gXCI1NjUxNTcxMlwiO1xuICAgIHZhciB3YXNtSnNvbiA9IHtcbiAgICBcdG5hbWU6IG5hbWUsXG4gICAgXHRkYXRhOiBkYXRhLFxuICAgIFx0aGFzaDogaGFzaFxuICAgIH07XG5cbiAgICBjb25zdCBtdXRleCA9IG5ldyBNdXRleCgpO1xuICAgIGxldCB3YXNtQ2FjaGUgPSBudWxsO1xuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZXMgU00zIGhhc2hcbiAgICAgKiBAcGFyYW0gZGF0YSBJbnB1dCBkYXRhIChzdHJpbmcsIEJ1ZmZlciBvciBUeXBlZEFycmF5KVxuICAgICAqIEByZXR1cm5zIENvbXB1dGVkIGhhc2ggYXMgYSBoZXhhZGVjaW1hbCBzdHJpbmdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzbTMoZGF0YSkge1xuICAgICAgICBpZiAod2FzbUNhY2hlID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9ja2VkQ3JlYXRlKG11dGV4LCB3YXNtSnNvbiwgMzIpXG4gICAgICAgICAgICAgICAgLnRoZW4oKHdhc20pID0+IHtcbiAgICAgICAgICAgICAgICB3YXNtQ2FjaGUgPSB3YXNtO1xuICAgICAgICAgICAgICAgIHJldHVybiB3YXNtQ2FjaGUuY2FsY3VsYXRlKGRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGhhc2ggPSB3YXNtQ2FjaGUuY2FsY3VsYXRlKGRhdGEpO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShoYXNoKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IFNNMyBoYXNoIGluc3RhbmNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlU00zKCkge1xuICAgICAgICByZXR1cm4gV0FTTUludGVyZmFjZSh3YXNtSnNvbiwgMzIpLnRoZW4oKHdhc20pID0+IHtcbiAgICAgICAgICAgIHdhc20uaW5pdCgpO1xuICAgICAgICAgICAgY29uc3Qgb2JqID0ge1xuICAgICAgICAgICAgICAgIGluaXQ6ICgpID0+IHsgd2FzbS5pbml0KCk7IHJldHVybiBvYmo7IH0sXG4gICAgICAgICAgICAgICAgdXBkYXRlOiAoZGF0YSkgPT4geyB3YXNtLnVwZGF0ZShkYXRhKTsgcmV0dXJuIG9iajsgfSxcbiAgICAgICAgICAgICAgICBkaWdlc3Q6IChvdXRwdXRUeXBlKSA9PiB3YXNtLmRpZ2VzdChvdXRwdXRUeXBlKSxcbiAgICAgICAgICAgICAgICBzYXZlOiAoKSA9PiB3YXNtLnNhdmUoKSxcbiAgICAgICAgICAgICAgICBsb2FkOiAoZGF0YSkgPT4geyB3YXNtLmxvYWQoZGF0YSk7IHJldHVybiBvYmo7IH0sXG4gICAgICAgICAgICAgICAgYmxvY2tTaXplOiA2NCxcbiAgICAgICAgICAgICAgICBkaWdlc3RTaXplOiAzMixcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBleHBvcnRzLmFkbGVyMzIgPSBhZGxlcjMyO1xuICAgIGV4cG9ydHMuYXJnb24yVmVyaWZ5ID0gYXJnb24yVmVyaWZ5O1xuICAgIGV4cG9ydHMuYXJnb24yZCA9IGFyZ29uMmQ7XG4gICAgZXhwb3J0cy5hcmdvbjJpID0gYXJnb24yaTtcbiAgICBleHBvcnRzLmFyZ29uMmlkID0gYXJnb24yaWQ7XG4gICAgZXhwb3J0cy5iY3J5cHQgPSBiY3J5cHQ7XG4gICAgZXhwb3J0cy5iY3J5cHRWZXJpZnkgPSBiY3J5cHRWZXJpZnk7XG4gICAgZXhwb3J0cy5ibGFrZTJiID0gYmxha2UyYjtcbiAgICBleHBvcnRzLmJsYWtlMnMgPSBibGFrZTJzO1xuICAgIGV4cG9ydHMuYmxha2UzID0gYmxha2UzO1xuICAgIGV4cG9ydHMuY3JjMzIgPSBjcmMzMjtcbiAgICBleHBvcnRzLmNyYzMyYyA9IGNyYzMyYztcbiAgICBleHBvcnRzLmNyZWF0ZUFkbGVyMzIgPSBjcmVhdGVBZGxlcjMyO1xuICAgIGV4cG9ydHMuY3JlYXRlQkxBS0UyYiA9IGNyZWF0ZUJMQUtFMmI7XG4gICAgZXhwb3J0cy5jcmVhdGVCTEFLRTJzID0gY3JlYXRlQkxBS0UycztcbiAgICBleHBvcnRzLmNyZWF0ZUJMQUtFMyA9IGNyZWF0ZUJMQUtFMztcbiAgICBleHBvcnRzLmNyZWF0ZUNSQzMyID0gY3JlYXRlQ1JDMzI7XG4gICAgZXhwb3J0cy5jcmVhdGVDUkMzMkMgPSBjcmVhdGVDUkMzMkM7XG4gICAgZXhwb3J0cy5jcmVhdGVITUFDID0gY3JlYXRlSE1BQztcbiAgICBleHBvcnRzLmNyZWF0ZUtlY2NhayA9IGNyZWF0ZUtlY2NhaztcbiAgICBleHBvcnRzLmNyZWF0ZU1ENCA9IGNyZWF0ZU1ENDtcbiAgICBleHBvcnRzLmNyZWF0ZU1ENSA9IGNyZWF0ZU1ENTtcbiAgICBleHBvcnRzLmNyZWF0ZVJJUEVNRDE2MCA9IGNyZWF0ZVJJUEVNRDE2MDtcbiAgICBleHBvcnRzLmNyZWF0ZVNIQTEgPSBjcmVhdGVTSEExO1xuICAgIGV4cG9ydHMuY3JlYXRlU0hBMjI0ID0gY3JlYXRlU0hBMjI0O1xuICAgIGV4cG9ydHMuY3JlYXRlU0hBMjU2ID0gY3JlYXRlU0hBMjU2O1xuICAgIGV4cG9ydHMuY3JlYXRlU0hBMyA9IGNyZWF0ZVNIQTM7XG4gICAgZXhwb3J0cy5jcmVhdGVTSEEzODQgPSBjcmVhdGVTSEEzODQ7XG4gICAgZXhwb3J0cy5jcmVhdGVTSEE1MTIgPSBjcmVhdGVTSEE1MTI7XG4gICAgZXhwb3J0cy5jcmVhdGVTTTMgPSBjcmVhdGVTTTM7XG4gICAgZXhwb3J0cy5jcmVhdGVXaGlybHBvb2wgPSBjcmVhdGVXaGlybHBvb2w7XG4gICAgZXhwb3J0cy5jcmVhdGVYWEhhc2gxMjggPSBjcmVhdGVYWEhhc2gxMjg7XG4gICAgZXhwb3J0cy5jcmVhdGVYWEhhc2gzID0gY3JlYXRlWFhIYXNoMztcbiAgICBleHBvcnRzLmNyZWF0ZVhYSGFzaDMyID0gY3JlYXRlWFhIYXNoMzI7XG4gICAgZXhwb3J0cy5jcmVhdGVYWEhhc2g2NCA9IGNyZWF0ZVhYSGFzaDY0O1xuICAgIGV4cG9ydHMua2VjY2FrID0ga2VjY2FrO1xuICAgIGV4cG9ydHMubWQ0ID0gbWQ0O1xuICAgIGV4cG9ydHMubWQ1ID0gbWQ1O1xuICAgIGV4cG9ydHMucGJrZGYyID0gcGJrZGYyO1xuICAgIGV4cG9ydHMucmlwZW1kMTYwID0gcmlwZW1kMTYwO1xuICAgIGV4cG9ydHMuc2NyeXB0ID0gc2NyeXB0O1xuICAgIGV4cG9ydHMuc2hhMSA9IHNoYTE7XG4gICAgZXhwb3J0cy5zaGEyMjQgPSBzaGEyMjQ7XG4gICAgZXhwb3J0cy5zaGEyNTYgPSBzaGEyNTY7XG4gICAgZXhwb3J0cy5zaGEzID0gc2hhMztcbiAgICBleHBvcnRzLnNoYTM4NCA9IHNoYTM4NDtcbiAgICBleHBvcnRzLnNoYTUxMiA9IHNoYTUxMjtcbiAgICBleHBvcnRzLnNtMyA9IHNtMztcbiAgICBleHBvcnRzLndoaXJscG9vbCA9IHdoaXJscG9vbDtcbiAgICBleHBvcnRzLnh4aGFzaDEyOCA9IHh4aGFzaDEyODtcbiAgICBleHBvcnRzLnh4aGFzaDMgPSB4eGhhc2gzO1xuICAgIGV4cG9ydHMueHhoYXNoMzIgPSB4eGhhc2gzMjtcbiAgICBleHBvcnRzLnh4aGFzaDY0ID0geHhoYXNoNjQ7XG5cbn0pKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(sc_client)/./node_modules/.pnpm/hash-wasm@4.11.0/node_modules/hash-wasm/dist/index.umd.js\n");

/***/ })

};
;